{
  "genesis_time": "2022-10-10T00:00:00Z",
  "chain_id": "realm-1",
  "consensus_params": {
    "Block": {
      "MaxTxBytes": "1000000",
      "MaxDataBytes": "2000000",
      "MaxBlockBytes": "0",
      "MaxGas": "10000000",
      "TimeIotaMS": "100"
    },
    "Validator": null
  },
  "app_hash": null,
  "app_state": {
    "@type": "/gno.GenesisState",
    "balances": [
      "g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5=100000000ugnot",
      "g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj=10000000000000ugnot",
      "g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t=1000000000000ugnot",
      "g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t=15000000ugnot",
      "g1r3ut929yd837ln5lwujxrqt2j5ug7e98q0fkvm=15000000ugnot",
      "g1j5czzm2mugysnm772y8qxkas9ydqhz0uulm9ax=15000000ugnot",
      "g1kjw7c4aeuv3sj27q025fsakpypcup0cq9urw8d=15000000ugnot",
      "g1f4v282mwyhu29afke4vq5r2xzcm6z3ftnugcnv=1000000000000ugnot",
      "g127jydsh6cms3lrtdenydxsckh23a8d6emqcvfa=1000000000000ugnot",
      "g1u7y667z64x2h7vc6fmpcprgey4ck233jaww9zq=10000000000ugnot",
      "g14da4n9hcynyzz83q607uu8keuh9hwlv42ra6fa=10000000000ugnot",
      "g15gdm49ktawvkrl88jadqpucng37yxutucuwaef=10000000000ugnot",
      "g1589c8cekvmjfmy0qrd4f3z52r7fn7rgk02667s=10000000000ugnot",
      "g13sm84nuqed3fuank8huh7x9mupgw22uft3lcl8=10000000000ugnot",
      "g1m6732pkrngu9vrt0g7056lvr9kcqc4mv83xl5q=10000000000ugnot",
      "g1wg88rhzlwxjd2z4j5de5v5xq30dcf6rjq3dhsj=10000000000ugnot",
      "g18pmaskasz7mxj6rmgrl3al58xu45a7w0l5nmc0=10000000000ugnot",
      "g19wwhkmqlns70604ksp6rkuuu42qhtvyh05lffz=10000000000ugnot",
      "g187982000zsc493znqt828s90cmp6hcp2erhu6m=10000000000ugnot",
      "g1ndpsnrspdnauckytvkfv8s823t3gmpqmtky8pl=10000000000ugnot",
      "g16ja66d65emkr0zxd2tu7xjvm7utthyhpej0037=10000000000ugnot",
      "g1ds24jj9kqjcskd0gzu24r9e4n62ggye230zuv5=10000000000ugnot",
      "g1trkzq75ntamsnw9xnrav2v7gy2lt5g6p29yhdr=10000000000ugnot",
      "g1rrf8s5mrmu00sx04fzfsvc399fklpeg2x0a7mz=10000000000ugnot",
      "g19p5ntfvpt4lwq4jqsmnxsnelhf3tff9scy3w8w=10000000000ugnot",
      "g1tue8l73d6rq4vhqdsp2sr3zhuzpure3k2rnwpz=10000000000ugnot",
      "g14hhsss4ngx5kq77je5g0tl4vftg8qp45ceadk3=10000000000ugnot",
      "g1768hvkh7anhd40ch4h7jdh6j3mpcs7hrat4gl0=10000000000ugnot",
      "g15fa8kyjhu88t9dr8zzua8fwdvkngv5n8yqsm0n=10000000000ugnot",
      "g1xhccdjcscuhgmt3quww6qdy3j3czqt3urc2eac=10000000000ugnot",
      "g1z629z04f85k4t5gnkk5egpxw9tqxeec435esap=10000000000ugnot",
      "g1pfldkplz9puq0v82lu9vqcve9nwrxuq9qe5ttv=10000000000ugnot",
      "g152pn0g5qfgxr7yx8zlwjq48hytkafd8x7egsfv=10000000000ugnot",
      "g1cf2ye686ke38vjyqakreprljum4xu6rwf5jskq=10000000000ugnot",
      "g1c5shztyaj4gjrc5zlwmh9xhex5w7l4asffs2w6=10000000000ugnot",
      "g1lhpx2ktk0ha3qw42raxq4m24a4c4xqxyrgv54q=10000000000ugnot",
      "g1026p54q0j902059sm2zsv37krf0ghcl7gmhyv7=10000000000ugnot",
      "g1n4yvwnv77frq2ccuw27dmtjkd7u4p4jg0pgm7k=10000000000ugnot",
      "g13m7f2e6r3lh3ykxupacdt9sem2tlvmaamwjhll=10000000000ugnot",
      "g19uxluuecjlsqvwmwu8sp6pxaaqfhk972q975xd=10000000000ugnot",
      "g1j80fpcsumfkxypvydvtwtz3j4sdwr8c2u0lr64=10000000000ugnot",
      "g1tjdpptuk9eysq6z38nscqyycr998xjyx3w8jvw=10000000000ugnot",
      "g19t3n89slfemgd3mwuat4lajwcp0yxrkadgeg7a=10000000000ugnot",
      "g1yqndt8xx92l9h494jfruz2w79swzjes3n4wqjc=10000000000ugnot",
      "g13278z0a5ufeg80ffqxpda9dlp599t7ekregcy6=10000000000ugnot",
      "g1ht236wjd83x96uqwh9rh3fq6pylyn78mtwq9v6=10000000000ugnot",
      "g1fj9jccm3zjnqspq7lp2g7lj4czyfq0s35600g9=10000000000ugnot",
      "g1wwppuzdns5u6c6jqpkzua24zh6ppsus6399cea=10000000000ugnot",
      "g1k8pjnguyu36pkc8hy0ufzgpzfmj2jl78la7ek3=10000000000ugnot",
      "g1e8umkzumtxgs8399lw0us4rclea3xl5gxy9spp=10000000000ugnot",
      "g14qekdkj2nmmwea4ufg9n002a3pud23y8k7ugs5=10000000000ugnot",
      "g19w2488ntfgpduzqq3sk4j5x387zynwknqdvjqf=10000000000ugnot",
      "g1495y3z7zrej4rendysnw5kaeu4g3d7x7w0734g=10000000000ugnot",
      "g1hygx8ga9qakhkczyrzs9drm8j8tu4qds9y5e3r=10000000000ugnot",
      "g1f977l6wxdh3qu60kzl75vx2wmzswu68l03r8su=10000000000ugnot",
      "g1644qje5rx6jsdqfkzmgnfcegx4dxkjh6rwqd69=10000000000ugnot",
      "g1mzjajymvmtksdwh3wkrndwj6zls2awl9q83dh6=10000000000ugnot",
      "g1qpymzwx4l4cy6cerdyajp9ksvjsf20rk5y9rtt=10000000000ugnot"
    ],
    "txs": [
      {
        "msg": [
          {
            "@type": "/vm.m_addpkg",
            "creator": "g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5",
            "package": {
              "Name": "ufmt",
              "Path": "gno.land/p/ufmt",
              "Files": [
                {
                  "Name": "ufmt.gno",
                  "Body": "package ufmt\n\nimport \"strconv\"\n\nfunc Sprintf(format string, args ...interface{}) string {\n\tend := len(format)\n\targNum := 0\n\targLen := len(args)\n\tbuf := \"\"\n\n\tfor i := 0; i \u003c end; {\n\t\tisLast := i == end-1\n\t\tc := format[i]\n\n\t\tif isLast || c != '%' {\n\t\t\t// we don't check for invalid format like a one ending with \"%\"\n\t\t\tbuf += string(c)\n\t\t\ti++\n\t\t\tcontinue\n\t\t}\n\n\t\tverb := format[i+1]\n\t\tif verb == '%' {\n\t\t\tbuf += \"%\"\n\t\t\ti += 2\n\t\t\tcontinue\n\t\t}\n\n\t\tif argNum \u003e argLen {\n\t\t\tpanic(\"invalid number of arguments to ufmt.Sprintf\")\n\t\t}\n\t\targ := args[argNum]\n\t\targNum++\n\n\t\tswitch verb {\n\t\tcase 's':\n\t\t\tbuf += arg.(string)\n\t\tcase 'd':\n\t\t\tswitch v := arg.(type) {\n\t\t\tcase int:\n\t\t\t\tbuf += strconv.Itoa(v)\n\t\t\tcase int64:\n\t\t\t\tbuf += strconv.Itoa(int(v))\n\t\t\tcase uint:\n\t\t\t\tbuf += strconv.FormatUint(uint64(v), 10)\n\t\t\tcase uint64:\n\t\t\t\tbuf += strconv.FormatUint(v, 10)\n\t\t\tdefault:\n\t\t\t\tbuf += \"(unhandled)\"\n\t\t\t}\n\t\tcase '%':\n\t\t\tbuf += \"%\"\n\t\tdefault:\n\t\t\tbuf += \"(unhandled)\"\n\t\t}\n\n\t\ti += 2\n\t}\n\tif argNum \u003c argLen {\n\t\tpanic(\"too many arguments to ufmt.Sprintf\")\n\t}\n\treturn buf\n}\n"
                },
                {
                  "Name": "ufmt_test.gno",
                  "Body": "package ufmt\n\nimport (\n\t\"fmt\"\n\t\"testing\"\n)\n\nfunc TestSprintf(t *testing.T) {\n\tcases := []struct {\n\t\tformat         string\n\t\tvalues         []interface{}\n\t\texpectedOutput string\n\t}{\n\t\t{\"hello %s!\", []interface{}{\"planet\"}, \"hello planet!\"},\n\t\t{\"hi %%%s!\", []interface{}{\"worl%d\"}, \"hi %worl%d!\"},\n\t\t{\"string [%s]\", []interface{}{\"foo\"}, \"string [foo]\"},\n\t\t{\"int [%d]\", []interface{}{int(42)}, \"int [42]\"},\n\t\t{\"uint [%d]\", []interface{}{uint(42)}, \"uint [42]\"},\n\t\t{\"int64 [%d]\", []interface{}{int64(42)}, \"int64 [42]\"},\n\t\t{\"uint64 [%d]\", []interface{}{uint64(42)}, \"uint64 [42]\"},\n\t\t{\"invalid [%d]\", []interface{}{\"invalid\"}, \"invalid [(unhandled)]\"},\n\t\t{\"no args\", nil, \"no args\"},\n\t\t{\"finish with %\", nil, \"finish with %\"},\n\t}\n\n\tfor _, tc := range cases {\n\t\tname := fmt.Sprintf(tc.format, tc.values...)\n\t\tt.Run(name, func(t *testing.T) {\n\t\t\tgot := Sprintf(tc.format, tc.values...)\n\t\t\tif got != tc.expectedOutput {\n\t\t\t\tt.Errorf(\"got %q, want %q.\", got, tc.expectedOutput)\n\t\t\t}\n\t\t})\n\t}\n}\n"
                }
              ]
            },
            "deposit": ""
          }
        ],
        "fee": {
          "gas_wanted": "50000",
          "gas_fee": "1000000ugnot"
        },
        "signatures": [
          {
            "pub_key": null,
            "signature": null
          }
        ],
        "memo": ""
      },
      {
        "msg": [
          {
            "@type": "/vm.m_addpkg",
            "creator": "g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5",
            "package": {
              "Name": "avl",
              "Path": "gno.land/p/avl",
              "Files": [
                {
                  "Name": "avl.gno",
                  "Body": "package avl\n\n// Tree\n\ntype Tree struct {\n\tkey       string\n\tvalue     interface{}\n\theight    int8\n\tsize      int\n\tleftTree  *Tree\n\trightTree *Tree\n}\n\nfunc NewTree(key string, value interface{}) *Tree {\n\treturn \u0026Tree{\n\t\tkey:    key,\n\t\tvalue:  value,\n\t\theight: 0,\n\t\tsize:   1,\n\t}\n}\n\nfunc (tree *Tree) Size() int {\n\tif tree == nil {\n\t\treturn 0\n\t}\n\treturn tree.size\n}\n\nfunc (tree *Tree) IsLeaf() bool {\n\treturn tree.height == 0\n}\n\nfunc (tree *Tree) Key() string {\n\treturn tree.key\n}\n\nfunc (tree *Tree) Value() interface{} {\n\treturn tree.value\n}\n\nfunc (tree *Tree) _copy() *Tree {\n\tif tree.height == 0 {\n\t\tpanic(\"Why are you copying a value tree?\")\n\t}\n\treturn \u0026Tree{\n\t\tkey:       tree.key,\n\t\theight:    tree.height,\n\t\tsize:      tree.size,\n\t\tleftTree:  tree.leftTree,\n\t\trightTree: tree.rightTree,\n\t}\n}\n\nfunc (tree *Tree) Has(key string) (has bool) {\n\tif tree == nil {\n\t\treturn false\n\t}\n\tif tree.key == key {\n\t\treturn true\n\t}\n\tif tree.height == 0 {\n\t\treturn false\n\t} else {\n\t\tif key \u003c tree.key {\n\t\t\treturn tree.getLeftTree().Has(key)\n\t\t} else {\n\t\t\treturn tree.getRightTree().Has(key)\n\t\t}\n\t}\n}\n\nfunc (tree *Tree) Get(key string) (index int, value interface{}, exists bool) {\n\tif tree == nil {\n\t\treturn 0, nil, false\n\t}\n\tif tree.height == 0 {\n\t\tif tree.key == key {\n\t\t\treturn 0, tree.value, true\n\t\t} else if tree.key \u003c key {\n\t\t\treturn 1, nil, false\n\t\t} else {\n\t\t\treturn 0, nil, false\n\t\t}\n\t} else {\n\t\tif key \u003c tree.key {\n\t\t\treturn tree.getLeftTree().Get(key)\n\t\t} else {\n\t\t\trightTree := tree.getRightTree()\n\t\t\tindex, value, exists = rightTree.Get(key)\n\t\t\tindex += tree.size - rightTree.size\n\t\t\treturn index, value, exists\n\t\t}\n\t}\n}\n\nfunc (tree *Tree) GetByIndex(index int) (key string, value interface{}) {\n\tif tree.height == 0 {\n\t\tif index == 0 {\n\t\t\treturn tree.key, tree.value\n\t\t} else {\n\t\t\tpanic(\"GetByIndex asked for invalid index\")\n\t\t\treturn \"\", nil\n\t\t}\n\t} else {\n\t\t// TODO: could improve this by storing the sizes\n\t\tleftTree := tree.getLeftTree()\n\t\tif index \u003c leftTree.size {\n\t\t\treturn leftTree.GetByIndex(index)\n\t\t} else {\n\t\t\treturn tree.getRightTree().GetByIndex(index - leftTree.size)\n\t\t}\n\t}\n}\n\n// XXX consider a better way to do this... perhaps split Tree from Node.\nfunc (tree *Tree) Set(key string, value interface{}) (newSelf *Tree, updated bool) {\n\tif tree == nil {\n\t\treturn NewTree(key, value), false\n\t}\n\tif tree.height == 0 {\n\t\tif key \u003c tree.key {\n\t\t\treturn \u0026Tree{\n\t\t\t\tkey:       tree.key,\n\t\t\t\theight:    1,\n\t\t\t\tsize:      2,\n\t\t\t\tleftTree:  NewTree(key, value),\n\t\t\t\trightTree: tree,\n\t\t\t}, false\n\t\t} else if key == tree.key {\n\t\t\treturn NewTree(key, value), true\n\t\t} else {\n\t\t\treturn \u0026Tree{\n\t\t\t\tkey:       key,\n\t\t\t\theight:    1,\n\t\t\t\tsize:      2,\n\t\t\t\tleftTree:  tree,\n\t\t\t\trightTree: NewTree(key, value),\n\t\t\t}, false\n\t\t}\n\t} else {\n\t\ttree = tree._copy()\n\t\tif key \u003c tree.key {\n\t\t\ttree.leftTree, updated = tree.getLeftTree().Set(key, value)\n\t\t} else {\n\t\t\ttree.rightTree, updated = tree.getRightTree().Set(key, value)\n\t\t}\n\t\tif updated {\n\t\t\treturn tree, updated\n\t\t} else {\n\t\t\ttree.calcHeightAndSize()\n\t\t\treturn tree.balance(), updated\n\t\t}\n\t}\n}\n\n// newTree: The new tree to replace tree after remove.\n// newKey: new leftmost leaf key for tree after successfully removing 'key' if changed.\n// value: removed value.\nfunc (tree *Tree) Remove(key string) (\n\tnewTree *Tree, newKey string, value interface{}, removed bool,\n) {\n\tif tree == nil {\n\t\treturn nil, \"\", nil, false\n\t}\n\tif tree.height == 0 {\n\t\tif key == tree.key {\n\t\t\treturn nil, \"\", tree.value, true\n\t\t} else {\n\t\t\treturn tree, \"\", nil, false\n\t\t}\n\t} else {\n\t\tif key \u003c tree.key {\n\t\t\tvar newLeftTree *Tree\n\t\t\tnewLeftTree, newKey, value, removed = tree.getLeftTree().Remove(key)\n\t\t\tif !removed {\n\t\t\t\treturn tree, \"\", value, false\n\t\t\t} else if newLeftTree == nil { // left tree held value, was removed\n\t\t\t\treturn tree.rightTree, tree.key, value, true\n\t\t\t}\n\t\t\ttree = tree._copy()\n\t\t\ttree.leftTree = newLeftTree\n\t\t\ttree.calcHeightAndSize()\n\t\t\ttree = tree.balance()\n\t\t\treturn tree, newKey, value, true\n\t\t} else {\n\t\t\tvar newRightTree *Tree\n\t\t\tnewRightTree, newKey, value, removed = tree.getRightTree().Remove(key)\n\t\t\tif !removed {\n\t\t\t\treturn tree, \"\", value, false\n\t\t\t} else if newRightTree == nil { // right tree held value, was removed\n\t\t\t\treturn tree.leftTree, \"\", value, true\n\t\t\t}\n\t\t\ttree = tree._copy()\n\t\t\ttree.rightTree = newRightTree\n\t\t\tif newKey != \"\" {\n\t\t\t\ttree.key = newKey\n\t\t\t}\n\t\t\ttree.calcHeightAndSize()\n\t\t\ttree = tree.balance()\n\t\t\treturn tree, \"\", value, true\n\t\t}\n\t}\n}\n\nfunc (tree *Tree) getLeftTree() *Tree {\n\treturn tree.leftTree\n}\n\nfunc (tree *Tree) getRightTree() *Tree {\n\treturn tree.rightTree\n}\n\n// NOTE: overwrites tree\n// TODO: optimize balance \u0026 rotate\nfunc (tree *Tree) rotateRight() *Tree {\n\ttree = tree._copy()\n\tl := tree.getLeftTree()\n\t_l := l._copy()\n\n\t_lrCached := _l.rightTree\n\t_l.rightTree = tree\n\ttree.leftTree = _lrCached\n\n\ttree.calcHeightAndSize()\n\t_l.calcHeightAndSize()\n\n\treturn _l\n}\n\n// NOTE: overwrites tree\n// TODO: optimize balance \u0026 rotate\nfunc (tree *Tree) rotateLeft() *Tree {\n\ttree = tree._copy()\n\tr := tree.getRightTree()\n\t_r := r._copy()\n\n\t_rlCached := _r.leftTree\n\t_r.leftTree = tree\n\ttree.rightTree = _rlCached\n\n\ttree.calcHeightAndSize()\n\t_r.calcHeightAndSize()\n\n\treturn _r\n}\n\n// NOTE: mutates height and size\nfunc (tree *Tree) calcHeightAndSize() {\n\ttree.height = maxInt8(tree.getLeftTree().height, tree.getRightTree().height) + 1\n\ttree.size = tree.getLeftTree().size + tree.getRightTree().size\n}\n\nfunc (tree *Tree) calcBalance() int {\n\treturn int(tree.getLeftTree().height) - int(tree.getRightTree().height)\n}\n\n// NOTE: assumes that tree can be modified\n// TODO: optimize balance \u0026 rotate\nfunc (tree *Tree) balance() (newSelf *Tree) {\n\tbalance := tree.calcBalance()\n\tif balance \u003e 1 {\n\t\tif tree.getLeftTree().calcBalance() \u003e= 0 {\n\t\t\t// Left Left Case\n\t\t\treturn tree.rotateRight()\n\t\t} else {\n\t\t\t// Left Right Case\n\t\t\t// tree = tree._copy()\n\t\t\tleft := tree.getLeftTree()\n\t\t\ttree.leftTree = left.rotateLeft()\n\t\t\t// tree.calcHeightAndSize()\n\t\t\treturn tree.rotateRight()\n\t\t}\n\t}\n\tif balance \u003c -1 {\n\t\tif tree.getRightTree().calcBalance() \u003c= 0 {\n\t\t\t// Right Right Case\n\t\t\treturn tree.rotateLeft()\n\t\t} else {\n\t\t\t// Right Left Case\n\t\t\t// tree = tree._copy()\n\t\t\tright := tree.getRightTree()\n\t\t\ttree.rightTree = right.rotateRight()\n\t\t\t// tree.calcHeightAndSize()\n\t\t\treturn tree.rotateLeft()\n\t\t}\n\t}\n\t// Nothing changed\n\treturn tree\n}\n\n// Shortcut for TraverseInRange.\nfunc (tree *Tree) Iterate(start, end string, cb func(*Tree) bool) bool {\n\treturn tree.TraverseInRange(start, end, true, true, cb)\n}\n\n// Shortcut for TraverseInRange.\nfunc (tree *Tree) IterateReverse(start, end string, cb func(*Tree) bool) bool {\n\treturn tree.TraverseInRange(start, end, false, true, cb)\n}\n\n// TraverseInRange traverses all nodes, including inner nodes.\n// Start is inclusive and end is exclusive when ascending,\n// Start and end are inclusive when descending.\n// Empty start and empty end denote no start and no end.\n// If leavesOnly is true, only visit leaf nodes.\n// NOTE: To simulate an exclusive reverse traversal,\n// just append 0x00 to start.\nfunc (tree *Tree) TraverseInRange(start, end string, ascending bool, leavesOnly bool, cb func(*Tree) bool) bool {\n\tif tree == nil {\n\t\treturn false\n\t}\n\tafterStart := (start == \"\" || start \u003c tree.key)\n\tstartOrAfter := (start == \"\" || start \u003c= tree.key)\n\tbeforeEnd := false\n\tif ascending {\n\t\tbeforeEnd = (end == \"\" || tree.key \u003c end)\n\t} else {\n\t\tbeforeEnd = (end == \"\" || tree.key \u003c= end)\n\t}\n\n\t// Run callback per inner/leaf node.\n\tstop := false\n\tif (!tree.IsLeaf() \u0026\u0026 !leavesOnly) ||\n\t\t(tree.IsLeaf() \u0026\u0026 startOrAfter \u0026\u0026 beforeEnd) {\n\t\tstop = cb(tree)\n\t\tif stop {\n\t\t\treturn stop\n\t\t}\n\t}\n\tif tree.IsLeaf() {\n\t\treturn stop\n\t}\n\n\tif ascending {\n\t\t// check lower trees, then higher\n\t\tif afterStart {\n\t\t\tstop = tree.getLeftTree().TraverseInRange(start, end, ascending, leavesOnly, cb)\n\t\t}\n\t\tif stop {\n\t\t\treturn stop\n\t\t}\n\t\tif beforeEnd {\n\t\t\tstop = tree.getRightTree().TraverseInRange(start, end, ascending, leavesOnly, cb)\n\t\t}\n\t} else {\n\t\t// check the higher trees first\n\t\tif beforeEnd {\n\t\t\tstop = tree.getRightTree().TraverseInRange(start, end, ascending, leavesOnly, cb)\n\t\t}\n\t\tif stop {\n\t\t\treturn stop\n\t\t}\n\t\tif afterStart {\n\t\t\tstop = tree.getLeftTree().TraverseInRange(start, end, ascending, leavesOnly, cb)\n\t\t}\n\t}\n\n\treturn stop\n}\n\n// Only used in testing...\nfunc (tree *Tree) lmd() *Tree {\n\tif tree.height == 0 {\n\t\treturn tree\n\t}\n\treturn tree.getLeftTree().lmd()\n}\n\n// Only used in testing...\nfunc (tree *Tree) rmd() *Tree {\n\tif tree.height == 0 {\n\t\treturn tree\n\t}\n\treturn tree.getRightTree().rmd()\n}\n\nfunc maxInt8(a, b int8) int8 {\n\tif a \u003e b {\n\t\treturn a\n\t}\n\treturn b\n}\n"
                },
                {
                  "Name": "mut_tree.gno",
                  "Body": "package avl\n\n// MutTree\n\ntype MutTree struct {\n\ttree *Tree\n}\n\nfunc NewMutTree() *MutTree {\n\treturn \u0026MutTree{\n\t\ttree: nil,\n\t}\n}\n\nfunc (mtree *MutTree) Size() int {\n\treturn mtree.tree.Size()\n}\n\nfunc (mtree *MutTree) Has(key string) (has bool) {\n\treturn mtree.tree.Has(key)\n}\n\nfunc (mtree *MutTree) Get(key string) (value interface{}, exists bool) {\n\t_, value, exists = mtree.tree.Get(key)\n\treturn\n}\n\nfunc (mtree *MutTree) GetByIndex(index int) (key string, value interface{}) {\n\treturn mtree.tree.GetByIndex(index)\n}\n\nfunc (mtree *MutTree) Set(key string, value interface{}) (updated bool) {\n\tnewtree, updated := mtree.tree.Set(key, value)\n\tmtree.tree = newtree\n\treturn updated\n}\n\nfunc (mtree *MutTree) Remove(key string) (value interface{}, removed bool) {\n\tnewtree, _, value, removed := mtree.tree.Remove(key)\n\tmtree.tree = newtree\n\treturn value, removed\n}\n\n// Shortcut for TraverseInRange.\nfunc (mtree *MutTree) Iterate(start, end string, cb func(*Tree) bool) bool {\n\treturn mtree.tree.TraverseInRange(start, end, true, true, cb)\n}\n\n// Shortcut for TraverseInRange.\nfunc (mtree *MutTree) IterateReverse(start, end string, cb func(*Tree) bool) bool {\n\treturn mtree.tree.TraverseInRange(start, end, false, true, cb)\n}\n"
                },
                {
                  "Name": "z_0_filetest.gno",
                  "Body": "// PKGPATH: gno.land/r/test\npackage test\n\nimport (\n\t\"gno.land/p/avl\"\n)\n\nvar tree *avl.Tree\n\nfunc init() {\n\ttree = avl.NewTree(\"key0\", \"value0\")\n\t// tree, _ = tree.Set(\"key0\", \"value0\")\n}\n\nfunc main() {\n\tvar updated bool\n\ttree, updated = tree.Set(\"key1\", \"value1\")\n\t// println(tree, updated)\n\tprintln(updated, tree.Size())\n}\n\n// Output:\n// false 2\n\n// Realm:\n// switchrealm[\"gno.land/r/test\"]\n// u[a8ada09dee16d791fd406d629fe29bb0ed084a30:4]={\n//     \"Fields\": [\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"16\"\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.StringValue\",\n//                 \"value\": \"key0\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"16\"\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.StringValue\",\n//                 \"value\": \"value0\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"64\"\n//             }\n//         },\n//         {\n//             \"N\": \"AQAAAAAAAAA=\",\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"32\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/avl.Tree\"\n//                 }\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/avl.Tree\"\n//                 }\n//             }\n//         }\n//     ],\n//     \"ObjectInfo\": {\n//         \"ID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:4\",\n//         \"ModTime\": \"5\",\n//         \"OwnerID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:5\",\n//         \"RefCount\": \"1\"\n//     }\n// }\n// c[a8ada09dee16d791fd406d629fe29bb0ed084a30:6]={\n//     \"Fields\": [\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"16\"\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.StringValue\",\n//                 \"value\": \"key1\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"16\"\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.StringValue\",\n//                 \"value\": \"value1\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"64\"\n//             }\n//         },\n//         {\n//             \"N\": \"AQAAAAAAAAA=\",\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"32\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/avl.Tree\"\n//                 }\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/avl.Tree\"\n//                 }\n//             }\n//         }\n//     ],\n//     \"ObjectInfo\": {\n//         \"ID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:6\",\n//         \"ModTime\": \"0\",\n//         \"OwnerID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:5\",\n//         \"RefCount\": \"1\"\n//     }\n// }\n// c[a8ada09dee16d791fd406d629fe29bb0ed084a30:5]={\n//     \"Fields\": [\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"16\"\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.StringValue\",\n//                 \"value\": \"key1\"\n//             }\n//         },\n//         {},\n//         {\n//             \"N\": \"AQAAAAAAAAA=\",\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"64\"\n//             }\n//         },\n//         {\n//             \"N\": \"AgAAAAAAAAA=\",\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"32\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/avl.Tree\"\n//                 }\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.PointerValue\",\n//                 \"Base\": null,\n//                 \"Index\": \"0\",\n//                 \"TV\": {\n//                     \"T\": {\n//                         \"@type\": \"/gno.RefType\",\n//                         \"ID\": \"gno.land/p/avl.Tree\"\n//                     },\n//                     \"V\": {\n//                         \"@type\": \"/gno.RefValue\",\n//                         \"Hash\": \"8123ec3425f8f5f18f87db5052cc9df4ac80152c\",\n//                         \"ObjectID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:4\"\n//                     }\n//                 }\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/avl.Tree\"\n//                 }\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.PointerValue\",\n//                 \"Base\": null,\n//                 \"Index\": \"0\",\n//                 \"TV\": {\n//                     \"T\": {\n//                         \"@type\": \"/gno.RefType\",\n//                         \"ID\": \"gno.land/p/avl.Tree\"\n//                     },\n//                     \"V\": {\n//                         \"@type\": \"/gno.RefValue\",\n//                         \"Hash\": \"78ef5c60864d28aa2e4de4e70e4ffd3f955d12ee\",\n//                         \"ObjectID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:6\"\n//                     }\n//                 }\n//             }\n//         }\n//     ],\n//     \"ObjectInfo\": {\n//         \"ID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:5\",\n//         \"ModTime\": \"0\",\n//         \"OwnerID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:2\",\n//         \"RefCount\": \"1\"\n//     }\n// }\n// u[a8ada09dee16d791fd406d629fe29bb0ed084a30:2]={\n//     \"Blank\": {},\n//     \"ObjectInfo\": {\n//         \"ID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:2\",\n//         \"IsEscaped\": true,\n//         \"ModTime\": \"4\",\n//         \"RefCount\": \"2\"\n//     },\n//     \"Parent\": null,\n//     \"Source\": {\n//         \"@type\": \"/gno.RefNode\",\n//         \"BlockNode\": null,\n//         \"Location\": {\n//             \"File\": \"\",\n//             \"Line\": \"0\",\n//             \"Nonce\": \"0\",\n//             \"PkgPath\": \"gno.land/r/test\"\n//         }\n//     },\n//     \"Values\": [\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.FuncType\",\n//                 \"Params\": [],\n//                 \"Results\": []\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.FuncValue\",\n//                 \"Closure\": {\n//                     \"@type\": \"/gno.RefValue\",\n//                     \"Escaped\": true,\n//                     \"ObjectID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:3\"\n//                 },\n//                 \"FileName\": \"main.gno\",\n//                 \"IsMethod\": false,\n//                 \"Name\": \"init.0\",\n//                 \"PkgPath\": \"gno.land/r/test\",\n//                 \"Source\": {\n//                     \"@type\": \"/gno.RefNode\",\n//                     \"BlockNode\": null,\n//                     \"Location\": {\n//                         \"File\": \"main.gno\",\n//                         \"Line\": \"10\",\n//                         \"Nonce\": \"0\",\n//                         \"PkgPath\": \"gno.land/r/test\"\n//                     }\n//                 },\n//                 \"Type\": {\n//                     \"@type\": \"/gno.FuncType\",\n//                     \"Params\": [],\n//                     \"Results\": []\n//                 }\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.FuncType\",\n//                 \"Params\": [],\n//                 \"Results\": []\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.FuncValue\",\n//                 \"Closure\": {\n//                     \"@type\": \"/gno.RefValue\",\n//                     \"Escaped\": true,\n//                     \"ObjectID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:3\"\n//                 },\n//                 \"FileName\": \"main.gno\",\n//                 \"IsMethod\": false,\n//                 \"Name\": \"main\",\n//                 \"PkgPath\": \"gno.land/r/test\",\n//                 \"Source\": {\n//                     \"@type\": \"/gno.RefNode\",\n//                     \"BlockNode\": null,\n//                     \"Location\": {\n//                         \"File\": \"main.gno\",\n//                         \"Line\": \"15\",\n//                         \"Nonce\": \"0\",\n//                         \"PkgPath\": \"gno.land/r/test\"\n//                     }\n//                 },\n//                 \"Type\": {\n//                     \"@type\": \"/gno.FuncType\",\n//                     \"Params\": [],\n//                     \"Results\": []\n//                 }\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/avl.Tree\"\n//                 }\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.PointerValue\",\n//                 \"Base\": null,\n//                 \"Index\": \"0\",\n//                 \"TV\": {\n//                     \"T\": {\n//                         \"@type\": \"/gno.RefType\",\n//                         \"ID\": \"gno.land/p/avl.Tree\"\n//                     },\n//                     \"V\": {\n//                         \"@type\": \"/gno.RefValue\",\n//                         \"Hash\": \"36dadc1d1135709acc069dd493fdd5520f862b11\",\n//                         \"ObjectID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:5\"\n//                     }\n//                 }\n//             }\n//         }\n//     ]\n// }\n"
                },
                {
                  "Name": "z_1_filetest.gno",
                  "Body": "// PKGPATH: gno.land/r/test\npackage test\n\nimport (\n\t\"gno.land/p/avl\"\n)\n\nvar tree *avl.Tree\n\nfunc init() {\n\ttree = avl.NewTree(\"key0\", \"value0\")\n\ttree, _ = tree.Set(\"key1\", \"value1\")\n}\n\nfunc main() {\n\tvar updated bool\n\ttree, updated = tree.Set(\"key2\", \"value2\")\n\t// println(tree, updated)\n\tprintln(updated, tree.Size())\n}\n\n// Output:\n// false 3\n\n// Realm:\n// switchrealm[\"gno.land/r/test\"]\n// c[a8ada09dee16d791fd406d629fe29bb0ed084a30:9]={\n//     \"Fields\": [\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"16\"\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.StringValue\",\n//                 \"value\": \"key2\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"16\"\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.StringValue\",\n//                 \"value\": \"value2\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"64\"\n//             }\n//         },\n//         {\n//             \"N\": \"AQAAAAAAAAA=\",\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"32\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/avl.Tree\"\n//                 }\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/avl.Tree\"\n//                 }\n//             }\n//         }\n//     ],\n//     \"ObjectInfo\": {\n//         \"ID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:9\",\n//         \"ModTime\": \"0\",\n//         \"OwnerID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:8\",\n//         \"RefCount\": \"1\"\n//     }\n// }\n// c[a8ada09dee16d791fd406d629fe29bb0ed084a30:8]={\n//     \"Fields\": [\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"16\"\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.StringValue\",\n//                 \"value\": \"key2\"\n//             }\n//         },\n//         {},\n//         {\n//             \"N\": \"AQAAAAAAAAA=\",\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"64\"\n//             }\n//         },\n//         {\n//             \"N\": \"AgAAAAAAAAA=\",\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"32\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/avl.Tree\"\n//                 }\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.PointerValue\",\n//                 \"Base\": null,\n//                 \"Index\": \"0\",\n//                 \"TV\": {\n//                     \"T\": {\n//                         \"@type\": \"/gno.RefType\",\n//                         \"ID\": \"gno.land/p/avl.Tree\"\n//                     },\n//                     \"V\": {\n//                         \"@type\": \"/gno.RefValue\",\n//                         \"Hash\": \"fa41ed9b9384379e2738c4b708329e5820f76151\",\n//                         \"ObjectID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:6\"\n//                     }\n//                 }\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/avl.Tree\"\n//                 }\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.PointerValue\",\n//                 \"Base\": null,\n//                 \"Index\": \"0\",\n//                 \"TV\": {\n//                     \"T\": {\n//                         \"@type\": \"/gno.RefType\",\n//                         \"ID\": \"gno.land/p/avl.Tree\"\n//                     },\n//                     \"V\": {\n//                         \"@type\": \"/gno.RefValue\",\n//                         \"Hash\": \"a62ce86d9d3be88778563010cad4b56e52cf3d4f\",\n//                         \"ObjectID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:9\"\n//                     }\n//                 }\n//             }\n//         }\n//     ],\n//     \"ObjectInfo\": {\n//         \"ID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:8\",\n//         \"ModTime\": \"0\",\n//         \"OwnerID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:7\",\n//         \"RefCount\": \"1\"\n//     }\n// }\n// c[a8ada09dee16d791fd406d629fe29bb0ed084a30:7]={\n//     \"Fields\": [\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"16\"\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.StringValue\",\n//                 \"value\": \"key1\"\n//             }\n//         },\n//         {},\n//         {\n//             \"N\": \"AgAAAAAAAAA=\",\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"64\"\n//             }\n//         },\n//         {\n//             \"N\": \"AwAAAAAAAAA=\",\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"32\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/avl.Tree\"\n//                 }\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.PointerValue\",\n//                 \"Base\": null,\n//                 \"Index\": \"0\",\n//                 \"TV\": {\n//                     \"T\": {\n//                         \"@type\": \"/gno.RefType\",\n//                         \"ID\": \"gno.land/p/avl.Tree\"\n//                     },\n//                     \"V\": {\n//                         \"@type\": \"/gno.RefValue\",\n//                         \"Hash\": \"3c00eed86299706a430c1613b338b20bb509db06\",\n//                         \"ObjectID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:5\"\n//                     }\n//                 }\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/avl.Tree\"\n//                 }\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.PointerValue\",\n//                 \"Base\": null,\n//                 \"Index\": \"0\",\n//                 \"TV\": {\n//                     \"T\": {\n//                         \"@type\": \"/gno.RefType\",\n//                         \"ID\": \"gno.land/p/avl.Tree\"\n//                     },\n//                     \"V\": {\n//                         \"@type\": \"/gno.RefValue\",\n//                         \"Hash\": \"9582f867da440ba9ecb4c25725d8e105b48459cf\",\n//                         \"ObjectID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:8\"\n//                     }\n//                 }\n//             }\n//         }\n//     ],\n//     \"ObjectInfo\": {\n//         \"ID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:7\",\n//         \"ModTime\": \"0\",\n//         \"OwnerID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:2\",\n//         \"RefCount\": \"1\"\n//     }\n// }\n// u[a8ada09dee16d791fd406d629fe29bb0ed084a30:2]={\n//     \"Blank\": {},\n//     \"ObjectInfo\": {\n//         \"ID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:2\",\n//         \"IsEscaped\": true,\n//         \"ModTime\": \"6\",\n//         \"RefCount\": \"2\"\n//     },\n//     \"Parent\": null,\n//     \"Source\": {\n//         \"@type\": \"/gno.RefNode\",\n//         \"BlockNode\": null,\n//         \"Location\": {\n//             \"File\": \"\",\n//             \"Line\": \"0\",\n//             \"Nonce\": \"0\",\n//             \"PkgPath\": \"gno.land/r/test\"\n//         }\n//     },\n//     \"Values\": [\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.FuncType\",\n//                 \"Params\": [],\n//                 \"Results\": []\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.FuncValue\",\n//                 \"Closure\": {\n//                     \"@type\": \"/gno.RefValue\",\n//                     \"Escaped\": true,\n//                     \"ObjectID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:3\"\n//                 },\n//                 \"FileName\": \"main.gno\",\n//                 \"IsMethod\": false,\n//                 \"Name\": \"init.0\",\n//                 \"PkgPath\": \"gno.land/r/test\",\n//                 \"Source\": {\n//                     \"@type\": \"/gno.RefNode\",\n//                     \"BlockNode\": null,\n//                     \"Location\": {\n//                         \"File\": \"main.gno\",\n//                         \"Line\": \"10\",\n//                         \"Nonce\": \"0\",\n//                         \"PkgPath\": \"gno.land/r/test\"\n//                     }\n//                 },\n//                 \"Type\": {\n//                     \"@type\": \"/gno.FuncType\",\n//                     \"Params\": [],\n//                     \"Results\": []\n//                 }\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.FuncType\",\n//                 \"Params\": [],\n//                 \"Results\": []\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.FuncValue\",\n//                 \"Closure\": {\n//                     \"@type\": \"/gno.RefValue\",\n//                     \"Escaped\": true,\n//                     \"ObjectID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:3\"\n//                 },\n//                 \"FileName\": \"main.gno\",\n//                 \"IsMethod\": false,\n//                 \"Name\": \"main\",\n//                 \"PkgPath\": \"gno.land/r/test\",\n//                 \"Source\": {\n//                     \"@type\": \"/gno.RefNode\",\n//                     \"BlockNode\": null,\n//                     \"Location\": {\n//                         \"File\": \"main.gno\",\n//                         \"Line\": \"15\",\n//                         \"Nonce\": \"0\",\n//                         \"PkgPath\": \"gno.land/r/test\"\n//                     }\n//                 },\n//                 \"Type\": {\n//                     \"@type\": \"/gno.FuncType\",\n//                     \"Params\": [],\n//                     \"Results\": []\n//                 }\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/avl.Tree\"\n//                 }\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.PointerValue\",\n//                 \"Base\": null,\n//                 \"Index\": \"0\",\n//                 \"TV\": {\n//                     \"T\": {\n//                         \"@type\": \"/gno.RefType\",\n//                         \"ID\": \"gno.land/p/avl.Tree\"\n//                     },\n//                     \"V\": {\n//                         \"@type\": \"/gno.RefValue\",\n//                         \"Hash\": \"eafad46a576a4caf1988a486e75571189d34cc04\",\n//                         \"ObjectID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:7\"\n//                     }\n//                 }\n//             }\n//         }\n//     ]\n// }\n// d[a8ada09dee16d791fd406d629fe29bb0ed084a30:4]\n"
                }
              ]
            },
            "deposit": ""
          }
        ],
        "fee": {
          "gas_wanted": "50000",
          "gas_fee": "1000000ugnot"
        },
        "signatures": [
          {
            "pub_key": null,
            "signature": null
          }
        ],
        "memo": ""
      },
      {
        "msg": [
          {
            "@type": "/vm.m_addpkg",
            "creator": "g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5",
            "package": {
              "Name": "exts",
              "Path": "gno.land/p/grc/exts",
              "Files": [
                {
                  "Name": "token_metadata.gno",
                  "Body": "package exts\n\ntype TokenMetadata interface {\n\t// Returns the name of the token.\n\tGetName() string\n\n\t// Returns the symbol of the token, usually a shorter version of the\n\t// name.\n\tGetSymbol() string\n\n\t// Returns the decimals places of the token.\n\tGetDecimals() uint\n}\n"
                }
              ]
            },
            "deposit": ""
          }
        ],
        "fee": {
          "gas_wanted": "50000",
          "gas_fee": "1000000ugnot"
        },
        "signatures": [
          {
            "pub_key": null,
            "signature": null
          }
        ],
        "memo": ""
      },
      {
        "msg": [
          {
            "@type": "/vm.m_addpkg",
            "creator": "g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5",
            "package": {
              "Name": "grc20",
              "Path": "gno.land/p/grc/grc20",
              "Files": [
                {
                  "Name": "admin_token.gno",
                  "Body": "package grc20\n\nimport (\n\t\"std\"\n\n\t\"gno.land/p/avl\"\n\t\"gno.land/p/ufmt\"\n)\n\n// AdminToken implements a token factory with admin helpers.\n//\n// Warning: you should not expose this struct to enduser directly.\n//\n// It allows token administrators to call privileged helpers\n// like Mint, Burn, or any Transfer helpers by passing custom owners.\n//\n// You should initialize your token, then call AdminToken.SafeGRC20() to\n// expose a safe instance to the endusers.\ntype AdminToken struct {\n\tname        string\n\tsymbol      string\n\tdecimals    uint\n\ttotalSupply uint64\n\tbalances    *avl.MutTree // std.Address(owner) -\u003e uint64\n\tallowances  *avl.MutTree // string(owner+\":\"+spender) -\u003e uint64\n}\n\n// safeToken implements the IGRC20 interface.\n//\n// It is generated by AdminToken.SafeGRC20().\n// It can safely be explosed publicly.\ntype safeToken struct {\n\tIGRC20 // implements the GRC20 interface.\n\n\tfactory *AdminToken\n}\n\nfunc NewAdminToken(name, symbol string, decimals uint) *AdminToken {\n\t// FIXME: check for limits\n\n\treturn \u0026AdminToken{\n\t\tname:     name,\n\t\tsymbol:   symbol,\n\t\tdecimals: decimals,\n\n\t\tbalances:   avl.NewMutTree(),\n\t\tallowances: avl.NewMutTree(),\n\t}\n}\n\nfunc (t *AdminToken) GetName() string     { return t.name }\nfunc (t *AdminToken) GetSymbol() string   { return t.symbol }\nfunc (t *AdminToken) GetDecimals() uint   { return t.decimals }\nfunc (t *AdminToken) TotalSupply() uint64 { return t.totalSupply }\n\nfunc (t *AdminToken) BalanceOf(owner std.Address) (uint64, error) {\n\treturn t.balanceOf(owner)\n}\n\nfunc (t *AdminToken) Transfer(owner, to std.Address, amount uint64) error {\n\treturn t.transfer(owner, to, amount)\n}\n\nfunc (t *AdminToken) Allowance(owner, spender std.Address) (uint64, error) {\n\treturn t.allowance(owner, spender)\n}\n\nfunc (t *AdminToken) Approve(owner, spender std.Address, amount uint64) error {\n\treturn t.approve(owner, spender, amount)\n}\n\nfunc (t *AdminToken) TransferFrom(spender, from, to std.Address, amount uint64) error {\n\tif err := t.spendAllowance(from, spender, amount); err != nil {\n\t\treturn err\n\t}\n\treturn t.transfer(from, to, amount)\n}\n\n// Administration helpers implementation.\n//\n\nfunc (t *AdminToken) Mint(to std.Address, amount uint64) error {\n\treturn t.mint(to, amount)\n}\n\nfunc (t *AdminToken) Burn(from std.Address, amount uint64) error {\n\treturn t.burn(from, amount)\n}\n\n// private helpers\n//\n\nfunc (t *AdminToken) mint(address std.Address, amount uint64) error {\n\tif err := checkIsValidAddress(address); err != nil {\n\t\treturn err\n\t}\n\n\t// TODO: check for overflow\n\n\tt.totalSupply += amount\n\tcurrentBalance, err := t.balanceOf(address)\n\tif err != nil {\n\t\treturn err\n\t}\n\tnewBalance := currentBalance + amount\n\n\tt.balances.Set(string(address), newBalance)\n\n\tevent := TransferEvent{zeroAddress, address, amount}\n\temit(\u0026event)\n\n\treturn nil\n}\n\nfunc (t *AdminToken) burn(address std.Address, amount uint64) error {\n\tif err := checkIsValidAddress(address); err != nil {\n\t\treturn err\n\t}\n\t// TODO: check for overflow\n\n\tcurrentBalance, err := t.balanceOf(address)\n\tif err != nil {\n\t\treturn err\n\t}\n\tif currentBalance \u003c amount {\n\t\treturn ErrInsufficientBalance\n\t}\n\n\tt.totalSupply -= amount\n\tnewBalance := currentBalance - amount\n\n\tt.balances.Set(string(address), newBalance)\n\n\tevent := TransferEvent{address, zeroAddress, amount}\n\temit(\u0026event)\n\n\treturn nil\n}\n\nfunc (t *AdminToken) balanceOf(address std.Address) (uint64, error) {\n\tif err := checkIsValidAddress(address); err != nil {\n\t\treturn 0, err\n\t}\n\n\tbalance, found := t.balances.Get(address.String())\n\tif !found {\n\t\treturn 0, nil\n\t}\n\treturn balance.(uint64), nil\n}\n\nfunc (t *AdminToken) spendAllowance(owner, spender std.Address, amount uint64) error {\n\tif err := checkIsValidAddress(owner); err != nil {\n\t\treturn err\n\t}\n\tif err := checkIsValidAddress(spender); err != nil {\n\t\treturn err\n\t}\n\n\tcurrentAllowance, err := t.allowance(owner, spender)\n\tif err != nil {\n\t\treturn err\n\t}\n\tif currentAllowance \u003c amount {\n\t\treturn ErrInsufficientAllowance\n\t}\n\n\treturn nil\n}\n\nfunc (t *AdminToken) transfer(from, to std.Address, amount uint64) error {\n\tif err := checkIsValidAddress(from); err != nil {\n\t\treturn err\n\t}\n\tif err := checkIsValidAddress(to); err != nil {\n\t\treturn err\n\t}\n\n\tif from == to {\n\t\treturn ErrCannotTransferToSelf\n\t}\n\n\ttoBalance, err := t.balanceOf(to)\n\tif err != nil {\n\t\treturn err\n\t}\n\tfromBalance, err := t.balanceOf(from)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\t// debug.\n\t// println(\"from\", from, \"to\", to, \"amount\", amount, \"fromBalance\", fromBalance, \"toBalance\", toBalance)\n\n\tif fromBalance \u003c amount {\n\t\treturn ErrInsufficientBalance\n\t}\n\n\tnewToBalance := toBalance + amount\n\tnewFromBalance := fromBalance - amount\n\n\tt.balances.Set(string(to), newToBalance)\n\tt.balances.Set(string(from), newFromBalance)\n\n\tevent := TransferEvent{from, to, amount}\n\temit(\u0026event)\n\n\treturn nil\n}\n\nfunc (t *AdminToken) allowance(owner, spender std.Address) (uint64, error) {\n\tif err := checkIsValidAddress(owner); err != nil {\n\t\treturn 0, err\n\t}\n\tif err := checkIsValidAddress(spender); err != nil {\n\t\treturn 0, err\n\t}\n\n\tkey := owner.String() + \":\" + spender.String()\n\n\tallowance, found := t.allowances.Get(key)\n\tif !found {\n\t\treturn 0, nil\n\t}\n\n\treturn allowance.(uint64), nil\n}\n\nfunc (t *AdminToken) approve(owner, spender std.Address, amount uint64) error {\n\tif err := checkIsValidAddress(owner); err != nil {\n\t\treturn err\n\t}\n\tif err := checkIsValidAddress(spender); err != nil {\n\t\treturn err\n\t}\n\n\tkey := owner.String() + \":\" + spender.String()\n\tt.allowances.Set(key, amount)\n\n\tevent := ApprovalEvent{owner, spender, amount}\n\temit(\u0026event)\n\n\treturn nil\n}\n\nfunc (t *AdminToken) RenderHome() string {\n\tstr := \"\"\n\tstr += ufmt.Sprintf(\"# %s ($%s)\\n\\n\", t.name, t.symbol)\n\tstr += ufmt.Sprintf(\"* **Decimals**: %d\\n\", t.decimals)\n\tstr += ufmt.Sprintf(\"* **Total supply**: %d\\n\", t.totalSupply)\n\tstr += ufmt.Sprintf(\"* **Known accounts**: %d\\n\", t.balances.Size())\n\treturn str\n}\n\n// GRC20 returns an instance that can be exposed to the end user.\nfunc (t *AdminToken) GRC20() IGRC20 {\n\treturn \u0026userToken{admin: t}\n}\n"
                },
                {
                  "Name": "admin_token_test.gno",
                  "Body": "package grc20\n\nimport \"testing\"\n\nfunc TestAdminTokenImpl(t *testing.T) {\n\tdummy := NewAdminToken(\"Dummy\", \"DUMMY\", 4)\n\tif dummy == nil {\n\t\tt.Errorf(\"should not be nil\")\n\t}\n}\n"
                },
                {
                  "Name": "dummy_test.gno",
                  "Body": "package grc20\n\nimport (\n\t\"std\"\n\t\"testing\"\n)\n\n// TODO: test implementing an IMustGRC20 interface.\n// TODO: test implementing a custom method that hides its usage of the IGRC20 interface.\n\ntype dummyImpl struct{}\n\n// FIXME: this should fail.\nvar _ IGRC20 = (*dummyImpl)(nil)\n\nfunc TestInterface(t *testing.T) {\n\tvar dummy IGRC20 = \u0026dummyImpl{}\n}\n\nfunc (impl *dummyImpl) GetName() string                               { panic(\"not implemented\") }\nfunc (impl *dummyImpl) GetSymbol() string                             { panic(\"not implemented\") }\nfunc (impl *dummyImpl) GetDecimals() uint                             { panic(\"not implemented\") }\nfunc (impl *dummyImpl) TotalSupply() uint64                           { panic(\"not implemented\") }\nfunc (impl *dummyImpl) BalanceOf(account std.Address) (uint64, error) { panic(\"not implemented\") }\nfunc (impl *dummyImpl) Transfer(to std.Address, amount uint64) error  { panic(\"not implemented\") }\nfunc (impl *dummyImpl) Allowance(owner, spender std.Address) (uint64, error) {\n\tpanic(\"not implemented\")\n}\nfunc (impl *dummyImpl) Approve(spender std.Address, amount uint64) error { panic(\"not implemented\") }\nfunc (impl *dummyImpl) TransferFrom(from, to std.Address, amount uint64) error {\n\tpanic(\"not implemented\")\n}\n"
                },
                {
                  "Name": "errors.gno",
                  "Body": "package grc20\n\nimport \"errors\"\n\nvar (\n\tErrInsufficientBalance   = errors.New(\"insufficient balance\")\n\tErrInsufficientAllowance = errors.New(\"insufficient allowance\")\n\tErrInvalidAddress        = errors.New(\"invalid address\")\n\tErrCannotTransferToSelf  = errors.New(\"cannot send transfer to self\")\n)\n"
                },
                {
                  "Name": "igrc20.gno",
                  "Body": "package grc20\n\nimport (\n\t\"std\"\n\n\t\"gno.land/p/grc/exts\"\n)\n\ntype IGRC20 interface {\n\texts.TokenMetadata\n\n\t// Returns the amount of tokens in existence.\n\tTotalSupply() uint64\n\n\t// Returns the amount of tokens owned by `account`.\n\tBalanceOf(account std.Address) (uint64, error)\n\n\t// Moves `amount` tokens from the caller's account to `to`.\n\t//\n\t// Returns an error if the operation failed.\n\tTransfer(to std.Address, amount uint64) error\n\n\t// Returns the remaining number of tokens that `spender` will be\n\t// allowed to spend on behalf of `owner` through {transferFrom}. This is\n\t// zero by default.\n\t//\n\t// This value changes when {approve} or {transferFrom} are called.\n\tAllowance(owner, spender std.Address) (uint64, error)\n\n\t// Sets `amount` as the allowance of `spender` over the caller's tokens.\n\t//\n\t// Returns an error if the operation failed.\n\t//\n\t// IMPORTANT: Beware that changing an allowance with this method brings the risk\n\t// that someone may use both the old and the new allowance by unfortunate\n\t// transaction ordering. One possible solution to mitigate this race\n\t// condition is to first reduce the spender's allowance to 0 and set the\n\t// desired value afterwards:\n\t// https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n\tApprove(spender std.Address, amount uint64) error\n\n\t// Moves `amount` tokens from `from` to `to` using the\n\t// allowance mechanism. `amount` is then deducted from the caller's\n\t// allowance.\n\t//\n\t// Returns an error if the operation failed.\n\tTransferFrom(from, to std.Address, amount uint64) error\n}\n\n// Emitted when `value` tokens are moved from one account (`from`) to another (`to`).\n//\n// Note that `value` may be zero.\ntype TransferEvent struct {\n\tFrom  std.Address\n\tTo    std.Address\n\tValue uint64\n}\n\n// Emitted when the allowance of a `spender` for an `owner` is set by\n// a call to {approve}. `value` is the new allowance.\ntype ApprovalEvent struct {\n\tOwner   std.Address\n\tSpender std.Address\n\tValue   uint64\n}\n"
                },
                {
                  "Name": "imustgrc20.gno",
                  "Body": "package grc20\n\nimport (\n\t\"std\"\n\n\t\"gno.land/p/grc/exts\"\n)\n\n// IMustGRC20 is like IGRC20 but without returned errors.\n//\n// It will either panic or silently ignore invalid usages,\n// depending on the method.\ntype IMustGRC20 interface {\n\texts.TokenMetadata\n\tTotalSupply() uint64\n\tBalanceOf(account std.Address) uint64\n\tTransfer(to std.Address, amount uint64)\n\tAllowance(owner, spender std.Address) uint64\n\tApprove(spender std.Address, amount uint64)\n\tTransferFrom(from, to std.Address, amount uint64)\n}\n"
                },
                {
                  "Name": "mustgrc20.gno",
                  "Body": "package grc20\n\nimport \"std\"\n\nfunc Mustify(original IGRC20) IMustGRC20 {\n\treturn \u0026mustGRC20{original: original}\n}\n\ntype mustGRC20 struct {\n\toriginal IGRC20\n}\n\nfunc (t *mustGRC20) GetName() string     { return t.original.GetName() }\nfunc (t *mustGRC20) GetSymbol() string   { return t.original.GetSymbol() }\nfunc (t *mustGRC20) GetDecimals() uint   { return t.original.GetDecimals() }\nfunc (t *mustGRC20) TotalSupply() uint64 { return t.original.TotalSupply() }\n\nfunc (t *mustGRC20) BalanceOf(owner std.Address) uint64 {\n\tbalance, err := t.original.BalanceOf(owner)\n\tif err != nil {\n\t\treturn 0\n\t}\n\treturn balance\n}\n\nfunc (t *mustGRC20) Transfer(to std.Address, amount uint64) {\n\terr := t.original.Transfer(to, amount)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc (t *mustGRC20) Allowance(owner, spender std.Address) uint64 {\n\tallowance, err := t.original.Allowance(owner, spender)\n\tif err != nil {\n\t\treturn 0\n\t}\n\treturn allowance\n}\n\nfunc (t *mustGRC20) Approve(spender std.Address, amount uint64) {\n\terr := t.original.Approve(spender, amount)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc (t *mustGRC20) TransferFrom(from, to std.Address, amount uint64) {\n\terr := t.original.TransferFrom(from, to, amount)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n}\n"
                },
                {
                  "Name": "mustgrc20_test.gno",
                  "Body": "package grc20\n\n// TODO: unit tests against MustGRC20 interfaces and helpers.\n"
                },
                {
                  "Name": "user_token.gno",
                  "Body": "package grc20\n\nimport (\n\t\"std\"\n)\n\n// userToken implements the IGRC20 interface.\n//\n// It is generated by userToken.GRC20().\n// It can safely be explosed publicly.\ntype userToken struct {\n\tIGRC20 // implements the GRC20 interface.\n\n\tadmin *AdminToken\n}\n\n// IGRC20 implementation.\n//\n\nfunc (t *userToken) GetName() string     { return t.admin.name }\nfunc (t *userToken) GetSymbol() string   { return t.admin.symbol }\nfunc (t *userToken) GetDecimals() uint   { return t.admin.decimals }\nfunc (t *userToken) TotalSupply() uint64 { return t.admin.totalSupply }\n\nfunc (t *userToken) BalanceOf(owner std.Address) (uint64, error) {\n\treturn t.admin.balanceOf(owner)\n}\n\nfunc (t *userToken) Transfer(to std.Address, amount uint64) error {\n\towner := std.GetOrigCaller()\n\treturn t.admin.transfer(owner, to, amount)\n}\n\nfunc (t *userToken) Allowance(owner, spender std.Address) (uint64, error) {\n\treturn t.admin.allowance(owner, spender)\n}\n\nfunc (t *userToken) Approve(spender std.Address, amount uint64) error {\n\towner := std.GetOrigCaller()\n\treturn t.admin.approve(owner, spender, amount)\n}\n\nfunc (t *userToken) TransferFrom(from, to std.Address, amount uint64) error {\n\tspender := std.GetOrigCaller()\n\tt.admin.spendAllowance(from, spender, amount)\n\treturn t.admin.transfer(from, to, amount)\n}\n"
                },
                {
                  "Name": "user_token_test.gno",
                  "Body": "package grc20\n\nimport \"testing\"\n\nfunc TestUserTokenImpl(t *testing.T) {\n\tdummyAdmin := NewAdminToken(\"Dummy\", \"DUMMY\", 4)\n\tdummyUser := dummyAdmin.GRC20()\n\t_ = dummyUser\n}\n"
                },
                {
                  "Name": "util.gno",
                  "Body": "package grc20\n\nimport \"std\"\n\nconst zeroAddress = std.Address(\"\")\n\nfunc checkIsValidAddress(addr std.Address) error {\n\tif addr.String() == \"\" {\n\t\treturn ErrInvalidAddress\n\t}\n\treturn nil\n}\n\nfunc emit(event interface{}) {\n\t// TODO: setup a pubsub system here?\n}\n"
                }
              ]
            },
            "deposit": ""
          }
        ],
        "fee": {
          "gas_wanted": "50000",
          "gas_fee": "1000000ugnot"
        },
        "signatures": [
          {
            "pub_key": null,
            "signature": null
          }
        ],
        "memo": ""
      },
      {
        "msg": [
          {
            "@type": "/vm.m_addpkg",
            "creator": "g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5",
            "package": {
              "Name": "grc721",
              "Path": "gno.land/p/grc/grc721",
              "Files": [
                {
                  "Name": "igrc721.gno",
                  "Body": "package grc721\n\nimport \"std\"\n\ntype IGRC721 interface {\n\tBalanceOf(owner std.Address) (count int64)\n\tOwnerOf(tid TokenID) std.Address\n\tSafeTransferFrom(from, to std.Address, tid TokenID)\n\tTransferFrom(from, to std.Address, tid TokenID)\n\tApprove(approved std.Address, tid TokenID)\n\tSetApprovalForAll(operator std.Address, approved bool)\n\tGetApproved(tid TokenID) std.Address\n\tIsApprovedForAll(owner, operator std.Address) bool\n}\n\ntype TokenID string\n\ntype TransferEvent struct {\n\tFrom    std.Address\n\tTo      std.Address\n\tTokenID TokenID\n}\n\ntype ApprovalEvent struct {\n\tOwner    std.Address\n\tApproved std.Address\n\tTokenID  TokenID\n}\n\ntype ApprovalForAllEvent struct {\n\tOwner    std.Address\n\tOperator std.Address\n\tApproved bool\n}\n"
                }
              ]
            },
            "deposit": ""
          }
        ],
        "fee": {
          "gas_wanted": "50000",
          "gas_fee": "1000000ugnot"
        },
        "signatures": [
          {
            "pub_key": null,
            "signature": null
          }
        ],
        "memo": ""
      },
      {
        "msg": [
          {
            "@type": "/vm.m_addpkg",
            "creator": "g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5",
            "package": {
              "Name": "maths",
              "Path": "gno.land/p/maths",
              "Files": [
                {
                  "Name": "maths.gno",
                  "Body": "package maths\n\nconst (\n\tintSize = 32 \u003c\u003c (^uint(0) \u003e\u003e 63) // 32 or 64\n\n\tMaxInt    = 1\u003c\u003c(intSize-1) - 1\n\tMinInt    = -1 \u003c\u003c (intSize - 1)\n\tMaxInt8   = 1\u003c\u003c7 - 1\n\tMinInt8   = -1 \u003c\u003c 7\n\tMaxInt16  = 1\u003c\u003c15 - 1\n\tMinInt16  = -1 \u003c\u003c 15\n\tMaxInt32  = 1\u003c\u003c31 - 1\n\tMinInt32  = -1 \u003c\u003c 31\n\tMaxInt64  = 1\u003c\u003c63 - 1\n\tMinInt64  = -1 \u003c\u003c 63\n\tMaxUint   = 1\u003c\u003cintSize - 1\n\tMaxUint8  = 1\u003c\u003c8 - 1\n\tMaxUint16 = 1\u003c\u003c16 - 1\n\tMaxUint32 = 1\u003c\u003c32 - 1\n\tMaxUint64 = 1\u003c\u003c64 - 1\n)\n"
                },
                {
                  "Name": "overflow.gno",
                  "Body": "// This is modified from https://github.com/JohnCGriffin/overflow (MIT).\n// NOTE: there was a bug with the original Quotient* functions, and\n// testing method. These have been fixed here, and tests ported to\n// tests/files/maths_int*.go respectively.\n// TODO: make PR upstream.\npackage maths\n\n/*\nPackage overflow offers overflow-checked integer arithmetic operations\nfor int, int32, and int64. Each of the operations returns a\nresult,bool combination.  This was prompted by the need to know when\nto flow into higher precision types from the math.big library.\n\nFor instance, assuing a 64 bit machine:\n\n10 + 20 -\u003e 30\nint(math.MaxInt64) + 1 -\u003e -9223372036854775808\n\nwhereas\n\noverflow.Add(10,20) -\u003e (30, true)\noverflow.Add(math.MaxInt64,1) -\u003e (0, false)\n\nAdd, Sub, Mul, Div are for int.  Add64, Add32, etc. are specifically sized.\n\nIf anybody wishes an unsigned version, submit a pull request for code\nand new tests. */\n\n//go:generate ./overflow_template.sh\n\nfunc _is64Bit() bool {\n\tmaxU32 := uint(MaxUint32)\n\treturn ((maxU32 \u003c\u003c 1) \u003e\u003e 1) == maxU32\n}\n\n/********** PARTIAL TEST COVERAGE FROM HERE DOWN *************\n\nThe only way that I could see to do this is a combination of\nmy normal 64 bit system and a GopherJS running on Node.  My\nunderstanding is that its ints are 32 bit.\n\nSo, FEEL FREE to carefully review the code visually.\n\n*************************************************************/\n\n// Unspecified size, i.e. normal signed int\n\n// Add sums two ints, returning the result and a boolean status.\nfunc Add(a, b int) (int, bool) {\n\tif _is64Bit() {\n\t\tr64, ok := Add64(int64(a), int64(b))\n\t\treturn int(r64), ok\n\t}\n\tr32, ok := Add32(int32(a), int32(b))\n\treturn int(r32), ok\n}\n\n// Sub returns the difference of two ints and a boolean status.\nfunc Sub(a, b int) (int, bool) {\n\tif _is64Bit() {\n\t\tr64, ok := Sub64(int64(a), int64(b))\n\t\treturn int(r64), ok\n\t}\n\tr32, ok := Sub32(int32(a), int32(b))\n\treturn int(r32), ok\n}\n\n// Mul returns the product of two ints and a boolean status.\nfunc Mul(a, b int) (int, bool) {\n\tif _is64Bit() {\n\t\tr64, ok := Mul64(int64(a), int64(b))\n\t\treturn int(r64), ok\n\t}\n\tr32, ok := Mul32(int32(a), int32(b))\n\treturn int(r32), ok\n}\n\n// Div returns the quotient of two ints and a boolean status\nfunc Div(a, b int) (int, bool) {\n\tif _is64Bit() {\n\t\tr64, ok := Div64(int64(a), int64(b))\n\t\treturn int(r64), ok\n\t}\n\tr32, ok := Div32(int32(a), int32(b))\n\treturn int(r32), ok\n}\n\n// Quo returns the quotient, remainder and status of two ints\nfunc Quo(a, b int) (int, int, bool) {\n\tif _is64Bit() {\n\t\tq64, r64, ok := Quo64(int64(a), int64(b))\n\t\treturn int(q64), int(r64), ok\n\t}\n\tq32, r32, ok := Quo32(int32(a), int32(b))\n\treturn int(q32), int(r32), ok\n}\n\n/************* Panic versions for int ****************/\n\n// Addp returns the sum of two ints, panicking on overflow\nfunc Addp(a, b int) int {\n\tr, ok := Add(a, b)\n\tif !ok {\n\t\tpanic(\"addition overflow\")\n\t}\n\treturn r\n}\n\n// Subp returns the difference of two ints, panicking on overflow.\nfunc Subp(a, b int) int {\n\tr, ok := Sub(a, b)\n\tif !ok {\n\t\tpanic(\"subtraction overflow\")\n\t}\n\treturn r\n}\n\n// Mulp returns the product of two ints, panicking on overflow.\nfunc Mulp(a, b int) int {\n\tr, ok := Mul(a, b)\n\tif !ok {\n\t\tpanic(\"multiplication overflow\")\n\t}\n\treturn r\n}\n\n// Divp returns the quotient of two ints, panicking on overflow.\nfunc Divp(a, b int) int {\n\tr, ok := Div(a, b)\n\tif !ok {\n\t\tpanic(\"division failure\")\n\t}\n\treturn r\n}\n\n//----------------------------------------\n// This is generated code, created by overflow_template.sh executed\n// by \"go generate\"\n\n// Add8 performs + operation on two int8 operands\n// returning a result and status\nfunc Add8(a, b int8) (int8, bool) {\n\tc := a + b\n\tif (c \u003e a) == (b \u003e 0) {\n\t\treturn c, true\n\t}\n\treturn c, false\n}\n\n// Add8p is the unchecked panicing version of Add8\nfunc Add8p(a, b int8) int8 {\n\tr, ok := Add8(a, b)\n\tif !ok {\n\t\tpanic(\"addition overflow\")\n\t}\n\treturn r\n}\n\n// Sub8 performs - operation on two int8 operands\n// returning a result and status\nfunc Sub8(a, b int8) (int8, bool) {\n\tc := a - b\n\tif (c \u003c a) == (b \u003e 0) {\n\t\treturn c, true\n\t}\n\treturn c, false\n}\n\n// Sub8p is the unchecked panicing version of Sub8\nfunc Sub8p(a, b int8) int8 {\n\tr, ok := Sub8(a, b)\n\tif !ok {\n\t\tpanic(\"subtraction overflow\")\n\t}\n\treturn r\n}\n\n// Mul8 performs * operation on two int8 operands\n// returning a result and status\nfunc Mul8(a, b int8) (int8, bool) {\n\tif a == 0 || b == 0 {\n\t\treturn 0, true\n\t}\n\tc := a * b\n\tif (c \u003c 0) == ((a \u003c 0) != (b \u003c 0)) {\n\t\tif c/b == a {\n\t\t\treturn c, true\n\t\t}\n\t}\n\treturn c, false\n}\n\n// Mul8p is the unchecked panicing version of Mul8\nfunc Mul8p(a, b int8) int8 {\n\tr, ok := Mul8(a, b)\n\tif !ok {\n\t\tpanic(\"multiplication overflow\")\n\t}\n\treturn r\n}\n\n// Div8 performs / operation on two int8 operands\n// returning a result and status\nfunc Div8(a, b int8) (int8, bool) {\n\tq, _, ok := Quo8(a, b)\n\treturn q, ok\n}\n\n// Div8p is the unchecked panicing version of Div8\nfunc Div8p(a, b int8) int8 {\n\tr, ok := Div8(a, b)\n\tif !ok {\n\t\tpanic(\"division failure\")\n\t}\n\treturn r\n}\n\n// Quo8 performs + operation on two int8 operands\n// returning a quotient, a remainder and status\nfunc Quo8(a, b int8) (int8, int8, bool) {\n\tif b == 0 {\n\t\treturn 0, 0, false\n\t} else if b == -1 \u0026\u0026 a == MinInt8 {\n\t\treturn 0, 0, false\n\t}\n\tc := a / b\n\treturn c, a % b, true\n}\n\n// Add16 performs + operation on two int16 operands\n// returning a result and status\nfunc Add16(a, b int16) (int16, bool) {\n\tc := a + b\n\tif (c \u003e a) == (b \u003e 0) {\n\t\treturn c, true\n\t}\n\treturn c, false\n}\n\n// Add16p is the unchecked panicing version of Add16\nfunc Add16p(a, b int16) int16 {\n\tr, ok := Add16(a, b)\n\tif !ok {\n\t\tpanic(\"addition overflow\")\n\t}\n\treturn r\n}\n\n// Sub16 performs - operation on two int16 operands\n// returning a result and status\nfunc Sub16(a, b int16) (int16, bool) {\n\tc := a - b\n\tif (c \u003c a) == (b \u003e 0) {\n\t\treturn c, true\n\t}\n\treturn c, false\n}\n\n// Sub16p is the unchecked panicing version of Sub16\nfunc Sub16p(a, b int16) int16 {\n\tr, ok := Sub16(a, b)\n\tif !ok {\n\t\tpanic(\"subtraction overflow\")\n\t}\n\treturn r\n}\n\n// Mul16 performs * operation on two int16 operands\n// returning a result and status\nfunc Mul16(a, b int16) (int16, bool) {\n\tif a == 0 || b == 0 {\n\t\treturn 0, true\n\t}\n\tc := a * b\n\tif (c \u003c 0) == ((a \u003c 0) != (b \u003c 0)) {\n\t\tif c/b == a {\n\t\t\treturn c, true\n\t\t}\n\t}\n\treturn c, false\n}\n\n// Mul16p is the unchecked panicing version of Mul16\nfunc Mul16p(a, b int16) int16 {\n\tr, ok := Mul16(a, b)\n\tif !ok {\n\t\tpanic(\"multiplication overflow\")\n\t}\n\treturn r\n}\n\n// Div16 performs / operation on two int16 operands\n// returning a result and status\nfunc Div16(a, b int16) (int16, bool) {\n\tq, _, ok := Quo16(a, b)\n\treturn q, ok\n}\n\n// Div16p is the unchecked panicing version of Div16\nfunc Div16p(a, b int16) int16 {\n\tr, ok := Div16(a, b)\n\tif !ok {\n\t\tpanic(\"division failure\")\n\t}\n\treturn r\n}\n\n// Quo16 performs + operation on two int16 operands\n// returning a quotient, a remainder and status\nfunc Quo16(a, b int16) (int16, int16, bool) {\n\tif b == 0 {\n\t\treturn 0, 0, false\n\t} else if b == -1 \u0026\u0026 a == MinInt16 {\n\t\treturn 0, 0, false\n\t}\n\tc := a / b\n\treturn c, a % b, true\n}\n\n// Add32 performs + operation on two int32 operands\n// returning a result and status\nfunc Add32(a, b int32) (int32, bool) {\n\tc := a + b\n\tif (c \u003e a) == (b \u003e 0) {\n\t\treturn c, true\n\t}\n\treturn c, false\n}\n\n// Add32p is the unchecked panicing version of Add32\nfunc Add32p(a, b int32) int32 {\n\tr, ok := Add32(a, b)\n\tif !ok {\n\t\tpanic(\"addition overflow\")\n\t}\n\treturn r\n}\n\n// Sub32 performs - operation on two int32 operands\n// returning a result and status\nfunc Sub32(a, b int32) (int32, bool) {\n\tc := a - b\n\tif (c \u003c a) == (b \u003e 0) {\n\t\treturn c, true\n\t}\n\treturn c, false\n}\n\n// Sub32p is the unchecked panicing version of Sub32\nfunc Sub32p(a, b int32) int32 {\n\tr, ok := Sub32(a, b)\n\tif !ok {\n\t\tpanic(\"subtraction overflow\")\n\t}\n\treturn r\n}\n\n// Mul32 performs * operation on two int32 operands\n// returning a result and status\nfunc Mul32(a, b int32) (int32, bool) {\n\tif a == 0 || b == 0 {\n\t\treturn 0, true\n\t}\n\tc := a * b\n\tif (c \u003c 0) == ((a \u003c 0) != (b \u003c 0)) {\n\t\tif c/b == a {\n\t\t\treturn c, true\n\t\t}\n\t}\n\treturn c, false\n}\n\n// Mul32p is the unchecked panicing version of Mul32\nfunc Mul32p(a, b int32) int32 {\n\tr, ok := Mul32(a, b)\n\tif !ok {\n\t\tpanic(\"multiplication overflow\")\n\t}\n\treturn r\n}\n\n// Div32 performs / operation on two int32 operands\n// returning a result and status\nfunc Div32(a, b int32) (int32, bool) {\n\tq, _, ok := Quo32(a, b)\n\treturn q, ok\n}\n\n// Div32p is the unchecked panicing version of Div32\nfunc Div32p(a, b int32) int32 {\n\tr, ok := Div32(a, b)\n\tif !ok {\n\t\tpanic(\"division failure\")\n\t}\n\treturn r\n}\n\n// Quo32 performs + operation on two int32 operands\n// returning a quotient, a remainder and status\nfunc Quo32(a, b int32) (int32, int32, bool) {\n\tif b == 0 {\n\t\treturn 0, 0, false\n\t} else if b == -1 \u0026\u0026 a == MinInt32 {\n\t\treturn 0, 0, false\n\t}\n\tc := a / b\n\treturn c, a % b, true\n}\n\n// Add64 performs + operation on two int64 operands\n// returning a result and status\nfunc Add64(a, b int64) (int64, bool) {\n\tc := a + b\n\tif (c \u003e a) == (b \u003e 0) {\n\t\treturn c, true\n\t}\n\treturn c, false\n}\n\n// Add64p is the unchecked panicing version of Add64\nfunc Add64p(a, b int64) int64 {\n\tr, ok := Add64(a, b)\n\tif !ok {\n\t\tpanic(\"addition overflow\")\n\t}\n\treturn r\n}\n\n// Sub64 performs - operation on two int64 operands\n// returning a result and status\nfunc Sub64(a, b int64) (int64, bool) {\n\tc := a - b\n\tif (c \u003c a) == (b \u003e 0) {\n\t\treturn c, true\n\t}\n\treturn c, false\n}\n\n// Sub64p is the unchecked panicing version of Sub64\nfunc Sub64p(a, b int64) int64 {\n\tr, ok := Sub64(a, b)\n\tif !ok {\n\t\tpanic(\"subtraction overflow\")\n\t}\n\treturn r\n}\n\n// Mul64 performs * operation on two int64 operands\n// returning a result and status\nfunc Mul64(a, b int64) (int64, bool) {\n\tif a == 0 || b == 0 {\n\t\treturn 0, true\n\t}\n\tc := a * b\n\tif (c \u003c 0) == ((a \u003c 0) != (b \u003c 0)) {\n\t\tif c/b == a {\n\t\t\treturn c, true\n\t\t}\n\t}\n\treturn c, false\n}\n\n// Mul64p is the unchecked panicing version of Mul64\nfunc Mul64p(a, b int64) int64 {\n\tr, ok := Mul64(a, b)\n\tif !ok {\n\t\tpanic(\"multiplication overflow\")\n\t}\n\treturn r\n}\n\n// Div64 performs / operation on two int64 operands\n// returning a result and status\nfunc Div64(a, b int64) (int64, bool) {\n\tq, _, ok := Quo64(a, b)\n\treturn q, ok\n}\n\n// Div64p is the unchecked panicing version of Div64\nfunc Div64p(a, b int64) int64 {\n\tr, ok := Div64(a, b)\n\tif !ok {\n\t\tpanic(\"division failure\")\n\t}\n\treturn r\n}\n\n// Quo64 performs + operation on two int64 operands\n// returning a quotient, a remainder and status\nfunc Quo64(a, b int64) (int64, int64, bool) {\n\tif b == 0 {\n\t\treturn 0, 0, false\n\t} else if b == -1 \u0026\u0026 a == MinInt64 {\n\t\treturn 0, 0, false\n\t}\n\tc := a / b\n\treturn c, a % b, true\n}\n"
                },
                {
                  "Name": "rat.gno",
                  "Body": "package maths\n\n//----------------------------------------\n// Rat fractions\n\n// represents a fraction.\ntype Rat struct {\n\tX int32\n\tY int32 // must be positive\n}\n\nfunc NewRat(x, y int32) Rat {\n\tif y \u003c= 0 {\n\t\tpanic(\"invalid std.Rat denominator\")\n\t}\n\treturn Rat{X: x, Y: y}\n}\n\nfunc (r1 Rat) IsValid() bool {\n\tif r1.Y \u003c= 0 {\n\t\treturn false\n\t}\n\treturn true\n}\n\nfunc (r1 Rat) Cmp(r2 Rat) int {\n\tif !r1.IsValid() {\n\t\tpanic(\"invalid std.Rat left operand\")\n\t}\n\tif !r2.IsValid() {\n\t\tpanic(\"invalid std.Rat right operand\")\n\t}\n\tvar p1, p2 int64\n\tp1 = int64(r1.X) * int64(r2.Y)\n\tp2 = int64(r1.Y) * int64(r2.X)\n\tif p1 \u003c p2 {\n\t\treturn -1\n\t} else if p1 == p2 {\n\t\treturn 0\n\t} else {\n\t\treturn 1\n\t}\n}\n\n//func (r1 Rat) Plus(r2 Rat) Rat {\n// XXX\n//}\n"
                }
              ]
            },
            "deposit": ""
          }
        ],
        "fee": {
          "gas_wanted": "50000",
          "gas_fee": "1000000ugnot"
        },
        "signatures": [
          {
            "pub_key": null,
            "signature": null
          }
        ],
        "memo": ""
      },
      {
        "msg": [
          {
            "@type": "/vm.m_addpkg",
            "creator": "g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5",
            "package": {
              "Name": "users",
              "Path": "gno.land/r/users",
              "Files": [
                {
                  "Name": "types.gno",
                  "Body": "package users\n\nimport \"std\"\n\ntype AddressOrName string\n\nfunc (aon AddressOrName) IsName() bool {\n\treturn aon != \"\" \u0026\u0026 aon[0] == '@'\n}\n\nfunc (aon AddressOrName) GetName() (string, bool) {\n\tif len(aon) \u003e= 2 \u0026\u0026 aon[0] == '@' {\n\t\treturn string(aon[1:]), true\n\t}\n\treturn \"\", false\n}\n\nfunc (aon AddressOrName) Resolve() std.Address {\n\tname, isName := aon.GetName()\n\tif isName {\n\t\tuser := GetUserByName(name)\n\t\treturn user.address\n\t} else {\n\t\treturn std.Address(aon) // TODO check validity\n\t}\n}\n"
                },
                {
                  "Name": "users.gno",
                  "Body": "package users\n\nimport (\n\t\"regexp\"\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n\n\t\"gno.land/p/avl\"\n)\n\n//----------------------------------------\n// Types\n\ntype User struct {\n\taddress std.Address\n\tname    string\n\tprofile string\n\tnumber  int\n\tinvites int\n\tinviter std.Address\n}\n\nfunc (u *User) Render() string {\n\tstr := \"## user \" + u.name + \"\\n\" +\n\t\t\"\\n\" +\n\t\t\" * address = \" + string(u.address) + \"\\n\" +\n\t\t\" * \" + strconv.Itoa(u.invites) + \" invites\\n\"\n\tif u.inviter != \"\" {\n\t\tstr = str + \" * invited by \" + string(u.inviter) + \"\\n\"\n\t}\n\tstr = str + \"\\n\" +\n\t\tu.profile + \"\\n\"\n\treturn str\n}\n\nfunc (u User) Name() string         { return u.name }\nfunc (u User) Profile() string      { return u.profile }\nfunc (u User) Address() std.Address { return u.address }\n\n//----------------------------------------\n// State\n\nvar (\n\tadmin      std.Address = \"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\"\n\tname2User  *avl.Tree                   // Name -\u003e *User\n\taddr2User  *avl.Tree                   // std.Address -\u003e *User\n\tinvites    *avl.Tree                   // string(inviter+\":\"+invited) -\u003e true\n\tcounter    int                         // user id counter\n\tminFee     int64       = 200 * 1000000 // minimum gnot must be paid to register.\n\tmaxFeeMult int64       = 10            // maximum multiples of minFee accepted.\n)\n\n//----------------------------------------\n// Top-level functions\n\nfunc Register(inviter std.Address, name string, profile string) {\n\t// assert CallTx call.\n\tstd.AssertOriginCall()\n\t// assert invited or paid.\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tsentCoins := std.GetOrigSend()\n\tminCoin := std.Coin{\"ugnot\", minFee}\n\tif inviter == \"\" {\n\t\t// banker := std.GetBanker(std.BankerTypeOrigSend)\n\t\tif len(sentCoins) == 1 \u0026\u0026 sentCoins[0].IsGTE(minCoin) {\n\t\t\tif sentCoins[0].Amount \u003e minFee*maxFeeMult {\n\t\t\t\tpanic(\"payment must not be greater than \" + strconv.Itoa(int(minFee*maxFeeMult)))\n\t\t\t} else {\n\t\t\t\t// ok\n\t\t\t}\n\t\t} else {\n\t\t\tpanic(\"payment must not be less than \" + strconv.Itoa(int(minFee)))\n\t\t}\n\t} else {\n\t\tinvitekey := inviter.String() + \":\" + caller.String()\n\t\t_, _, ok := invites.Get(invitekey)\n\t\tif !ok {\n\t\t\tpanic(\"invalid invitation\")\n\t\t}\n\t\tinvites.Remove(invitekey)\n\t}\n\t// assert not already registered.\n\t_, _, ok := name2User.Get(name)\n\tif ok {\n\t\tpanic(\"name already registered\")\n\t}\n\t_, _, ok = addr2User.Get(caller.String())\n\tif ok {\n\t\tpanic(\"address already registered\")\n\t}\n\t// assert name is valid.\n\tif !reName.MatchString(name) {\n\t\tpanic(\"invalid name: \" + name + \" (must be at least 6 characters, lowercase alphanumeric with underscore)\")\n\t}\n\t// remainder of fees go toward invites.\n\tinvites := int(0)\n\tif len(sentCoins) == 1 {\n\t\tif sentCoins[0].Denom == \"ugnot\" \u0026\u0026 sentCoins[0].Amount \u003e= minFee {\n\t\t\tinvites = int(sentCoins[0].Amount / minFee)\n\t\t\tif inviter == \"\" \u0026\u0026 invites \u003e 0 {\n\t\t\t\tinvites -= 1\n\t\t\t}\n\t\t}\n\t}\n\t// register.\n\tcounter++\n\tuser := \u0026User{\n\t\taddress: caller,\n\t\tname:    name,\n\t\tprofile: profile,\n\t\tnumber:  counter,\n\t\tinvites: invites,\n\t\tinviter: inviter,\n\t}\n\tname2User, _ = name2User.Set(name, user)\n\taddr2User, _ = addr2User.Set(caller.String(), user)\n}\n\nfunc Invite(invitee string) {\n\t// assert CallTx call.\n\tstd.AssertOriginCall()\n\t// get caller/inviter.\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tlines := strings.Split(invitee, \"\\n\")\n\tif caller == admin {\n\t\t// nothing to do, all good\n\t} else {\n\t\t// ensure has invites.\n\t\t_, userI, ok := addr2User.Get(caller.String())\n\t\tif !ok {\n\t\t\tpanic(\"user unknown\")\n\t\t}\n\t\tuser := userI.(*User)\n\t\tif user.invites \u003c= 0 {\n\t\t\tpanic(\"user has no invite tokens\")\n\t\t}\n\t\tuser.invites -= len(lines)\n\t\tif user.invites \u003c 0 {\n\t\t\tpanic(\"user has insufficient invite tokens\")\n\t\t}\n\t}\n\t// for each line...\n\tfor _, line := range lines {\n\t\tif line == \"\" {\n\t\t\tcontinue // file bodies have a trailing newline.\n\t\t} else if strings.HasPrefix(line, `//`) {\n\t\t\tcontinue // comment\n\t\t}\n\t\t// record invite.\n\t\tinvitekey := string(caller) + \":\" + string(line)\n\t\tinvites, _ = invites.Set(invitekey, true)\n\t}\n}\n\nfunc GrantInvites(invites string) {\n\t// assert CallTx call.\n\tstd.AssertOriginCall()\n\t// assert admin.\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tif caller != admin {\n\t\tpanic(\"unauthorized\")\n\t}\n\t// for each line...\n\tlines := strings.Split(invites, \"\\n\")\n\tfor _, line := range lines {\n\t\tif line == \"\" {\n\t\t\tcontinue // file bodies have a trailing newline.\n\t\t} else if strings.HasPrefix(line, `//`) {\n\t\t\tcontinue // comment\n\t\t}\n\t\t// parse name and invites.\n\t\tvar name string\n\t\tvar invites int\n\t\tparts := strings.Split(line, \":\")\n\t\tif len(parts) == 1 { // short for :1.\n\t\t\tname = parts[0]\n\t\t\tinvites = 1\n\t\t} else if len(parts) == 2 {\n\t\t\tname = parts[0]\n\t\t\tinvites_, err := strconv.Atoi(parts[1])\n\t\t\tif err != nil {\n\t\t\t\tpanic(err)\n\t\t\t}\n\t\t\tinvites = int(invites_)\n\t\t} else {\n\t\t\tpanic(\"should not happen\")\n\t\t}\n\t\t// give invites.\n\t\t_, userI, ok := name2User.Get(name)\n\t\tif !ok {\n\t\t\t// maybe address.\n\t\t\t_, userI, ok = addr2User.Get(name)\n\t\t\tif !ok {\n\t\t\t\tpanic(\"invalid user \" + name)\n\t\t\t}\n\t\t}\n\t\tuser := userI.(*User)\n\t\tuser.invites += invites\n\t}\n}\n\n// Any leftover fees go toward invitations.\nfunc SetMinFee(newMinFee int64) {\n\t// assert CallTx call.\n\tstd.AssertOriginCall()\n\t// assert admin caller.\n\tcaller := std.GetCallerAt(2)\n\tif caller != admin {\n\t\tpanic(\"unauthorized\")\n\t}\n\t// update global variables.\n\tminFee = newMinFee\n}\n\n// This helps prevent fat finger accidents.\nfunc SetMaxFeeMultiple(newMaxFeeMult int64) {\n\t// assert CallTx call.\n\tstd.AssertOriginCall()\n\t// assert admin caller.\n\tcaller := std.GetCallerAt(2)\n\tif caller != admin {\n\t\tpanic(\"unauthorized\")\n\t}\n\t// update global variables.\n\tmaxFeeMult = newMaxFeeMult\n}\n\n//----------------------------------------\n// Exposed public functions\n\nfunc GetUserByName(name string) *User {\n\t_, userI, ok := name2User.Get(name)\n\tif !ok {\n\t\treturn nil\n\t}\n\treturn userI.(*User)\n}\n\nfunc GetUserByAddress(addr std.Address) *User {\n\t_, userI, ok := addr2User.Get(addr.String())\n\tif !ok {\n\t\treturn nil\n\t}\n\treturn userI.(*User)\n}\n\n// unlike GetUserByName, input must be \"@\" prefixed for names.\nfunc GetUserByAddressOrName(input AddressOrName) *User {\n\tname, isName := input.GetName()\n\tif isName {\n\t\treturn GetUserByName(name)\n\t}\n\treturn GetUserByAddress(std.Address(input))\n}\n\n//----------------------------------------\n// Constants\n\n// NOTE: name length must be clearly distinguishable from a bech32 address.\nvar reName = regexp.MustCompile(`^[a-z]+[_a-z0-9]{5,16}$`)\n\n//----------------------------------------\n// Render main page\n\nfunc Render(path string) string {\n\tif path == \"\" {\n\t\treturn renderHome()\n\t} else if len(path) \u003e= 38 { // 39? 40?\n\t\tif path[:2] != \"g1\" {\n\t\t\treturn \"invalid address \" + path\n\t\t}\n\t\tuser := GetUserByAddress(std.Address(path))\n\t\tif user == nil {\n\t\t\t// TODO: display basic information about account.\n\t\t\treturn \"unknown address \" + path\n\t\t}\n\t\treturn user.Render()\n\t} else {\n\t\tuser := GetUserByName(path)\n\t\tif user == nil {\n\t\t\treturn \"unknown username \" + path\n\t\t}\n\t\treturn user.Render()\n\t}\n}\n\nfunc renderHome() string {\n\tdoc := \"\"\n\tname2User.Iterate(\"\", \"\", func(t *avl.Tree) bool {\n\t\tuser := t.Value().(*User)\n\t\tdoc += \" * [\" + user.name + \"](/r/users:\" + user.name + \")\\n\"\n\t\treturn false\n\t})\n\treturn doc\n}\n"
                },
                {
                  "Name": "z_0_b_filetest.gno",
                  "Body": "package main\n\n// SEND: 199000000ugnot\n\nimport (\n\t\"std\"\n\n\t\"gno.land/r/users\"\n)\n\nfunc main() {\n\tusers.Register(\"\", \"gnouser\", \"my profile\")\n\tprintln(\"done\")\n}\n\n// Error:\n// payment must not be less than 200000000\n"
                },
                {
                  "Name": "z_0_filetest.gno",
                  "Body": "package main\n\nimport (\n\t\"std\"\n\n\t\"gno.land/r/users\"\n)\n\nfunc main() {\n\tstd.TestSetOrigSend(std.Coins{{\"dontcare\", 1}}, nil)\n\tusers.Register(\"\", \"gnouser\", \"my profile\")\n\tprintln(\"done\")\n}\n\n// Error:\n// invalid coin denominations: dontcare\n"
                },
                {
                  "Name": "z_10_filetest.gno",
                  "Body": "// PKGPATH: gno.land/r/users_test\npackage users_test\n\nimport (\n\t\"std\"\n\n\t\"gno.land/p/testutils\"\n\t\"gno.land/r/users\"\n)\n\nconst admin = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\")\n\nfunc init() {\n\tcaller := std.GetOrigCaller() // main\n\ttest2 := testutils.TestAddress(\"test2\")\n\t// as admin, invite gnouser and test2\n\tstd.TestSetOrigCaller(admin)\n\tusers.Invite(caller.String() + \"\\n\" + test2.String())\n\t// register as caller\n\tstd.TestSetOrigCaller(caller)\n\tusers.Register(admin, \"gnouser\", \"my profile\")\n}\n\nfunc main() {\n\t// register as test2\n\ttest2 := testutils.TestAddress(\"test2\")\n\tstd.TestSetOrigCaller(test2)\n\tusers.Register(admin, \"test222\", \"my profile 2\")\n\tprintln(\"done\")\n}\n\n// Output:\n// done\n"
                },
                {
                  "Name": "z_1_filetest.gno",
                  "Body": "package main\n\n// SEND: 2000000000ugnot\n\nimport (\n\t\"gno.land/r/users\"\n)\n\nfunc main() {\n\tusers.Register(\"\", \"gnouser\", \"my profile\")\n\tprintln(\"done\")\n}\n\n// Output:\n// done\n"
                },
                {
                  "Name": "z_2_filetest.gno",
                  "Body": "package main\n\n// SEND: 2000000000ugnot\n\nimport (\n\t\"std\"\n\n\t\"gno.land/p/testutils\"\n\t\"gno.land/r/users\"\n)\n\nconst admin = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\")\n\nfunc main() {\n\tcaller := std.GetOrigCaller() // main\n\tusers.Register(\"\", \"gnouser\", \"my profile\")\n\t// as admin, grant invites to gnouser\n\tstd.TestSetOrigCaller(admin)\n\tusers.GrantInvites(caller.String() + \":1\")\n\t// switch back to caller\n\tstd.TestSetOrigCaller(caller)\n\t// invite another addr\n\ttest1 := testutils.TestAddress(\"test1\")\n\tusers.Invite(test1.String())\n\t// switch to test1\n\tstd.TestSetOrigCaller(test1)\n\tusers.Register(caller, \"satoshi\", \"my other profile\")\n\tprintln(\"done\")\n}\n\n// Output:\n// done\n"
                },
                {
                  "Name": "z_3_filetest.gno",
                  "Body": "package main\n\n// SEND: 2000000000ugnot\n\nimport (\n\t\"std\"\n\n\t\"gno.land/p/testutils\"\n\t\"gno.land/r/users\"\n)\n\nconst admin = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\")\n\nfunc main() {\n\tcaller := std.GetOrigCaller() // main\n\tusers.Register(\"\", \"gnouser\", \"my profile\")\n\t// as admin, grant invites to gnouser\n\tstd.TestSetOrigCaller(admin)\n\tusers.GrantInvites(caller.String() + \":1\")\n\t// switch back to caller\n\tstd.TestSetOrigCaller(caller)\n\t// invite another addr\n\ttest1 := testutils.TestAddress(\"test1\")\n\tusers.Invite(test1.String())\n\t// switch to test1\n\tstd.TestSetOrigCaller(test1)\n\tstd.TestSetOrigSend(std.Coins{{\"dontcare\", 1}}, nil)\n\tusers.Register(caller, \"satoshi\", \"my other profile\")\n\tprintln(\"done\")\n}\n\n// Output:\n// done\n"
                },
                {
                  "Name": "z_4_filetest.gno",
                  "Body": "package main\n\n// SEND: 2000000000ugnot\n\nimport (\n\t\"std\"\n\n\t\"gno.land/p/testutils\"\n\t\"gno.land/r/users\"\n)\n\nconst admin = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\")\n\nfunc main() {\n\tcaller := std.GetOrigCaller() // main\n\tusers.Register(\"\", \"gnouser\", \"my profile\")\n\t// as admin, grant invites to gnouser\n\tstd.TestSetOrigCaller(admin)\n\tusers.GrantInvites(caller.String() + \":1\")\n\t// switch back to caller\n\tstd.TestSetOrigCaller(caller)\n\t// invite another addr\n\ttest1 := testutils.TestAddress(\"test1\")\n\ttest2 := testutils.TestAddress(\"test2\")\n\tusers.Invite(test1.String())\n\t// switch to test2 (not test1)\n\tstd.TestSetOrigCaller(test2)\n\tstd.TestSetOrigSend(std.Coins{{\"dontcare\", 1}}, nil)\n\tusers.Register(caller, \"satoshi\", \"my other profile\")\n\tprintln(\"done\")\n}\n\n// Error:\n// invalid invitation\n"
                },
                {
                  "Name": "z_5_filetest.gno",
                  "Body": "package main\n\n// SEND: 2000000000ugnot\n\nimport (\n\t\"std\"\n\n\t\"gno.land/p/testutils\"\n\t\"gno.land/r/users\"\n)\n\nconst admin = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\")\n\nfunc main() {\n\tcaller := std.GetOrigCaller() // main\n\tusers.Register(\"\", \"gnouser\", \"my profile\")\n\t// as admin, grant invites to gnouser\n\tstd.TestSetOrigCaller(admin)\n\tusers.GrantInvites(caller.String() + \":1\")\n\t// switch back to caller\n\tstd.TestSetOrigCaller(caller)\n\t// invite another addr\n\ttest1 := testutils.TestAddress(\"test1\")\n\tusers.Invite(test1.String())\n\t// switch to test1\n\tstd.TestSetOrigCaller(test1)\n\tstd.TestSetOrigSend(std.Coins{{\"dontcare\", 1}}, nil)\n\tusers.Register(caller, \"satoshi\", \"my other profile\")\n\tprintln(users.Render(\"\"))\n\tprintln(\"========================================\")\n\tprintln(users.Render(\"gnouser\"))\n\tprintln(\"========================================\")\n\tprintln(users.Render(\"satoshi\"))\n\tprintln(\"========================================\")\n\tprintln(users.Render(\"badname\"))\n}\n\n// Output:\n// * [gnouser](/r/users:gnouser)\n//  * [satoshi](/r/users:satoshi)\n//\n// ========================================\n// ## user gnouser\n//\n//  * address = g17rgsdnfxzza0sdfsdma37sdwxagsz378833ca4\n//  * 9 invites\n//\n// my profile\n//\n// ========================================\n// ## user satoshi\n//\n//  * address = g1w3jhxap3ta047h6lta047h6lta047h6l4mfnm7\n//  * 0 invites\n//  * invited by g17rgsdnfxzza0sdfsdma37sdwxagsz378833ca4\n//\n// my other profile\n//\n// ========================================\n// unknown username badname\n"
                },
                {
                  "Name": "z_6_filetest.gno",
                  "Body": "package main\n\nimport (\n\t\"std\"\n\n\t\"gno.land/p/testutils\"\n\t\"gno.land/r/users\"\n)\n\nconst admin = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\")\n\nfunc main() {\n\tcaller := std.GetOrigCaller() // main\n\t// as admin, grant invites to unregistered user.\n\tstd.TestSetOrigCaller(admin)\n\tusers.GrantInvites(caller.String() + \":1\")\n\tprintln(\"done\")\n}\n\n// Error:\n// invalid user g17rgsdnfxzza0sdfsdma37sdwxagsz378833ca4\n"
                },
                {
                  "Name": "z_7_filetest.gno",
                  "Body": "package main\n\n// SEND: 2000000000ugnot\n\nimport (\n\t\"std\"\n\n\t\"gno.land/p/testutils\"\n\t\"gno.land/r/users\"\n)\n\nconst admin = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\")\n\nfunc main() {\n\tcaller := std.GetOrigCaller() // main\n\tusers.Register(\"\", \"gnouser\", \"my profile\")\n\t// as admin, grant invites to gnouser\n\tstd.TestSetOrigCaller(admin)\n\tusers.GrantInvites(caller.String() + \":1\")\n\t// switch back to caller\n\tstd.TestSetOrigCaller(caller)\n\t// invite another addr\n\ttest1 := testutils.TestAddress(\"test1\")\n\tusers.Invite(test1.String())\n\t// switch to test1\n\tstd.TestSetOrigCaller(test1)\n\tstd.TestSetOrigSend(std.Coins{{\"dontcare\", 1}}, nil)\n\tusers.Register(caller, \"satoshi\", \"my other profile\")\n\t// as admin, grant invites to gnouser(again) and satoshi.\n\tstd.TestSetOrigCaller(admin)\n\tusers.GrantInvites(caller.String() + \":1\\n\" + test1.String() + \":1\")\n\tprintln(\"done\")\n}\n\n// Output:\n// done\n"
                },
                {
                  "Name": "z_7b_filetest.gno",
                  "Body": "package main\n\n// SEND: 2000000000ugnot\n\nimport (\n\t\"std\"\n\n\t\"gno.land/p/testutils\"\n\t\"gno.land/r/users\"\n)\n\nconst admin = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\")\n\nfunc main() {\n\tcaller := std.GetOrigCaller() // main\n\tusers.Register(\"\", \"gnouser\", \"my profile\")\n\t// as admin, grant invites to gnouser\n\tstd.TestSetOrigCaller(admin)\n\tusers.GrantInvites(caller.String() + \":1\\n\")\n\t// switch back to caller\n\tstd.TestSetOrigCaller(caller)\n\t// invite another addr\n\ttest1 := testutils.TestAddress(\"test1\")\n\tusers.Invite(test1.String())\n\t// switch to test1\n\tstd.TestSetOrigCaller(test1)\n\tstd.TestSetOrigSend(std.Coins{{\"dontcare\", 1}}, nil)\n\tusers.Register(caller, \"satoshi\", \"my other profile\")\n\t// as admin, grant invites to gnouser(again) and satoshi.\n\tstd.TestSetOrigCaller(admin)\n\tusers.GrantInvites(caller.String() + \":1\\n\" + test1.String() + \":1\")\n\tprintln(\"done\")\n}\n\n// Output:\n// done\n"
                },
                {
                  "Name": "z_8_filetest.gno",
                  "Body": "package main\n\n// SEND: 2000000000ugnot\n\nimport (\n\t\"std\"\n\n\t\"gno.land/p/testutils\"\n\t\"gno.land/r/users\"\n)\n\nconst admin = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\")\n\nfunc main() {\n\tcaller := std.GetOrigCaller() // main\n\tusers.Register(\"\", \"gnouser\", \"my profile\")\n\t// as admin, grant invites to gnouser\n\tstd.TestSetOrigCaller(admin)\n\tusers.GrantInvites(caller.String() + \":1\")\n\t// switch back to caller\n\tstd.TestSetOrigCaller(caller)\n\t// invite another addr\n\ttest1 := testutils.TestAddress(\"test1\")\n\tusers.Invite(test1.String())\n\t// switch to test1\n\tstd.TestSetOrigCaller(test1)\n\tstd.TestSetOrigSend(std.Coins{{\"dontcare\", 1}}, nil)\n\tusers.Register(caller, \"satoshi\", \"my other profile\")\n\t// as admin, grant invites to gnouser(again) and nonexistent user.\n\tstd.TestSetOrigCaller(admin)\n\ttest2 := testutils.TestAddress(\"test2\")\n\tusers.GrantInvites(caller.String() + \":1\\n\" + test2.String() + \":1\")\n\tprintln(\"done\")\n}\n\n// Error:\n// invalid user g1w3jhxapjta047h6lta047h6lta047h6laqcyu4\n"
                },
                {
                  "Name": "z_9_filetest.gno",
                  "Body": "package main\n\nimport (\n\t\"std\"\n\n\t\"gno.land/p/testutils\"\n\t\"gno.land/r/users\"\n)\n\nconst admin = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\")\n\nfunc main() {\n\tcaller := std.GetOrigCaller() // main\n\ttest2 := testutils.TestAddress(\"test2\")\n\t// as admin, invite gnouser and test2\n\tstd.TestSetOrigCaller(admin)\n\tusers.Invite(caller.String() + \"\\n\" + test2.String())\n\t// register as caller\n\tstd.TestSetOrigCaller(caller)\n\tusers.Register(admin, \"gnouser\", \"my profile\")\n\t// register as test2\n\tstd.TestSetOrigCaller(test2)\n\tusers.Register(admin, \"test222\", \"my profile 2\")\n\tprintln(\"done\")\n}\n\n// Output:\n// done\n"
                }
              ]
            },
            "deposit": ""
          }
        ],
        "fee": {
          "gas_wanted": "50000",
          "gas_fee": "1000000ugnot"
        },
        "signatures": [
          {
            "pub_key": null,
            "signature": null
          }
        ],
        "memo": ""
      },
      {
        "msg": [
          {
            "@type": "/vm.m_addpkg",
            "creator": "g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5",
            "package": {
              "Name": "foo20",
              "Path": "gno.land/r/foo20",
              "Files": [
                {
                  "Name": "foo20.gno",
                  "Body": "package foo20\n\nimport (\n\t\"std\"\n\t\"strings\"\n\n\t\"gno.land/p/grc/grc20\"\n\t\"gno.land/p/ufmt\"\n\t\"gno.land/r/users\"\n)\n\nvar (\n\tfoo   *grc20.AdminToken\n\tadmin std.Address = \"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\" // TODO: helper to change admin\n)\n\nfunc init() {\n\tfoo = grc20.NewAdminToken(\"Foo\", \"FOO\", 4)\n\tfoo.Mint(admin, 1000000*10000)                                    // @administrator (1M)\n\tfoo.Mint(\"g1u7y667z64x2h7vc6fmpcprgey4ck233jaww9zq\", 10000*10000) // @manfred (10k)\n}\n\n// method proxies as public functions.\n//\n\n// getters.\n\nfunc TotalSupply() uint64 {\n\treturn foo.TotalSupply()\n}\n\nfunc BalanceOf(owner users.AddressOrName) uint64 {\n\tbalance, err := foo.BalanceOf(owner.Resolve())\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn balance\n}\n\nfunc Allowance(owner, spender users.AddressOrName) uint64 {\n\tallowance, err := foo.Allowance(owner.Resolve(), spender.Resolve())\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn allowance\n}\n\n// setters.\n\nfunc Transfer(to users.AddressOrName, amount uint64) {\n\tcaller := std.GetCallerAt(2)\n\tfoo.Transfer(caller, to.Resolve(), amount)\n}\n\nfunc Approve(spender users.AddressOrName, amount uint64) {\n\tcaller := std.GetCallerAt(2)\n\tfoo.Approve(caller, spender.Resolve(), amount)\n}\n\nfunc TransferFrom(from, to users.AddressOrName, amount uint64) {\n\tcaller := std.GetCallerAt(2)\n\tfoo.TransferFrom(caller, from.Resolve(), to.Resolve(), amount)\n}\n\n// administration.\n\nfunc Mint(address users.AddressOrName, amount uint64) {\n\tcaller := std.GetCallerAt(2)\n\tassertIsAdmin(caller)\n\tfoo.Mint(address.Resolve(), amount)\n}\n\nfunc Burn(address users.AddressOrName, amount uint64) {\n\tcaller := std.GetCallerAt(2)\n\tassertIsAdmin(caller)\n\tfoo.Burn(address.Resolve(), amount)\n}\n\n// render.\n//\n\nfunc Render(path string) string {\n\tparts := strings.Split(path, \"/\")\n\tc := len(parts)\n\n\tswitch {\n\tcase path == \"\":\n\t\treturn foo.RenderHome()\n\tcase c == 2 \u0026\u0026 parts[0] == \"balance\":\n\t\towner := users.AddressOrName(parts[1])\n\t\tbalance, _ := foo.BalanceOf(owner.Resolve())\n\t\treturn ufmt.Sprintf(\"%d\\n\", balance)\n\tdefault:\n\t\treturn \"404\\n\"\n\t}\n}\n\nfunc assertIsAdmin(address std.Address) {\n\tif address != admin {\n\t\tpanic(\"restricted access\")\n\t}\n}\n"
                },
                {
                  "Name": "foo20_test.gno",
                  "Body": "package foo20\n\nimport (\n\t\"testing\"\n\n\t\"gno.land/r/users\"\n)\n\nfunc TestReadOnlyPublicMethods(t *testing.T) {\n\tadmin := users.AddressOrName(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\")\n\tmanfred := users.AddressOrName(\"g1u7y667z64x2h7vc6fmpcprgey4ck233jaww9zq\")\n\tunknown := users.AddressOrName(\"g1u0000000000000000000000000000000000000\")\n\n\ttype test struct {\n\t\tname    string\n\t\tbalance uint64\n\t\tfn      func() uint64\n\t}\n\n\ttests := []test{\n\t\t{\n\t\t\t\"TotalSupply\",\n\t\t\t10100000000,\n\t\t\tfunc() uint64 { return TotalSupply() },\n\t\t},\n\t\t{\n\t\t\t\"BalanceOf(admin)\",\n\t\t\t10000000000,\n\t\t\tfunc() uint64 { return BalanceOf(admin) },\n\t\t},\n\t\t{\n\t\t\t\"BalanceOf(manfred)\",\n\t\t\t100000000,\n\t\t\tfunc() uint64 { return BalanceOf(manfred) },\n\t\t},\n\t\t{\n\t\t\t\"BalanceOf(unknown)\",\n\t\t\t0,\n\t\t\tfunc() uint64 { return Allowance(admin, manfred) },\n\t\t},\n\t}\n\n\tfor _, tc := range tests {\n\t\tif tc.fn() != tc.balance {\n\t\t\tt.Errorf(\"%s: have: %d want: %d\", tc.name, tc.fn(), tc.balance)\n\t\t}\n\t}\n}\n"
                }
              ]
            },
            "deposit": ""
          }
        ],
        "fee": {
          "gas_wanted": "50000",
          "gas_fee": "1000000ugnot"
        },
        "signatures": [
          {
            "pub_key": null,
            "signature": null
          }
        ],
        "memo": ""
      },
      {
        "msg": [
          {
            "@type": "/vm.m_addpkg",
            "creator": "g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5",
            "package": {
              "Name": "boards",
              "Path": "gno.land/r/boards",
              "Files": [
                {
                  "Name": "README.md",
                  "Body": "This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"
                },
                {
                  "Name": "board.gno",
                  "Body": "package boards\n\nimport (\n\t\"std\"\n\t\"strconv\"\n\t\"time\"\n\n\t\"gno.land/p/avl\"\n)\n\n//----------------------------------------\n// Board\n\ntype BoardID uint64\n\nfunc (bid BoardID) String() string {\n\treturn strconv.Itoa(int(bid))\n}\n\ntype Board struct {\n\tid        BoardID // only set for public boards.\n\turl       string\n\tname      string\n\tcreator   std.Address\n\tthreads   *avl.MutTree // Post.id -\u003e *Post\n\tpostsCtr  uint64       // increments Post.id\n\tcreatedAt time.Time\n\tdeleted   *avl.MutTree // TODO reserved for fast-delete.\n}\n\nfunc newBoard(id BoardID, url string, name string, creator std.Address) *Board {\n\tif !reName.MatchString(name) {\n\t\tpanic(\"invalid name: \" + name)\n\t}\n\texists := gBoardsByName.Has(name)\n\tif exists {\n\t\tpanic(\"board already exists\")\n\t}\n\treturn \u0026Board{\n\t\tid:        id,\n\t\turl:       url,\n\t\tname:      name,\n\t\tcreator:   creator,\n\t\tthreads:   avl.NewMutTree(),\n\t\tcreatedAt: time.Now(),\n\t}\n}\n\n/* TODO support this once we figure out how to ensure URL correctness.\n// A private board is not tracked by gBoards*,\n// but must be persisted by the caller's realm.\n// Private boards have 0 id and does not ping\n// back the remote board on reposts.\nfunc NewPrivateBoard(url string, name string, creator std.Address) *Board {\n\treturn newBoard(0, url, name, creator)\n}\n*/\n\nfunc (board *Board) IsPrivate() bool {\n\treturn board.id == 0\n}\n\nfunc (board *Board) GetThread(pid PostID) *Post {\n\tpidkey := postIDKey(pid)\n\tpostI, exists := board.threads.Get(pidkey)\n\tif !exists {\n\t\treturn nil\n\t}\n\treturn postI.(*Post)\n}\n\nfunc (board *Board) AddThread(creator std.Address, title string, body string) *Post {\n\tpid := board.incGetPostID()\n\tpidkey := postIDKey(pid)\n\tthread := newPost(board, pid, creator, title, body, pid, 0, 0)\n\tboard.threads.Set(pidkey, thread)\n\treturn thread\n}\n\n// NOTE: this can be potentially very expensive for threads with many replies.\n// TODO: implement optional fast-delete where thread is simply moved.\nfunc (board *Board) DeleteThread(pid PostID) {\n\tpidkey := postIDKey(pid)\n\t_, removed := board.threads.Remove(pidkey)\n\tif !removed {\n\t\tpanic(\"thread does not exist with id \" + pid.String())\n\t}\n}\n\nfunc (board *Board) HasPermission(addr std.Address, perm Permission) bool {\n\tif board.creator == addr {\n\t\tswitch perm {\n\t\tcase EditPermission:\n\t\t\treturn true\n\t\tcase DeletePermission:\n\t\t\treturn true\n\t\tdefault:\n\t\t\treturn false\n\t\t}\n\t}\n\treturn false\n}\n\n// Renders the board for display suitable as plaintext in\n// console.  This is suitable for demonstration or tests,\n// but not for prod.\nfunc (board *Board) RenderBoard() string {\n\tstr := \"\"\n\tstr += \"\\\\[[post](\" + board.GetPostFormURL() + \")]\\n\\n\"\n\tif board.threads.Size() \u003e 0 {\n\t\tboard.threads.Iterate(\"\", \"\", func(n *avl.Tree) bool {\n\t\t\tif str != \"\" {\n\t\t\t\tstr += \"----------------------------------------\\n\"\n\t\t\t}\n\t\t\tstr += n.Value().(*Post).RenderSummary() + \"\\n\"\n\t\t\treturn false\n\t\t})\n\t}\n\treturn str\n}\n\nfunc (board *Board) incGetPostID() PostID {\n\tboard.postsCtr++\n\treturn PostID(board.postsCtr)\n}\n\nfunc (board *Board) GetURLFromThreadAndReplyID(threadID, replyID PostID) string {\n\tif replyID == 0 {\n\t\treturn board.url + \"/\" + threadID.String()\n\t} else {\n\t\treturn board.url + \"/\" + threadID.String() + \"/\" + replyID.String()\n\t}\n}\n\nfunc (board *Board) GetPostFormURL() string {\n\treturn \"/r/boards?help\u0026__func=CreateThread\" +\n\t\t\"\u0026bid=\" + board.id.String() +\n\t\t\"\u0026body.type=textarea\"\n}\n"
                },
                {
                  "Name": "boards.gno",
                  "Body": "package boards\n\nimport (\n\t\"regexp\"\n\n\t\"gno.land/p/avl\"\n)\n\n//----------------------------------------\n// Realm (package) state\n\nvar (\n\tgBoards         = avl.NewMutTree() // id -\u003e *Board\n\tgBoardsCtr      int                // increments Board.id\n\tgBoardsByName   = avl.NewMutTree() // name -\u003e *Board\n\tgDefaultAnonFee = 100000000        // minimum fee required if anonymous\n)\n\n//----------------------------------------\n// Constants\n\nvar reName = regexp.MustCompile(`^[a-z]+[_a-z0-9]{2,29}$`)\n"
                },
                {
                  "Name": "example_post.md",
                  "Body": "Hey all! 👋\n\nThis is my first post in this land!"
                },
                {
                  "Name": "misc.gno",
                  "Body": "package boards\n\nimport (\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n\n\t\"gno.land/r/users\"\n)\n\n//----------------------------------------\n// private utility methods\n// XXX ensure these cannot be called from public.\n\nfunc getBoard(bid BoardID) *Board {\n\tbidkey := boardIDKey(bid)\n\tboard_, exists := gBoards.Get(bidkey)\n\tif !exists {\n\t\treturn nil\n\t}\n\tboard := board_.(*Board)\n\treturn board\n}\n\nfunc incGetBoardID() BoardID {\n\tgBoardsCtr++\n\treturn BoardID(gBoardsCtr)\n}\n\nfunc padLeft(str string, length int) string {\n\tif len(str) \u003e= length {\n\t\treturn str\n\t} else {\n\t\treturn strings.Repeat(\" \", length-len(str)) + str\n\t}\n}\n\nfunc padZero(u64 uint64, length int) string {\n\tstr := strconv.Itoa(int(u64))\n\tif len(str) \u003e= length {\n\t\treturn str\n\t} else {\n\t\treturn strings.Repeat(\"0\", length-len(str)) + str\n\t}\n}\n\nfunc boardIDKey(bid BoardID) string {\n\treturn padZero(uint64(bid), 10)\n}\n\nfunc postIDKey(pid PostID) string {\n\treturn padZero(uint64(pid), 10)\n}\n\nfunc indentBody(indent string, body string) string {\n\tlines := strings.Split(body, \"\\n\")\n\tres := \"\"\n\tfor i, line := range lines {\n\t\tif i \u003e 0 {\n\t\t\tres += \"\\n\"\n\t\t}\n\t\tres += indent + line\n\t}\n\treturn res\n}\n\n// NOTE: length must be greater than 3.\nfunc summaryOf(str string, length int) string {\n\tlines := strings.SplitN(str, \"\\n\", 2)\n\tline := lines[0]\n\tif len(line) \u003e length {\n\t\tline = line[:(length-3)] + \"...\"\n\t} else if len(lines) \u003e 1 {\n\t\t// len(line) \u003c= 80\n\t\tline = line + \"...\"\n\t}\n\treturn line\n}\n\nfunc displayAddressMD(addr std.Address) string {\n\tuser := users.GetUserByAddress(addr)\n\tif user == nil {\n\t\treturn \"[\" + addr.String() + \"](/r/users:\" + addr.String() + \")\"\n\t} else {\n\t\treturn \"[@\" + user.Name() + \"](/r/users:\" + user.Name() + \")\"\n\t}\n}\n\nfunc usernameOf(addr std.Address) string {\n\tuser := users.GetUserByAddress(addr)\n\tif user == nil {\n\t\treturn \"\"\n\t} else {\n\t\treturn user.Name()\n\t}\n}\n"
                },
                {
                  "Name": "post.gno",
                  "Body": "package boards\n\nimport (\n\t\"std\"\n\t\"strconv\"\n\t\"time\"\n\n\t\"gno.land/p/avl\"\n)\n\n//----------------------------------------\n// Post\n\n// NOTE: a PostID is relative to the board.\ntype PostID uint64\n\nfunc (pid PostID) String() string {\n\treturn strconv.Itoa(int(pid))\n}\n\n// A Post is a \"thread\" or a \"reply\" depending on context.\n// A thread is a Post of a Board that holds other replies.\ntype Post struct {\n\tboard       *Board\n\tid          PostID\n\tcreator     std.Address\n\ttitle       string // optional\n\tbody        string\n\treplies     *avl.MutTree // Post.id -\u003e *Post\n\trepliesAll  *avl.MutTree // Post.id -\u003e *Post (all replies, for top-level posts)\n\treposts     *avl.MutTree // Board.id -\u003e Post.id\n\tthreadID    PostID       // original Post.id\n\tparentID    PostID       // parent Post.id (if reply or repost)\n\trepostBoard BoardID      // original Board.id (if repost)\n\tcreatedAt   time.Time\n\tupdatedAt   time.Time\n}\n\nfunc newPost(board *Board, id PostID, creator std.Address, title, body string, threadID, parentID PostID, repostBoard BoardID) *Post {\n\treturn \u0026Post{\n\t\tboard:       board,\n\t\tid:          id,\n\t\tcreator:     creator,\n\t\ttitle:       title,\n\t\tbody:        body,\n\t\treplies:     avl.NewMutTree(),\n\t\trepliesAll:  avl.NewMutTree(),\n\t\treposts:     avl.NewMutTree(),\n\t\tthreadID:    threadID,\n\t\tparentID:    parentID,\n\t\trepostBoard: repostBoard,\n\t\tcreatedAt:   time.Now(),\n\t}\n}\n\nfunc (post *Post) IsThread() bool {\n\treturn post.parentID == 0\n}\n\nfunc (post *Post) GetPostID() PostID {\n\treturn post.id\n}\n\nfunc (post *Post) AddReply(creator std.Address, body string) *Post {\n\tboard := post.board\n\tpid := board.incGetPostID()\n\tpidkey := postIDKey(pid)\n\treply := newPost(board, pid, creator, \"\", body, post.threadID, post.id, 0)\n\tpost.replies.Set(pidkey, reply)\n\tif post.threadID == post.id {\n\t\tpost.repliesAll.Set(pidkey, reply)\n\t} else {\n\t\tthread := board.GetThread(post.threadID)\n\t\tthread.repliesAll.Set(pidkey, reply)\n\t}\n\treturn reply\n}\n\nfunc (post *Post) Update(title string, body string) {\n\tpost.title = title\n\tpost.body = body\n\tpost.updatedAt = time.Now()\n}\n\nfunc (thread *Post) GetReply(pid PostID) *Post {\n\tpidkey := postIDKey(pid)\n\treplyI, ok := thread.repliesAll.Get(pidkey)\n\tif !ok {\n\t\treturn nil\n\t} else {\n\t\treturn replyI.(*Post)\n\t}\n}\n\nfunc (post *Post) AddRepostTo(creator std.Address, title, body string, dst *Board) *Post {\n\tif !post.IsThread() {\n\t\tpanic(\"cannot repost non-thread post\")\n\t}\n\tpid := dst.incGetPostID()\n\tpidkey := postIDKey(pid)\n\trepost := newPost(dst, pid, creator, title, body, pid, post.id, post.board.id)\n\tdst.threads.Set(pidkey, repost)\n\tif !dst.IsPrivate() {\n\t\tbidkey := boardIDKey(dst.id)\n\t\tpost.reposts.Set(bidkey, pid)\n\t}\n\treturn repost\n}\n\nfunc (thread *Post) DeletePost(pid PostID) {\n\tif thread.id == pid {\n\t\tpanic(\"should not happen\")\n\t}\n\tpidkey := postIDKey(pid)\n\tpostI, removed := thread.repliesAll.Remove(pidkey)\n\tif !removed {\n\t\tpanic(\"post not found in thread\")\n\t}\n\tpost := postI.(*Post)\n\tif post.parentID != thread.id {\n\t\tparent := thread.GetReply(post.parentID)\n\t\tparent.replies.Remove(pidkey)\n\t} else {\n\t\tthread.replies.Remove(pidkey)\n\t}\n}\n\nfunc (post *Post) HasPermission(addr std.Address, perm Permission) bool {\n\tif post.creator == addr {\n\t\tswitch perm {\n\t\tcase EditPermission:\n\t\t\treturn true\n\t\tcase DeletePermission:\n\t\t\treturn true\n\t\tdefault:\n\t\t\treturn false\n\t\t}\n\t}\n\t// post notes inherit permissions of the board.\n\treturn post.board.HasPermission(addr, perm)\n}\n\nfunc (post *Post) GetSummary() string {\n\treturn summaryOf(post.body, 80)\n}\n\nfunc (post *Post) GetURL() string {\n\tif post.IsThread() {\n\t\treturn post.board.GetURLFromThreadAndReplyID(\n\t\t\tpost.id, 0)\n\t} else {\n\t\treturn post.board.GetURLFromThreadAndReplyID(\n\t\t\tpost.threadID, post.id)\n\t}\n}\n\nfunc (post *Post) GetReplyFormURL() string {\n\treturn \"/r/boards?help\u0026__func=CreateReply\" +\n\t\t\"\u0026bid=\" + post.board.id.String() +\n\t\t\"\u0026threadid=\" + post.threadID.String() +\n\t\t\"\u0026postid=\" + post.id.String() +\n\t\t\"\u0026body.type=textarea\"\n}\n\nfunc (post *Post) GetDeleteFormURL() string {\n\treturn \"/r/boards?help\u0026__func=DeletePost\" +\n\t\t\"\u0026bid=\" + post.board.id.String() +\n\t\t\"\u0026threadid=\" + post.threadID.String() +\n\t\t\"\u0026postid=\" + post.id.String()\n}\n\nfunc (post *Post) RenderSummary() string {\n\tstr := \"\"\n\tif post.title != \"\" {\n\t\tstr += \"## [\" + summaryOf(post.title, 80) + \"](\" + post.GetURL() + \")\\n\"\n\t\tstr += \"\\n\"\n\t}\n\tstr += post.GetSummary() + \"\\n\"\n\tstr += \"\\\\- \" + displayAddressMD(post.creator) + \",\"\n\tstr += \" [\" + post.createdAt.Format(\"2006-01-02 3:04pm MST\") + \"](\" + post.GetURL() + \")\"\n\tstr += \" \\\\[[x](\" + post.GetDeleteFormURL() + \")]\"\n\tstr += \" (\" + strconv.Itoa(post.replies.Size()) + \" replies)\" + \"\\n\"\n\treturn str\n}\n\nfunc (post *Post) RenderPost(indent string, levels int) string {\n\tif post == nil {\n\t\treturn \"nil post\"\n\t}\n\tstr := \"\"\n\tif post.title != \"\" {\n\t\tstr += indent + \"# \" + post.title + \"\\n\"\n\t\tstr += indent + \"\\n\"\n\t}\n\tstr += indentBody(indent, post.body) + \"\\n\" // TODO: indent body lines.\n\tstr += indent + \"\\\\- \" + displayAddressMD(post.creator) + \", \"\n\tstr += \"[\" + post.createdAt.Format(\"2006-01-02 3:04pm (MST)\") + \"](\" + post.GetURL() + \")\"\n\tstr += \" \\\\[[reply](\" + post.GetReplyFormURL() + \")]\"\n\tstr += \" \\\\[[x](\" + post.GetDeleteFormURL() + \")]\\n\"\n\tif levels \u003e 0 {\n\t\tif post.replies.Size() \u003e 0 {\n\t\t\tpost.replies.Iterate(\"\", \"\", func(n *avl.Tree) bool {\n\t\t\t\tstr += indent + \"\\n\"\n\t\t\t\tstr += n.Value().(*Post).RenderPost(indent+\"\u003e \", levels-1)\n\t\t\t\treturn false\n\t\t\t})\n\t\t}\n\t} else {\n\t\tif post.replies.Size() \u003e 0 {\n\t\t\tstr += indent + \"\\n\"\n\t\t\tstr += indent + \"_[see all \" + strconv.Itoa(post.replies.Size()) + \" replies](\" + post.GetURL() + \")_\\n\"\n\t\t}\n\t}\n\treturn str\n}\n\n// render reply and link to context thread\nfunc (post *Post) RenderInner() string {\n\tif post.IsThread() {\n\t\tpanic(\"unexpected thread\")\n\t}\n\tthreadID := post.threadID\n\t// replyID := post.id\n\tparentID := post.parentID\n\tstr := \"\"\n\tstr += \"_[see thread](\" + post.board.GetURLFromThreadAndReplyID(\n\t\tthreadID, 0) + \")_\\n\\n\"\n\tthread := post.board.GetThread(post.threadID)\n\tvar parent *Post\n\tif thread.id == parentID {\n\t\tparent = thread\n\t} else {\n\t\tparent = thread.GetReply(parentID)\n\t}\n\tstr += parent.RenderPost(\"\", 0)\n\tstr += \"\\n\"\n\tstr += post.RenderPost(\"\u003e \", 5)\n\treturn str\n}\n"
                },
                {
                  "Name": "public.gno",
                  "Body": "package boards\n\nimport (\n\t\"std\"\n\t\"strconv\"\n)\n\n//----------------------------------------\n// Public facing functions\n\nfunc GetBoardIDFromName(name string) (BoardID, bool) {\n\tboardI, exists := gBoardsByName.Get(name)\n\tif !exists {\n\t\treturn 0, false\n\t}\n\treturn boardI.(*Board).id, true\n}\n\nfunc CreateBoard(name string) BoardID {\n\tstd.AssertOriginCall()\n\tbid := incGetBoardID()\n\tcaller := std.GetOrigCaller()\n\tif usernameOf(caller) == \"\" {\n\t\tpanic(\"unauthorized\")\n\t}\n\turl := \"/r/boards:\" + name\n\tboard := newBoard(bid, url, name, caller)\n\tbidkey := boardIDKey(bid)\n\tgBoards.Set(bidkey, board)\n\tgBoardsByName.Set(name, board)\n\treturn board.id\n}\n\nfunc checkAnonFee() bool {\n\tsent := std.GetOrigSend()\n\tanonFeeCoin := std.Coin{\"ugnot\", int64(gDefaultAnonFee)}\n\tif len(sent) == 1 \u0026\u0026 sent[0].IsGTE(anonFeeCoin) {\n\t\treturn true\n\t}\n\treturn false\n}\n\nfunc CreateThread(bid BoardID, title string, body string) PostID {\n\tstd.AssertOriginCall()\n\tcaller := std.GetOrigCaller()\n\tif usernameOf(caller) == \"\" {\n\t\tif !checkAnonFee() {\n\t\t\tpanic(\"please register, otherwise minimum fee \" + strconv.Itoa(gDefaultAnonFee) + \" is required if anonymous\")\n\t\t}\n\t}\n\tboard := getBoard(bid)\n\tif board == nil {\n\t\tpanic(\"board not exist\")\n\t}\n\tthread := board.AddThread(caller, title, body)\n\treturn thread.id\n}\n\nfunc CreateReply(bid BoardID, threadid, postid PostID, body string) PostID {\n\tstd.AssertOriginCall()\n\tcaller := std.GetOrigCaller()\n\tif usernameOf(caller) == \"\" {\n\t\tif !checkAnonFee() {\n\t\t\tpanic(\"please register, otherwise minimum fee \" + strconv.Itoa(gDefaultAnonFee) + \" is required if anonymous\")\n\t\t}\n\t}\n\tboard := getBoard(bid)\n\tif board == nil {\n\t\tpanic(\"board not exist\")\n\t}\n\tthread := board.GetThread(threadid)\n\tif thread == nil {\n\t\tpanic(\"thread not exist\")\n\t}\n\tif postid == threadid {\n\t\treply := thread.AddReply(caller, body)\n\t\treturn reply.id\n\t} else {\n\t\tpost := thread.GetReply(postid)\n\t\treply := post.AddReply(caller, body)\n\t\treturn reply.id\n\t}\n}\n\n// If dstBoard is private, does not ping back.\n// If board specified by bid is private, panics.\nfunc CreateRepost(bid BoardID, postid PostID, title string, body string, dstBoardID BoardID) PostID {\n\tstd.AssertOriginCall()\n\tcaller := std.GetOrigCaller()\n\tif usernameOf(caller) == \"\" {\n\t\t// TODO: allow with gDefaultAnonFee payment.\n\t\tif !checkAnonFee() {\n\t\t\tpanic(\"please register, otherwise minimum fee \" + strconv.Itoa(gDefaultAnonFee) + \" is required if anonymous\")\n\t\t}\n\t}\n\tboard := getBoard(bid)\n\tif board == nil {\n\t\tpanic(\"src board not exist\")\n\t}\n\tif board.IsPrivate() {\n\t\tpanic(\"cannot repost from a private board\")\n\t}\n\tdst := getBoard(dstBoardID)\n\tif dst == nil {\n\t\tpanic(\"dst board not exist\")\n\t}\n\tthread := board.GetThread(postid)\n\tif thread == nil {\n\t\tpanic(\"thread not exist\")\n\t}\n\trepost := thread.AddRepostTo(caller, title, body, dst)\n\treturn repost.id\n}\n\nfunc DeletePost(bid BoardID, threadid, postid PostID, reason string) {\n\tstd.AssertOriginCall()\n\tcaller := std.GetOrigCaller()\n\tboard := getBoard(bid)\n\tif board == nil {\n\t\tpanic(\"board not exist\")\n\t}\n\tthread := board.GetThread(threadid)\n\tif thread == nil {\n\t\tpanic(\"thread not exist\")\n\t}\n\tif postid == threadid {\n\t\t// delete thread\n\t\tif !thread.HasPermission(caller, DeletePermission) {\n\t\t\tpanic(\"unauthorized\")\n\t\t}\n\t\tboard.DeleteThread(threadid)\n\t} else {\n\t\t// delete thread's post\n\t\tpost := thread.GetReply(postid)\n\t\tif post == nil {\n\t\t\tpanic(\"post not exist\")\n\t\t}\n\t\tif !post.HasPermission(caller, DeletePermission) {\n\t\t\tpanic(\"unauthorized\")\n\t\t}\n\t\tthread.DeletePost(postid)\n\t}\n}\n\nfunc EditPost(bid BoardID, threadid, postid PostID, title, body string) {\n\tstd.AssertOriginCall()\n\tcaller := std.GetOrigCaller()\n\tboard := getBoard(bid)\n\tif board == nil {\n\t\tpanic(\"board not exist\")\n\t}\n\tthread := board.GetThread(threadid)\n\tif thread == nil {\n\t\tpanic(\"thread not exist\")\n\t}\n\tif postid == threadid {\n\t\t// edit thread\n\t\tif !thread.HasPermission(caller, EditPermission) {\n\t\t\tpanic(\"unauthorized\")\n\t\t}\n\t\tthread.Update(title, body)\n\t} else {\n\t\t// edit thread's post\n\t\tpost := thread.GetReply(postid)\n\t\tif post == nil {\n\t\t\tpanic(\"post not exist\")\n\t\t}\n\t\tif !post.HasPermission(caller, EditPermission) {\n\t\t\tpanic(\"unauthorized\")\n\t\t}\n\t\tpost.Update(title, body)\n\t}\n}\n"
                },
                {
                  "Name": "render.gno",
                  "Body": "package boards\n\nimport (\n\t\"strconv\"\n\t\"strings\"\n\n\t\"gno.land/p/avl\"\n)\n\n//----------------------------------------\n// Render functions\n\nfunc RenderBoard(bid BoardID) string {\n\tboard := getBoard(bid)\n\tif board == nil {\n\t\treturn \"missing board\"\n\t}\n\treturn board.RenderBoard()\n}\n\nfunc Render(path string) string {\n\tif path == \"\" {\n\t\tstr := \"These are all the boards of this realm:\\n\\n\"\n\t\tgBoards.Iterate(\"\", \"\", func(n *avl.Tree) bool {\n\t\t\tboard := n.Value().(*Board)\n\t\t\tstr += \" * [\" + board.url + \"](\" + board.url + \")\\n\"\n\t\t\treturn false\n\t\t})\n\t\treturn str\n\t}\n\tparts := strings.Split(path, \"/\")\n\tif len(parts) == 1 {\n\t\t// /r/boards:BOARD_NAME\n\t\tname := parts[0]\n\t\tboardI, exists := gBoardsByName.Get(name)\n\t\tif !exists {\n\t\t\treturn \"board does not exist: \" + name\n\t\t}\n\t\treturn boardI.(*Board).RenderBoard()\n\t} else if len(parts) == 2 {\n\t\t// /r/boards:BOARD_NAME/THREAD_ID\n\t\tname := parts[0]\n\t\tboardI, exists := gBoardsByName.Get(name)\n\t\tif !exists {\n\t\t\treturn \"board does not exist: \" + name\n\t\t}\n\t\tpid, err := strconv.Atoi(parts[1])\n\t\tif err != nil {\n\t\t\treturn \"invalid thread id: \" + parts[1]\n\t\t}\n\t\tboard := boardI.(*Board)\n\t\tthread := board.GetThread(PostID(pid))\n\t\tif thread == nil {\n\t\t\treturn \"thread does not exist with id: \" + parts[1]\n\t\t}\n\t\treturn thread.RenderPost(\"\", 5)\n\t} else if len(parts) == 3 {\n\t\t// /r/boards:BOARD_NAME/THREAD_ID/REPLY_ID\n\t\tname := parts[0]\n\t\tboardI, exists := gBoardsByName.Get(name)\n\t\tif !exists {\n\t\t\treturn \"board does not exist: \" + name\n\t\t}\n\t\tpid, err := strconv.Atoi(parts[1])\n\t\tif err != nil {\n\t\t\treturn \"invalid thread id: \" + parts[1]\n\t\t}\n\t\tboard := boardI.(*Board)\n\t\tthread := board.GetThread(PostID(pid))\n\t\tif thread == nil {\n\t\t\treturn \"thread does not exist with id: \" + parts[1]\n\t\t}\n\t\trid, err := strconv.Atoi(parts[2])\n\t\tif err != nil {\n\t\t\treturn \"invalid reply id: \" + parts[2]\n\t\t}\n\t\treply := thread.GetReply(PostID(rid))\n\t\tif reply == nil {\n\t\t\treturn \"reply does not exist with id: \" + parts[2]\n\t\t}\n\t\treturn reply.RenderInner()\n\t} else {\n\t\treturn \"unrecognized path \" + path\n\t}\n}\n"
                },
                {
                  "Name": "role.gno",
                  "Body": "package boards\n\ntype Permission string\n\nconst (\n\tDeletePermission Permission = \"role:delete\"\n\tEditPermission   Permission = \"role:edit\"\n)\n"
                },
                {
                  "Name": "z_0_a_filetest.gno",
                  "Body": "// PKGPATH: gno.land/r/boards_test\npackage boards_test\n\nimport (\n\t\"gno.land/r/boards\"\n)\n\nvar bid boards.BoardID\n\nfunc init() {\n\tbid = boards.CreateBoard(\"test_board\")\n\tboards.CreateThread(bid, \"First Post (title)\", \"Body of the first post. (body)\")\n\tpid := boards.CreateThread(bid, \"Second Post (title)\", \"Body of the second post. (body)\")\n\tboards.CreateReply(bid, pid, pid, \"Reply of the second post\")\n}\n\nfunc main() {\n\tprintln(boards.Render(\"test_board\"))\n}\n\n// Error:\n// unauthorized\n"
                },
                {
                  "Name": "z_0_b_filetest.gno",
                  "Body": "// PKGPATH: gno.land/r/boards_test\npackage boards_test\n\n// SEND: 199000000ugnot\n\nimport (\n\t\"gno.land/r/boards\"\n\t\"gno.land/r/users\"\n)\n\nvar bid boards.BoardID\n\nfunc init() {\n\tusers.Register(\"\", \"gnouser\", \"my profile\")\n\tbid = boards.CreateBoard(\"test_board\")\n}\n\nfunc main() {\n\tprintln(boards.Render(\"test_board\"))\n}\n\n// Error:\n// payment must not be less than 200000000\n"
                },
                {
                  "Name": "z_0_c_filetest.gno",
                  "Body": "// PKGPATH: gno.land/r/boards_test\npackage boards_test\n\n// SEND: 200000000ugnot\n\nimport (\n\t\"gno.land/r/boards\"\n\t\"gno.land/r/users\"\n)\n\nvar bid boards.BoardID\n\nfunc init() {\n\tusers.Register(\"\", \"gnouser\", \"my profile\")\n\tboards.CreateThread(1, \"First Post (title)\", \"Body of the first post. (body)\")\n}\n\nfunc main() {\n\tprintln(boards.Render(\"test_board\"))\n}\n\n// Error:\n// board not exist\n"
                },
                {
                  "Name": "z_0_d_filetest.gno",
                  "Body": "// PKGPATH: gno.land/r/boards_test\npackage boards_test\n\n// SEND: 200000000ugnot\n\nimport (\n\t\"gno.land/r/boards\"\n\t\"gno.land/r/users\"\n)\n\nvar bid boards.BoardID\n\nfunc init() {\n\tusers.Register(\"\", \"gnouser\", \"my profile\")\n\tbid = boards.CreateBoard(\"test_board\")\n\tboards.CreateReply(bid, 0, 0, \"Reply of the second post\")\n}\n\nfunc main() {\n\tprintln(boards.Render(\"test_board\"))\n}\n\n// Error:\n// thread not exist\n"
                },
                {
                  "Name": "z_0_e_filetest.gno",
                  "Body": "// PKGPATH: gno.land/r/boards_test\npackage boards_test\n\n// SEND: 200000000ugnot\n\nimport (\n\t\"gno.land/r/boards\"\n\t\"gno.land/r/users\"\n)\n\nvar bid boards.BoardID\n\nfunc init() {\n\tusers.Register(\"\", \"gnouser\", \"my profile\")\n\tboards.CreateReply(bid, 0, 0, \"Reply of the second post\")\n}\n\nfunc main() {\n\tprintln(boards.Render(\"test_board\"))\n}\n\n// Error:\n// board not exist\n"
                },
                {
                  "Name": "z_0_filetest.gno",
                  "Body": "// PKGPATH: gno.land/r/boards_test\npackage boards_test\n\n// SEND: 200000000ugnot\n\nimport (\n\t\"gno.land/r/boards\"\n\t\"gno.land/r/users\"\n)\n\nvar bid boards.BoardID\n\nfunc init() {\n\tusers.Register(\"\", \"gnouser\", \"my profile\")\n\n\tbid = boards.CreateBoard(\"test_board\")\n\tboards.CreateThread(bid, \"First Post (title)\", \"Body of the first post. (body)\")\n\tpid := boards.CreateThread(bid, \"Second Post (title)\", \"Body of the second post. (body)\")\n\tboards.CreateReply(bid, pid, pid, \"Reply of the second post\")\n}\n\nfunc main() {\n\tprintln(boards.Render(\"test_board\"))\n}\n\n// Output:\n// \\[[post](/r/boards?help\u0026__func=CreateThread\u0026bid=1\u0026body.type=textarea)]\n//\n// ----------------------------------------\n// ## [First Post (title)](/r/boards:test_board/1)\n//\n// Body of the first post. (body)\n// \\- [@gnouser](/r/users:gnouser), [2009-02-13 11:31pm UTC](/r/boards:test_board/1) \\[[x](/r/boards?help\u0026__func=DeletePost\u0026bid=1\u0026threadid=1\u0026postid=1)] (0 replies)\n//\n// ----------------------------------------\n// ## [Second Post (title)](/r/boards:test_board/2)\n//\n// Body of the second post. (body)\n// \\- [@gnouser](/r/users:gnouser), [2009-02-13 11:31pm UTC](/r/boards:test_board/2) \\[[x](/r/boards?help\u0026__func=DeletePost\u0026bid=1\u0026threadid=2\u0026postid=2)] (1 replies)\n"
                },
                {
                  "Name": "z_10_a_filetest.gno",
                  "Body": "// PKGPATH: gno.land/r/boards_test\npackage boards_test\n\n// SEND: 200000000ugnot\n\nimport (\n\t\"strconv\"\n\n\t\"gno.land/r/boards\"\n\t\"gno.land/r/users\"\n)\n\nvar (\n\tbid boards.BoardID\n\tpid boards.PostID\n)\n\nfunc init() {\n\tusers.Register(\"\", \"gnouser\", \"my profile\")\n\n\tbid = boards.CreateBoard(\"test_board\")\n\tpid = boards.CreateThread(bid, \"First Post in (title)\", \"Body of the first post. (body)\")\n}\n\nfunc main() {\n\tprintln(boards.Render(\"test_board/\" + strconv.Itoa(int(pid))))\n\t// boardId 2 not exist\n\tboards.DeletePost(2, pid, pid, \"\")\n\tprintln(\"----------------------------------------------------\")\n\tprintln(boards.Render(\"test_board/\" + strconv.Itoa(int(pid))))\n}\n\n// Error:\n// board not exist\n"
                },
                {
                  "Name": "z_10_b_filetest.gno",
                  "Body": "// PKGPATH: gno.land/r/boards_test\npackage boards_test\n\n// SEND: 2000000000ugnot\n\nimport (\n\t\"strconv\"\n\n\t\"gno.land/r/boards\"\n\t\"gno.land/r/users\"\n)\n\nvar (\n\tbid boards.BoardID\n\tpid boards.PostID\n)\n\nfunc init() {\n\tusers.Register(\"\", \"gnouser\", \"my profile\")\n\n\tbid = boards.CreateBoard(\"test_board\")\n\tpid = boards.CreateThread(bid, \"First Post in (title)\", \"Body of the first post. (body)\")\n}\n\nfunc main() {\n\tprintln(boards.Render(\"test_board/\" + strconv.Itoa(int(pid))))\n\t// pid of 2 not exist\n\tboards.DeletePost(bid, 2, 2, \"\")\n\tprintln(\"----------------------------------------------------\")\n\tprintln(boards.Render(\"test_board/\" + strconv.Itoa(int(pid))))\n}\n\n// Error:\n// thread not exist\n"
                },
                {
                  "Name": "z_10_c_filetest.gno",
                  "Body": "// PKGPATH: gno.land/r/boards_test\npackage boards_test\n\n// SEND: 200000000ugnot\n\nimport (\n\t\"strconv\"\n\n\t\"gno.land/r/boards\"\n\t\"gno.land/r/users\"\n)\n\nvar (\n\tbid boards.BoardID\n\tpid boards.PostID\n\trid boards.PostID\n)\n\nfunc init() {\n\tusers.Register(\"\", \"gnouser\", \"my profile\")\n\n\tbid = boards.CreateBoard(\"test_board\")\n\tpid = boards.CreateThread(bid, \"First Post in (title)\", \"Body of the first post. (body)\")\n\trid = boards.CreateReply(bid, pid, pid, \"First reply of the First post\\n\")\n}\n\nfunc main() {\n\tprintln(boards.Render(\"test_board/\" + strconv.Itoa(int(pid))))\n\tboards.DeletePost(bid, pid, rid, \"\")\n\tprintln(\"----------------------------------------------------\")\n\tprintln(boards.Render(\"test_board/\" + strconv.Itoa(int(pid))))\n}\n\n// Output:\n// # First Post in (title)\n//\n// Body of the first post. (body)\n// \\- [@gnouser](/r/users:gnouser), [2009-02-13 11:31pm (UTC)](/r/boards:test_board/1) \\[[reply](/r/boards?help\u0026__func=CreateReply\u0026bid=1\u0026threadid=1\u0026postid=1\u0026body.type=textarea)] \\[[x](/r/boards?help\u0026__func=DeletePost\u0026bid=1\u0026threadid=1\u0026postid=1)]\n//\n// \u003e First reply of the First post\n// \u003e\n// \u003e \\- [@gnouser](/r/users:gnouser), [2009-02-13 11:31pm (UTC)](/r/boards:test_board/1/2) \\[[reply](/r/boards?help\u0026__func=CreateReply\u0026bid=1\u0026threadid=1\u0026postid=2\u0026body.type=textarea)] \\[[x](/r/boards?help\u0026__func=DeletePost\u0026bid=1\u0026threadid=1\u0026postid=2)]\n//\n// ----------------------------------------------------\n// # First Post in (title)\n//\n// Body of the first post. (body)\n// \\- [@gnouser](/r/users:gnouser), [2009-02-13 11:31pm (UTC)](/r/boards:test_board/1) \\[[reply](/r/boards?help\u0026__func=CreateReply\u0026bid=1\u0026threadid=1\u0026postid=1\u0026body.type=textarea)] \\[[x](/r/boards?help\u0026__func=DeletePost\u0026bid=1\u0026threadid=1\u0026postid=1)]\n"
                },
                {
                  "Name": "z_10_filetest.gno",
                  "Body": "// PKGPATH: gno.land/r/boards_test\npackage boards_test\n\n// SEND: 200000000ugnot\n\nimport (\n\t\"strconv\"\n\n\t\"gno.land/r/boards\"\n\t\"gno.land/r/users\"\n)\n\nvar (\n\tbid boards.BoardID\n\tpid boards.PostID\n)\n\nfunc init() {\n\tusers.Register(\"\", \"gnouser\", \"my profile\")\n\n\tbid = boards.CreateBoard(\"test_board\")\n\tpid = boards.CreateThread(bid, \"First Post in (title)\", \"Body of the first post. (body)\")\n}\n\nfunc main() {\n\tprintln(boards.Render(\"test_board/\" + strconv.Itoa(int(pid))))\n\tboards.DeletePost(bid, pid, pid, \"\")\n\tprintln(\"----------------------------------------------------\")\n\tprintln(boards.Render(\"test_board/\" + strconv.Itoa(int(pid))))\n}\n\n// Output:\n// # First Post in (title)\n//\n// Body of the first post. (body)\n// \\- [@gnouser](/r/users:gnouser), [2009-02-13 11:31pm (UTC)](/r/boards:test_board/1) \\[[reply](/r/boards?help\u0026__func=CreateReply\u0026bid=1\u0026threadid=1\u0026postid=1\u0026body.type=textarea)] \\[[x](/r/boards?help\u0026__func=DeletePost\u0026bid=1\u0026threadid=1\u0026postid=1)]\n//\n// ----------------------------------------------------\n// thread does not exist with id: 1\n"
                },
                {
                  "Name": "z_11_a_filetest.gno",
                  "Body": "// PKGPATH: gno.land/r/boards_test\npackage boards_test\n\n// SEND: 2000000000ugnot\n\nimport (\n\t\"strconv\"\n\n\t\"gno.land/r/boards\"\n\t\"gno.land/r/users\"\n)\n\nvar (\n\tbid boards.BoardID\n\tpid boards.PostID\n)\n\nfunc init() {\n\tusers.Register(\"\", \"gnouser\", \"my profile\")\n\n\tbid = boards.CreateBoard(\"test_board\")\n\tpid = boards.CreateThread(bid, \"First Post in (title)\", \"Body of the first post. (body)\")\n}\n\nfunc main() {\n\tprintln(boards.Render(\"test_board/\" + strconv.Itoa(int(pid))))\n\t// board 2 not exist\n\tboards.EditPost(2, pid, pid, \"Edited: First Post in (title)\", \"Edited: Body of the first post. (body)\")\n\tprintln(\"----------------------------------------------------\")\n\tprintln(boards.Render(\"test_board/\" + strconv.Itoa(int(pid))))\n}\n\n// Error:\n// board not exist\n"
                },
                {
                  "Name": "z_11_b_filetest.gno",
                  "Body": "// PKGPATH: gno.land/r/boards_test\npackage boards_test\n\n// SEND: 2000000000ugnot\n\nimport (\n\t\"strconv\"\n\n\t\"gno.land/r/boards\"\n\t\"gno.land/r/users\"\n)\n\nvar (\n\tbid boards.BoardID\n\tpid boards.PostID\n)\n\nfunc init() {\n\tusers.Register(\"\", \"gnouser\", \"my profile\")\n\n\tbid = boards.CreateBoard(\"test_board\")\n\tpid = boards.CreateThread(bid, \"First Post in (title)\", \"Body of the first post. (body)\")\n}\n\nfunc main() {\n\tprintln(boards.Render(\"test_board/\" + strconv.Itoa(int(pid))))\n\t// thread 2 not exist\n\tboards.EditPost(bid, 2, pid, \"Edited: First Post in (title)\", \"Edited: Body of the first post. (body)\")\n\tprintln(\"----------------------------------------------------\")\n\tprintln(boards.Render(\"test_board/\" + strconv.Itoa(int(pid))))\n}\n\n// Error:\n// thread not exist\n"
                },
                {
                  "Name": "z_11_c_filetest.gno",
                  "Body": "// PKGPATH: gno.land/r/boards_test\npackage boards_test\n\n// SEND: 2000000000ugnot\n\nimport (\n\t\"strconv\"\n\n\t\"gno.land/r/boards\"\n\t\"gno.land/r/users\"\n)\n\nvar (\n\tbid boards.BoardID\n\tpid boards.PostID\n)\n\nfunc init() {\n\tusers.Register(\"\", \"gnouser\", \"my profile\")\n\n\tbid = boards.CreateBoard(\"test_board\")\n\tpid = boards.CreateThread(bid, \"First Post in (title)\", \"Body of the first post. (body)\")\n}\n\nfunc main() {\n\tprintln(boards.Render(\"test_board/\" + strconv.Itoa(int(pid))))\n\t// post 2 not exist\n\tboards.EditPost(bid, pid, 2, \"Edited: First Post in (title)\", \"Edited: Body of the first post. (body)\")\n\tprintln(\"----------------------------------------------------\")\n\tprintln(boards.Render(\"test_board/\" + strconv.Itoa(int(pid))))\n}\n\n// Error:\n// post not exist\n"
                },
                {
                  "Name": "z_11_d_filetest.gno",
                  "Body": "// PKGPATH: gno.land/r/boards_test\npackage boards_test\n\n// SEND: 2000000000ugnot\n\nimport (\n\t\"strconv\"\n\n\t\"gno.land/r/boards\"\n\t\"gno.land/r/users\"\n)\n\nvar (\n\tbid boards.BoardID\n\tpid boards.PostID\n\trid boards.PostID\n)\n\nfunc init() {\n\tusers.Register(\"\", \"gnouser\", \"my profile\")\n\n\tbid = boards.CreateBoard(\"test_board\")\n\tpid = boards.CreateThread(bid, \"First Post in (title)\", \"Body of the first post. (body)\")\n\trid = boards.CreateReply(bid, pid, pid, \"First reply of the First post\\n\")\n}\n\nfunc main() {\n\tprintln(boards.Render(\"test_board/\" + strconv.Itoa(int(pid))))\n\tboards.EditPost(bid, pid, rid, \"\", \"Edited: First reply of the First post\\n\")\n\tprintln(\"----------------------------------------------------\")\n\tprintln(boards.Render(\"test_board/\" + strconv.Itoa(int(pid))))\n}\n\n// Output:\n// # First Post in (title)\n//\n// Body of the first post. (body)\n// \\- [@gnouser](/r/users:gnouser), [2009-02-13 11:31pm (UTC)](/r/boards:test_board/1) \\[[reply](/r/boards?help\u0026__func=CreateReply\u0026bid=1\u0026threadid=1\u0026postid=1\u0026body.type=textarea)] \\[[x](/r/boards?help\u0026__func=DeletePost\u0026bid=1\u0026threadid=1\u0026postid=1)]\n//\n// \u003e First reply of the First post\n// \u003e\n// \u003e \\- [@gnouser](/r/users:gnouser), [2009-02-13 11:31pm (UTC)](/r/boards:test_board/1/2) \\[[reply](/r/boards?help\u0026__func=CreateReply\u0026bid=1\u0026threadid=1\u0026postid=2\u0026body.type=textarea)] \\[[x](/r/boards?help\u0026__func=DeletePost\u0026bid=1\u0026threadid=1\u0026postid=2)]\n//\n// ----------------------------------------------------\n// # First Post in (title)\n//\n// Body of the first post. (body)\n// \\- [@gnouser](/r/users:gnouser), [2009-02-13 11:31pm (UTC)](/r/boards:test_board/1) \\[[reply](/r/boards?help\u0026__func=CreateReply\u0026bid=1\u0026threadid=1\u0026postid=1\u0026body.type=textarea)] \\[[x](/r/boards?help\u0026__func=DeletePost\u0026bid=1\u0026threadid=1\u0026postid=1)]\n//\n// \u003e Edited: First reply of the First post\n// \u003e\n// \u003e \\- [@gnouser](/r/users:gnouser), [2009-02-13 11:31pm (UTC)](/r/boards:test_board/1/2) \\[[reply](/r/boards?help\u0026__func=CreateReply\u0026bid=1\u0026threadid=1\u0026postid=2\u0026body.type=textarea)] \\[[x](/r/boards?help\u0026__func=DeletePost\u0026bid=1\u0026threadid=1\u0026postid=2)]\n"
                },
                {
                  "Name": "z_11_filetest.gno",
                  "Body": "// PKGPATH: gno.land/r/boards_test\npackage boards_test\n\n// SEND: 2000000000ugnot\n\nimport (\n\t\"strconv\"\n\n\t\"gno.land/r/boards\"\n\t\"gno.land/r/users\"\n)\n\nvar (\n\tbid boards.BoardID\n\tpid boards.PostID\n)\n\nfunc init() {\n\tusers.Register(\"\", \"gnouser\", \"my profile\")\n\n\tbid = boards.CreateBoard(\"test_board\")\n\tpid = boards.CreateThread(bid, \"First Post in (title)\", \"Body of the first post. (body)\")\n}\n\nfunc main() {\n\tprintln(boards.Render(\"test_board/\" + strconv.Itoa(int(pid))))\n\tboards.EditPost(bid, pid, pid, \"Edited: First Post in (title)\", \"Edited: Body of the first post. (body)\")\n\tprintln(\"----------------------------------------------------\")\n\tprintln(boards.Render(\"test_board/\" + strconv.Itoa(int(pid))))\n}\n\n// Output:\n// # First Post in (title)\n//\n// Body of the first post. (body)\n// \\- [@gnouser](/r/users:gnouser), [2009-02-13 11:31pm (UTC)](/r/boards:test_board/1) \\[[reply](/r/boards?help\u0026__func=CreateReply\u0026bid=1\u0026threadid=1\u0026postid=1\u0026body.type=textarea)] \\[[x](/r/boards?help\u0026__func=DeletePost\u0026bid=1\u0026threadid=1\u0026postid=1)]\n//\n// ----------------------------------------------------\n// # Edited: First Post in (title)\n//\n// Edited: Body of the first post. (body)\n// \\- [@gnouser](/r/users:gnouser), [2009-02-13 11:31pm (UTC)](/r/boards:test_board/1) \\[[reply](/r/boards?help\u0026__func=CreateReply\u0026bid=1\u0026threadid=1\u0026postid=1\u0026body.type=textarea)] \\[[x](/r/boards?help\u0026__func=DeletePost\u0026bid=1\u0026threadid=1\u0026postid=1)]\n"
                },
                {
                  "Name": "z_1_filetest.gno",
                  "Body": "// PKGPATH: gno.land/r/boards_test\npackage boards_test\n\n// SEND: 200000000ugnot\n\nimport (\n\t\"gno.land/r/boards\"\n\t\"gno.land/r/users\"\n)\n\nvar board *boards.Board\n\nfunc init() {\n\tusers.Register(\"\", \"gnouser\", \"my profile\")\n\n\t_ = boards.CreateBoard(\"test_board_1\")\n\t_ = boards.CreateBoard(\"test_board_2\")\n}\n\nfunc main() {\n\tprintln(boards.Render(\"\"))\n}\n\n// Output:\n// These are all the boards of this realm:\n//\n//  * [/r/boards:test_board_1](/r/boards:test_board_1)\n//  * [/r/boards:test_board_2](/r/boards:test_board_2)\n"
                },
                {
                  "Name": "z_2_filetest.gno",
                  "Body": "// PKGPATH: gno.land/r/boards_test\npackage boards_test\n\n// SEND: 200000000ugnot\n\nimport (\n\t\"strconv\"\n\n\t\"gno.land/r/boards\"\n\t\"gno.land/r/users\"\n)\n\nvar (\n\tbid boards.BoardID\n\tpid boards.PostID\n)\n\nfunc init() {\n\tusers.Register(\"\", \"gnouser\", \"my profile\")\n\n\tbid = boards.CreateBoard(\"test_board\")\n\tboards.CreateThread(bid, \"First Post (title)\", \"Body of the first post. (body)\")\n\tpid = boards.CreateThread(bid, \"Second Post (title)\", \"Body of the second post. (body)\")\n\tboards.CreateReply(bid, pid, pid, \"Reply of the second post\")\n}\n\nfunc main() {\n\tprintln(boards.Render(\"test_board/\" + strconv.Itoa(int(pid))))\n}\n\n// Output:\n// # Second Post (title)\n//\n// Body of the second post. (body)\n// \\- [@gnouser](/r/users:gnouser), [2009-02-13 11:31pm (UTC)](/r/boards:test_board/2) \\[[reply](/r/boards?help\u0026__func=CreateReply\u0026bid=1\u0026threadid=2\u0026postid=2\u0026body.type=textarea)] \\[[x](/r/boards?help\u0026__func=DeletePost\u0026bid=1\u0026threadid=2\u0026postid=2)]\n//\n// \u003e Reply of the second post\n// \u003e \\- [@gnouser](/r/users:gnouser), [2009-02-13 11:31pm (UTC)](/r/boards:test_board/2/3) \\[[reply](/r/boards?help\u0026__func=CreateReply\u0026bid=1\u0026threadid=2\u0026postid=3\u0026body.type=textarea)] \\[[x](/r/boards?help\u0026__func=DeletePost\u0026bid=1\u0026threadid=2\u0026postid=3)]\n"
                },
                {
                  "Name": "z_3_filetest.gno",
                  "Body": "// PKGPATH: gno.land/r/boards_test\npackage boards_test\n\n// SEND: 200000000ugnot\n\nimport (\n\t\"strconv\"\n\n\t\"gno.land/r/boards\"\n\t\"gno.land/r/users\"\n)\n\nvar (\n\tbid boards.BoardID\n\tpid boards.PostID\n)\n\nfunc init() {\n\tusers.Register(\"\", \"gnouser\", \"my profile\")\n\n\tbid = boards.CreateBoard(\"test_board\")\n\tboards.CreateThread(bid, \"First Post (title)\", \"Body of the first post. (body)\")\n\tpid = boards.CreateThread(bid, \"Second Post (title)\", \"Body of the second post. (body)\")\n}\n\nfunc main() {\n\trid := boards.CreateReply(bid, pid, pid, \"Reply of the second post\")\n\tprintln(rid)\n\tprintln(boards.Render(\"test_board/\" + strconv.Itoa(int(pid))))\n}\n\n// Output:\n// 3\n// # Second Post (title)\n//\n// Body of the second post. (body)\n// \\- [@gnouser](/r/users:gnouser), [2009-02-13 11:31pm (UTC)](/r/boards:test_board/2) \\[[reply](/r/boards?help\u0026__func=CreateReply\u0026bid=1\u0026threadid=2\u0026postid=2\u0026body.type=textarea)] \\[[x](/r/boards?help\u0026__func=DeletePost\u0026bid=1\u0026threadid=2\u0026postid=2)]\n//\n// \u003e Reply of the second post\n// \u003e \\- [@gnouser](/r/users:gnouser), [2009-02-13 11:31pm (UTC)](/r/boards:test_board/2/3) \\[[reply](/r/boards?help\u0026__func=CreateReply\u0026bid=1\u0026threadid=2\u0026postid=3\u0026body.type=textarea)] \\[[x](/r/boards?help\u0026__func=DeletePost\u0026bid=1\u0026threadid=2\u0026postid=3)]\n"
                },
                {
                  "Name": "z_4_filetest.gno",
                  "Body": "// PKGPATH: gno.land/r/boards_test\npackage boards_test\n\n// SEND: 200000000ugnot\n\nimport (\n\t\"strconv\"\n\n\t\"gno.land/r/boards\"\n\t\"gno.land/r/users\"\n)\n\nvar (\n\tbid boards.BoardID\n\tpid boards.PostID\n)\n\nfunc init() {\n\tusers.Register(\"\", \"gnouser\", \"my profile\")\n\n\tbid = boards.CreateBoard(\"test_board\")\n\tboards.CreateThread(bid, \"First Post (title)\", \"Body of the first post. (body)\")\n\tpid = boards.CreateThread(bid, \"Second Post (title)\", \"Body of the second post. (body)\")\n\trid := boards.CreateReply(bid, pid, pid, \"Reply of the second post\")\n\tprintln(rid)\n}\n\nfunc main() {\n\trid2 := boards.CreateReply(bid, pid, pid, \"Second reply of the second post\")\n\tprintln(rid2)\n\tprintln(boards.Render(\"test_board/\" + strconv.Itoa(int(pid))))\n}\n\n// Output:\n// 3\n// 4\n// # Second Post (title)\n//\n// Body of the second post. (body)\n// \\- [@gnouser](/r/users:gnouser), [2009-02-13 11:31pm (UTC)](/r/boards:test_board/2) \\[[reply](/r/boards?help\u0026__func=CreateReply\u0026bid=1\u0026threadid=2\u0026postid=2\u0026body.type=textarea)] \\[[x](/r/boards?help\u0026__func=DeletePost\u0026bid=1\u0026threadid=2\u0026postid=2)]\n//\n// \u003e Reply of the second post\n// \u003e \\- [@gnouser](/r/users:gnouser), [2009-02-13 11:31pm (UTC)](/r/boards:test_board/2/3) \\[[reply](/r/boards?help\u0026__func=CreateReply\u0026bid=1\u0026threadid=2\u0026postid=3\u0026body.type=textarea)] \\[[x](/r/boards?help\u0026__func=DeletePost\u0026bid=1\u0026threadid=2\u0026postid=3)]\n//\n// \u003e Second reply of the second post\n// \u003e \\- [@gnouser](/r/users:gnouser), [2009-02-13 11:31pm (UTC)](/r/boards:test_board/2/4) \\[[reply](/r/boards?help\u0026__func=CreateReply\u0026bid=1\u0026threadid=2\u0026postid=4\u0026body.type=textarea)] \\[[x](/r/boards?help\u0026__func=DeletePost\u0026bid=1\u0026threadid=2\u0026postid=4)]\n\n// Realm:\n// switchrealm[\"gno.land/r/users\"]\n// switchrealm[\"gno.land/r/users\"]\n// switchrealm[\"gno.land/r/boards\"]\n// u[960d1737342909c1a4c32a4a93a88e680a6f79df:100]={\n//     \"Fields\": [\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"16\"\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.StringValue\",\n//                 \"value\": \"0000000003\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/r/boards.Post\"\n//                 }\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.PointerValue\",\n//                 \"Base\": null,\n//                 \"Index\": \"0\",\n//                 \"TV\": {\n//                     \"T\": {\n//                         \"@type\": \"/gno.RefType\",\n//                         \"ID\": \"gno.land/r/boards.Post\"\n//                     },\n//                     \"V\": {\n//                         \"@type\": \"/gno.RefValue\",\n//                         \"Escaped\": true,\n//                         \"ObjectID\": \"960d1737342909c1a4c32a4a93a88e680a6f79df:101\"\n//                     }\n//                 }\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"64\"\n//             }\n//         },\n//         {\n//             \"N\": \"AQAAAAAAAAA=\",\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"32\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/avl.Tree\"\n//                 }\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/avl.Tree\"\n//                 }\n//             }\n//         }\n//     ],\n//     \"ObjectInfo\": {\n//         \"ID\": \"960d1737342909c1a4c32a4a93a88e680a6f79df:100\",\n//         \"ModTime\": \"108\",\n//         \"OwnerID\": \"960d1737342909c1a4c32a4a93a88e680a6f79df:108\",\n//         \"RefCount\": \"1\"\n//     }\n// }\n// c[960d1737342909c1a4c32a4a93a88e680a6f79df:109]={\n//     \"Fields\": [\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"16\"\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.StringValue\",\n//                 \"value\": \"0000000004\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/r/boards.Post\"\n//                 }\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.PointerValue\",\n//                 \"Base\": null,\n//                 \"Index\": \"0\",\n//                 \"TV\": {\n//                     \"T\": {\n//                         \"@type\": \"/gno.RefType\",\n//                         \"ID\": \"gno.land/r/boards.Post\"\n//                     },\n//                     \"V\": {\n//                         \"@type\": \"/gno.RefValue\",\n//                         \"Escaped\": true,\n//                         \"ObjectID\": \"960d1737342909c1a4c32a4a93a88e680a6f79df:110\"\n//                     }\n//                 }\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"64\"\n//             }\n//         },\n//         {\n//             \"N\": \"AQAAAAAAAAA=\",\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"32\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/avl.Tree\"\n//                 }\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/avl.Tree\"\n//                 }\n//             }\n//         }\n//     ],\n//     \"ObjectInfo\": {\n//         \"ID\": \"960d1737342909c1a4c32a4a93a88e680a6f79df:109\",\n//         \"ModTime\": \"0\",\n//         \"OwnerID\": \"960d1737342909c1a4c32a4a93a88e680a6f79df:108\",\n//         \"RefCount\": \"1\"\n//     }\n// }\n// c[960d1737342909c1a4c32a4a93a88e680a6f79df:108]={\n//     \"Fields\": [\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"16\"\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.StringValue\",\n//                 \"value\": \"0000000004\"\n//             }\n//         },\n//         {},\n//         {\n//             \"N\": \"AQAAAAAAAAA=\",\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"64\"\n//             }\n//         },\n//         {\n//             \"N\": \"AgAAAAAAAAA=\",\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"32\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/avl.Tree\"\n//                 }\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.PointerValue\",\n//                 \"Base\": null,\n//                 \"Index\": \"0\",\n//                 \"TV\": {\n//                     \"T\": {\n//                         \"@type\": \"/gno.RefType\",\n//                         \"ID\": \"gno.land/p/avl.Tree\"\n//                     },\n//                     \"V\": {\n//                         \"@type\": \"/gno.RefValue\",\n//                         \"Hash\": \"30b68ab0ff1c7e12e439a25e830b5b412bb54dac\",\n//                         \"ObjectID\": \"960d1737342909c1a4c32a4a93a88e680a6f79df:100\"\n//                     }\n//                 }\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/avl.Tree\"\n//                 }\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.PointerValue\",\n//                 \"Base\": null,\n//                 \"Index\": \"0\",\n//                 \"TV\": {\n//                     \"T\": {\n//                         \"@type\": \"/gno.RefType\",\n//                         \"ID\": \"gno.land/p/avl.Tree\"\n//                     },\n//                     \"V\": {\n//                         \"@type\": \"/gno.RefValue\",\n//                         \"Hash\": \"ef138f7c722aa28e7cb461c6f2f679bb62ffd059\",\n//                         \"ObjectID\": \"960d1737342909c1a4c32a4a93a88e680a6f79df:109\"\n//                     }\n//                 }\n//             }\n//         }\n//     ],\n//     \"ObjectInfo\": {\n//         \"ID\": \"960d1737342909c1a4c32a4a93a88e680a6f79df:108\",\n//         \"ModTime\": \"0\",\n//         \"OwnerID\": \"960d1737342909c1a4c32a4a93a88e680a6f79df:95\",\n//         \"RefCount\": \"1\"\n//     }\n// }\n// c[960d1737342909c1a4c32a4a93a88e680a6f79df:111]={\n//     \"Fields\": [\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/avl.Tree\"\n//                 }\n//             }\n//         }\n//     ],\n//     \"ObjectInfo\": {\n//         \"ID\": \"960d1737342909c1a4c32a4a93a88e680a6f79df:111\",\n//         \"ModTime\": \"0\",\n//         \"OwnerID\": \"960d1737342909c1a4c32a4a93a88e680a6f79df:110\",\n//         \"RefCount\": \"1\"\n//     }\n// }\n// c[960d1737342909c1a4c32a4a93a88e680a6f79df:112]={\n//     \"Fields\": [\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/avl.Tree\"\n//                 }\n//             }\n//         }\n//     ],\n//     \"ObjectInfo\": {\n//         \"ID\": \"960d1737342909c1a4c32a4a93a88e680a6f79df:112\",\n//         \"ModTime\": \"0\",\n//         \"OwnerID\": \"960d1737342909c1a4c32a4a93a88e680a6f79df:110\",\n//         \"RefCount\": \"1\"\n//     }\n// }\n// c[960d1737342909c1a4c32a4a93a88e680a6f79df:113]={\n//     \"Fields\": [\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/avl.Tree\"\n//                 }\n//             }\n//         }\n//     ],\n//     \"ObjectInfo\": {\n//         \"ID\": \"960d1737342909c1a4c32a4a93a88e680a6f79df:113\",\n//         \"ModTime\": \"0\",\n//         \"OwnerID\": \"960d1737342909c1a4c32a4a93a88e680a6f79df:110\",\n//         \"RefCount\": \"1\"\n//     }\n// }\n// c[960d1737342909c1a4c32a4a93a88e680a6f79df:114]={\n//     \"Fields\": [\n//         {\n//             \"N\": \"AAAAgJSeXbo=\",\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"65536\"\n//             }\n//         },\n//         {\n//             \"N\": \"AQAAAAAAAAA=\",\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"512\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"time.Location\"\n//                 }\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.PointerValue\",\n//                 \"Base\": {\n//                     \"@type\": \"/gno.RefValue\",\n//                     \"Escaped\": true,\n//                     \"ObjectID\": \"336074805fc853987abe6f7fe3ad97a6a6f3077a:2\"\n//                 },\n//                 \"Index\": \"188\",\n//                 \"TV\": null\n//             }\n//         }\n//     ],\n//     \"ObjectInfo\": {\n//         \"ID\": \"960d1737342909c1a4c32a4a93a88e680a6f79df:114\",\n//         \"ModTime\": \"0\",\n//         \"OwnerID\": \"960d1737342909c1a4c32a4a93a88e680a6f79df:110\",\n//         \"RefCount\": \"1\"\n//     }\n// }\n// c[960d1737342909c1a4c32a4a93a88e680a6f79df:115]={\n//     \"Fields\": [\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"65536\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"1024\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"time.Location\"\n//                 }\n//             }\n//         }\n//     ],\n//     \"ObjectInfo\": {\n//         \"ID\": \"960d1737342909c1a4c32a4a93a88e680a6f79df:115\",\n//         \"ModTime\": \"0\",\n//         \"OwnerID\": \"960d1737342909c1a4c32a4a93a88e680a6f79df:110\",\n//         \"RefCount\": \"1\"\n//     }\n// }\n// c[960d1737342909c1a4c32a4a93a88e680a6f79df:110]={\n//     \"Fields\": [\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/r/boards.Board\"\n//                 }\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.PointerValue\",\n//                 \"Base\": null,\n//                 \"Index\": \"0\",\n//                 \"TV\": {\n//                     \"T\": {\n//                         \"@type\": \"/gno.RefType\",\n//                         \"ID\": \"gno.land/r/boards.Board\"\n//                     },\n//                     \"V\": {\n//                         \"@type\": \"/gno.RefValue\",\n//                         \"Escaped\": true,\n//                         \"ObjectID\": \"960d1737342909c1a4c32a4a93a88e680a6f79df:81\"\n//                     }\n//                 }\n//             }\n//         },\n//         {\n//             \"N\": \"BAAAAAAAAAA=\",\n//             \"T\": {\n//                 \"@type\": \"/gno.RefType\",\n//                 \"ID\": \"gno.land/r/boards.PostID\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.RefType\",\n//                 \"ID\": \"std.Address\"\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.StringValue\",\n//                 \"value\": \"g1arjyc64rpthwn8zhxtzjvearm5scy43y7vm985\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"16\"\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.StringValue\",\n//                 \"value\": \"\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"16\"\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.StringValue\",\n//                 \"value\": \"Second reply of the second post\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/avl.MutTree\"\n//                 }\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.PointerValue\",\n//                 \"Base\": null,\n//                 \"Index\": \"0\",\n//                 \"TV\": {\n//                     \"T\": {\n//                         \"@type\": \"/gno.RefType\",\n//                         \"ID\": \"gno.land/p/avl.MutTree\"\n//                     },\n//                     \"V\": {\n//                         \"@type\": \"/gno.RefValue\",\n//                         \"Hash\": \"90930d8e3ac880ae7764faa6b328302f3d4108a9\",\n//                         \"ObjectID\": \"960d1737342909c1a4c32a4a93a88e680a6f79df:111\"\n//                     }\n//                 }\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/avl.MutTree\"\n//                 }\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.PointerValue\",\n//                 \"Base\": null,\n//                 \"Index\": \"0\",\n//                 \"TV\": {\n//                     \"T\": {\n//                         \"@type\": \"/gno.RefType\",\n//                         \"ID\": \"gno.land/p/avl.MutTree\"\n//                     },\n//                     \"V\": {\n//                         \"@type\": \"/gno.RefValue\",\n//                         \"Hash\": \"a2adbfbb3c0d49e8e94e609a06a478a7f41cf8c4\",\n//                         \"ObjectID\": \"960d1737342909c1a4c32a4a93a88e680a6f79df:112\"\n//                     }\n//                 }\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/avl.MutTree\"\n//                 }\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.PointerValue\",\n//                 \"Base\": null,\n//                 \"Index\": \"0\",\n//                 \"TV\": {\n//                     \"T\": {\n//                         \"@type\": \"/gno.RefType\",\n//                         \"ID\": \"gno.land/p/avl.MutTree\"\n//                     },\n//                     \"V\": {\n//                         \"@type\": \"/gno.RefValue\",\n//                         \"Hash\": \"d0a7af58a0e2ee1c98e31ab67f730c490c577010\",\n//                         \"ObjectID\": \"960d1737342909c1a4c32a4a93a88e680a6f79df:113\"\n//                     }\n//                 }\n//             }\n//         },\n//         {\n//             \"N\": \"AgAAAAAAAAA=\",\n//             \"T\": {\n//                 \"@type\": \"/gno.RefType\",\n//                 \"ID\": \"gno.land/r/boards.PostID\"\n//             }\n//         },\n//         {\n//             \"N\": \"AgAAAAAAAAA=\",\n//             \"T\": {\n//                 \"@type\": \"/gno.RefType\",\n//                 \"ID\": \"gno.land/r/boards.PostID\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.RefType\",\n//                 \"ID\": \"gno.land/r/boards.BoardID\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.RefType\",\n//                 \"ID\": \"time.Time\"\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.RefValue\",\n//                 \"Hash\": \"669fe6b45f57653fbcd87c4b3d638ac264b041eb\",\n//                 \"ObjectID\": \"960d1737342909c1a4c32a4a93a88e680a6f79df:114\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.RefType\",\n//                 \"ID\": \"time.Time\"\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.RefValue\",\n//                 \"Hash\": \"956ed601bfc25c82d9fa0f8b00562ac3f3c175ac\",\n//                 \"ObjectID\": \"960d1737342909c1a4c32a4a93a88e680a6f79df:115\"\n//             }\n//         }\n//     ],\n//     \"ObjectInfo\": {\n//         \"ID\": \"960d1737342909c1a4c32a4a93a88e680a6f79df:110\",\n//         \"IsEscaped\": true,\n//         \"ModTime\": \"0\",\n//         \"RefCount\": \"2\"\n//     }\n// }\n// u[960d1737342909c1a4c32a4a93a88e680a6f79df:107]={\n//     \"Fields\": [\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"16\"\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.StringValue\",\n//                 \"value\": \"0000000003\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/r/boards.Post\"\n//                 }\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.PointerValue\",\n//                 \"Base\": null,\n//                 \"Index\": \"0\",\n//                 \"TV\": {\n//                     \"T\": {\n//                         \"@type\": \"/gno.RefType\",\n//                         \"ID\": \"gno.land/r/boards.Post\"\n//                     },\n//                     \"V\": {\n//                         \"@type\": \"/gno.RefValue\",\n//                         \"Escaped\": true,\n//                         \"ObjectID\": \"960d1737342909c1a4c32a4a93a88e680a6f79df:101\"\n//                     }\n//                 }\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"64\"\n//             }\n//         },\n//         {\n//             \"N\": \"AQAAAAAAAAA=\",\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"32\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/avl.Tree\"\n//                 }\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/avl.Tree\"\n//                 }\n//             }\n//         }\n//     ],\n//     \"ObjectInfo\": {\n//         \"ID\": \"960d1737342909c1a4c32a4a93a88e680a6f79df:107\",\n//         \"ModTime\": \"116\",\n//         \"OwnerID\": \"960d1737342909c1a4c32a4a93a88e680a6f79df:116\",\n//         \"RefCount\": \"1\"\n//     }\n// }\n// c[960d1737342909c1a4c32a4a93a88e680a6f79df:117]={\n//     \"Fields\": [\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"16\"\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.StringValue\",\n//                 \"value\": \"0000000004\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/r/boards.Post\"\n//                 }\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.PointerValue\",\n//                 \"Base\": null,\n//                 \"Index\": \"0\",\n//                 \"TV\": {\n//                     \"T\": {\n//                         \"@type\": \"/gno.RefType\",\n//                         \"ID\": \"gno.land/r/boards.Post\"\n//                     },\n//                     \"V\": {\n//                         \"@type\": \"/gno.RefValue\",\n//                         \"Escaped\": true,\n//                         \"ObjectID\": \"960d1737342909c1a4c32a4a93a88e680a6f79df:110\"\n//                     }\n//                 }\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"64\"\n//             }\n//         },\n//         {\n//             \"N\": \"AQAAAAAAAAA=\",\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"32\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/avl.Tree\"\n//                 }\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/avl.Tree\"\n//                 }\n//             }\n//         }\n//     ],\n//     \"ObjectInfo\": {\n//         \"ID\": \"960d1737342909c1a4c32a4a93a88e680a6f79df:117\",\n//         \"ModTime\": \"0\",\n//         \"OwnerID\": \"960d1737342909c1a4c32a4a93a88e680a6f79df:116\",\n//         \"RefCount\": \"1\"\n//     }\n// }\n// c[960d1737342909c1a4c32a4a93a88e680a6f79df:116]={\n//     \"Fields\": [\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"16\"\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.StringValue\",\n//                 \"value\": \"0000000004\"\n//             }\n//         },\n//         {},\n//         {\n//             \"N\": \"AQAAAAAAAAA=\",\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"64\"\n//             }\n//         },\n//         {\n//             \"N\": \"AgAAAAAAAAA=\",\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"32\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/avl.Tree\"\n//                 }\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.PointerValue\",\n//                 \"Base\": null,\n//                 \"Index\": \"0\",\n//                 \"TV\": {\n//                     \"T\": {\n//                         \"@type\": \"/gno.RefType\",\n//                         \"ID\": \"gno.land/p/avl.Tree\"\n//                     },\n//                     \"V\": {\n//                         \"@type\": \"/gno.RefValue\",\n//                         \"Hash\": \"59f7db389106672d2c6cb709d6a487fb6884648b\",\n//                         \"ObjectID\": \"960d1737342909c1a4c32a4a93a88e680a6f79df:107\"\n//                     }\n//                 }\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/avl.Tree\"\n//                 }\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.PointerValue\",\n//                 \"Base\": null,\n//                 \"Index\": \"0\",\n//                 \"TV\": {\n//                     \"T\": {\n//                         \"@type\": \"/gno.RefType\",\n//                         \"ID\": \"gno.land/p/avl.Tree\"\n//                     },\n//                     \"V\": {\n//                         \"@type\": \"/gno.RefValue\",\n//                         \"Hash\": \"00638fbd1a9d01b2e7848d10b14efc1a4d9762a0\",\n//                         \"ObjectID\": \"960d1737342909c1a4c32a4a93a88e680a6f79df:117\"\n//                     }\n//                 }\n//             }\n//         }\n//     ],\n//     \"ObjectInfo\": {\n//         \"ID\": \"960d1737342909c1a4c32a4a93a88e680a6f79df:116\",\n//         \"ModTime\": \"0\",\n//         \"OwnerID\": \"960d1737342909c1a4c32a4a93a88e680a6f79df:96\",\n//         \"RefCount\": \"1\"\n//     }\n// }\n// u[960d1737342909c1a4c32a4a93a88e680a6f79df:81]={\n//     \"Fields\": [\n//         {\n//             \"N\": \"AQAAAAAAAAA=\",\n//             \"T\": {\n//                 \"@type\": \"/gno.RefType\",\n//                 \"ID\": \"gno.land/r/boards.BoardID\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"16\"\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.StringValue\",\n//                 \"value\": \"/r/boards:test_board\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"16\"\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.StringValue\",\n//                 \"value\": \"test_board\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.RefType\",\n//                 \"ID\": \"std.Address\"\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.StringValue\",\n//                 \"value\": \"g1arjyc64rpthwn8zhxtzjvearm5scy43y7vm985\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/avl.MutTree\"\n//                 }\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.PointerValue\",\n//                 \"Base\": null,\n//                 \"Index\": \"0\",\n//                 \"TV\": {\n//                     \"T\": {\n//                         \"@type\": \"/gno.RefType\",\n//                         \"ID\": \"gno.land/p/avl.MutTree\"\n//                     },\n//                     \"V\": {\n//                         \"@type\": \"/gno.RefValue\",\n//                         \"Hash\": \"d4e9afa2b548d884054f88fcb7f8abc02a26b424\",\n//                         \"ObjectID\": \"960d1737342909c1a4c32a4a93a88e680a6f79df:82\"\n//                     }\n//                 }\n//             }\n//         },\n//         {\n//             \"N\": \"BAAAAAAAAAA=\",\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"65536\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.RefType\",\n//                 \"ID\": \"time.Time\"\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.RefValue\",\n//                 \"Hash\": \"29488499037d4d74a8443515e7cd3d7bd69fc4ba\",\n//                 \"ObjectID\": \"960d1737342909c1a4c32a4a93a88e680a6f79df:83\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/avl.MutTree\"\n//                 }\n//             }\n//         }\n//     ],\n//     \"ObjectInfo\": {\n//         \"ID\": \"960d1737342909c1a4c32a4a93a88e680a6f79df:81\",\n//         \"IsEscaped\": true,\n//         \"ModTime\": \"107\",\n//         \"RefCount\": \"6\"\n//     }\n// }\n// u[960d1737342909c1a4c32a4a93a88e680a6f79df:95]={\n//     \"Fields\": [\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/avl.Tree\"\n//                 }\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.PointerValue\",\n//                 \"Base\": null,\n//                 \"Index\": \"0\",\n//                 \"TV\": {\n//                     \"T\": {\n//                         \"@type\": \"/gno.RefType\",\n//                         \"ID\": \"gno.land/p/avl.Tree\"\n//                     },\n//                     \"V\": {\n//                         \"@type\": \"/gno.RefValue\",\n//                         \"Hash\": \"bdce85446e803c1a00c1e2c85aafb26902e2afce\",\n//                         \"ObjectID\": \"960d1737342909c1a4c32a4a93a88e680a6f79df:108\"\n//                     }\n//                 }\n//             }\n//         }\n//     ],\n//     \"ObjectInfo\": {\n//         \"ID\": \"960d1737342909c1a4c32a4a93a88e680a6f79df:95\",\n//         \"ModTime\": \"107\",\n//         \"OwnerID\": \"960d1737342909c1a4c32a4a93a88e680a6f79df:94\",\n//         \"RefCount\": \"1\"\n//     }\n// }\n// u[960d1737342909c1a4c32a4a93a88e680a6f79df:96]={\n//     \"Fields\": [\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/avl.Tree\"\n//                 }\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.PointerValue\",\n//                 \"Base\": null,\n//                 \"Index\": \"0\",\n//                 \"TV\": {\n//                     \"T\": {\n//                         \"@type\": \"/gno.RefType\",\n//                         \"ID\": \"gno.land/p/avl.Tree\"\n//                     },\n//                     \"V\": {\n//                         \"@type\": \"/gno.RefValue\",\n//                         \"Hash\": \"1ca2bb44ef1b6624e456e68275dfce7e723d8d1e\",\n//                         \"ObjectID\": \"960d1737342909c1a4c32a4a93a88e680a6f79df:116\"\n//                     }\n//                 }\n//             }\n//         }\n//     ],\n//     \"ObjectInfo\": {\n//         \"ID\": \"960d1737342909c1a4c32a4a93a88e680a6f79df:96\",\n//         \"ModTime\": \"107\",\n//         \"OwnerID\": \"960d1737342909c1a4c32a4a93a88e680a6f79df:94\",\n//         \"RefCount\": \"1\"\n//     }\n// }\n// switchrealm[\"gno.land/r/boards\"]\n// switchrealm[\"gno.land/r/users\"]\n// switchrealm[\"gno.land/r/users\"]\n// switchrealm[\"gno.land/r/users\"]\n// switchrealm[\"gno.land/r/users\"]\n// switchrealm[\"gno.land/r/users\"]\n// switchrealm[\"gno.land/r/users\"]\n// switchrealm[\"gno.land/r/users\"]\n// switchrealm[\"gno.land/r/users\"]\n// switchrealm[\"gno.land/r/users\"]\n// switchrealm[\"gno.land/r/boards\"]\n// switchrealm[\"gno.land/r/boards_test\"]\n"
                },
                {
                  "Name": "z_5_b_filetest.gno",
                  "Body": "package main\n\n// SEND: 2000000000ugnot\n\nimport (\n\t\"std\"\n\t\"strconv\"\n\n\t\"gno.land/p/testutils\"\n\t\"gno.land/r/boards\"\n\t\"gno.land/r/users\"\n)\n\nconst admin = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\")\n\nfunc main() {\n\tusers.Register(\"\", \"gnouser\", \"my profile\")\n\t// create board via registered user\n\tbid := boards.CreateBoard(\"test_board\")\n\n\t// create post via anon user\n\ttest2 := testutils.TestAddress(\"test2\")\n\tstd.TestSetOrigCaller(test2)\n\tstd.TestSetOrigSend(std.Coins{{\"ugnot\", 9000000}}, nil)\n\n\tpid := boards.CreateThread(bid, \"First Post (title)\", \"Body of the first post. (body)\")\n\tprintln(boards.Render(\"test_board/\" + strconv.Itoa(int(pid))))\n}\n\n// Error:\n// please register, otherwise minimum fee 100000000 is required if anonymous\n"
                },
                {
                  "Name": "z_5_c_filetest.gno",
                  "Body": "package main\n\n// SEND: 2000000000ugnot\n\nimport (\n\t\"std\"\n\t\"strconv\"\n\n\t\"gno.land/p/testutils\"\n\t\"gno.land/r/boards\"\n\t\"gno.land/r/users\"\n)\n\nconst admin = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\")\n\nfunc main() {\n\tusers.Register(\"\", \"gnouser\", \"my profile\")\n\t// create board via registered user\n\tbid := boards.CreateBoard(\"test_board\")\n\n\t// create post via anon user\n\ttest2 := testutils.TestAddress(\"test2\")\n\tstd.TestSetOrigCaller(test2)\n\tstd.TestSetOrigSend(std.Coins{{\"ugnot\", 101000000}}, nil)\n\n\tpid := boards.CreateThread(bid, \"First Post (title)\", \"Body of the first post. (body)\")\n\tboards.CreateReply(bid, pid, pid, \"Reply of the first post\")\n\n\tprintln(boards.Render(\"test_board/\" + strconv.Itoa(int(pid))))\n}\n\n// Output:\n// # First Post (title)\n//\n// Body of the first post. (body)\n// \\- [g1w3jhxapjta047h6lta047h6lta047h6laqcyu4](/r/users:g1w3jhxapjta047h6lta047h6lta047h6laqcyu4), [2009-02-13 11:31pm (UTC)](/r/boards:test_board/1) \\[[reply](/r/boards?help\u0026__func=CreateReply\u0026bid=1\u0026threadid=1\u0026postid=1\u0026body.type=textarea)] \\[[x](/r/boards?help\u0026__func=DeletePost\u0026bid=1\u0026threadid=1\u0026postid=1)]\n//\n// \u003e Reply of the first post\n// \u003e \\- [g1w3jhxapjta047h6lta047h6lta047h6laqcyu4](/r/users:g1w3jhxapjta047h6lta047h6lta047h6laqcyu4), [2009-02-13 11:31pm (UTC)](/r/boards:test_board/1/2) \\[[reply](/r/boards?help\u0026__func=CreateReply\u0026bid=1\u0026threadid=1\u0026postid=2\u0026body.type=textarea)] \\[[x](/r/boards?help\u0026__func=DeletePost\u0026bid=1\u0026threadid=1\u0026postid=2)]\n"
                },
                {
                  "Name": "z_5_d_filetest.gno",
                  "Body": "package main\n\n// SEND: 2000000000ugnot\n\nimport (\n\t\"std\"\n\t\"strconv\"\n\n\t\"gno.land/p/testutils\"\n\t\"gno.land/r/boards\"\n\t\"gno.land/r/users\"\n)\n\nconst admin = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\")\n\nfunc main() {\n\tusers.Register(\"\", \"gnouser\", \"my profile\")\n\t// create board via registered user\n\tbid := boards.CreateBoard(\"test_board\")\n\tpid := boards.CreateThread(bid, \"First Post (title)\", \"Body of the first post. (body)\")\n\n\t// create reply via anon user\n\ttest2 := testutils.TestAddress(\"test2\")\n\tstd.TestSetOrigCaller(test2)\n\tstd.TestSetOrigSend(std.Coins{{\"ugnot\", 9000000}}, nil)\n\tboards.CreateReply(bid, pid, pid, \"Reply of the first post\")\n\n\tprintln(boards.Render(\"test_board/\" + strconv.Itoa(int(pid))))\n}\n\n// Error:\n// please register, otherwise minimum fee 100000000 is required if anonymous\n"
                },
                {
                  "Name": "z_5_filetest.gno",
                  "Body": "// PKGPATH: gno.land/r/boards_test\npackage boards_test\n\n// SEND: 200000000ugnot\n\nimport (\n\t\"strconv\"\n\n\t\"gno.land/r/boards\"\n\t\"gno.land/r/users\"\n)\n\nvar (\n\tbid boards.BoardID\n\tpid boards.PostID\n)\n\nfunc init() {\n\tusers.Register(\"\", \"gnouser\", \"my profile\")\n\n\tbid = boards.CreateBoard(\"test_board\")\n\tboards.CreateThread(bid, \"First Post (title)\", \"Body of the first post. (body)\")\n\tpid = boards.CreateThread(bid, \"Second Post (title)\", \"Body of the second post. (body)\")\n\trid := boards.CreateReply(bid, pid, pid, \"Reply of the second post\")\n}\n\nfunc main() {\n\trid2 := boards.CreateReply(bid, pid, pid, \"Second reply of the second post\\n\")\n\tprintln(boards.Render(\"test_board/\" + strconv.Itoa(int(pid))))\n}\n\n// Output:\n// # Second Post (title)\n//\n// Body of the second post. (body)\n// \\- [@gnouser](/r/users:gnouser), [2009-02-13 11:31pm (UTC)](/r/boards:test_board/2) \\[[reply](/r/boards?help\u0026__func=CreateReply\u0026bid=1\u0026threadid=2\u0026postid=2\u0026body.type=textarea)] \\[[x](/r/boards?help\u0026__func=DeletePost\u0026bid=1\u0026threadid=2\u0026postid=2)]\n//\n// \u003e Reply of the second post\n// \u003e \\- [@gnouser](/r/users:gnouser), [2009-02-13 11:31pm (UTC)](/r/boards:test_board/2/3) \\[[reply](/r/boards?help\u0026__func=CreateReply\u0026bid=1\u0026threadid=2\u0026postid=3\u0026body.type=textarea)] \\[[x](/r/boards?help\u0026__func=DeletePost\u0026bid=1\u0026threadid=2\u0026postid=3)]\n//\n// \u003e Second reply of the second post\n// \u003e\n// \u003e \\- [@gnouser](/r/users:gnouser), [2009-02-13 11:31pm (UTC)](/r/boards:test_board/2/4) \\[[reply](/r/boards?help\u0026__func=CreateReply\u0026bid=1\u0026threadid=2\u0026postid=4\u0026body.type=textarea)] \\[[x](/r/boards?help\u0026__func=DeletePost\u0026bid=1\u0026threadid=2\u0026postid=4)]\n"
                },
                {
                  "Name": "z_6_filetest.gno",
                  "Body": "// PKGPATH: gno.land/r/boards_test\npackage boards_test\n\n// SEND: 200000000ugnot\n\nimport (\n\t\"strconv\"\n\n\t\"gno.land/r/boards\"\n\t\"gno.land/r/users\"\n)\n\nvar (\n\tbid boards.BoardID\n\tpid boards.PostID\n\trid boards.PostID\n)\n\nfunc init() {\n\tusers.Register(\"\", \"gnouser\", \"my profile\")\n\n\tbid = boards.CreateBoard(\"test_board\")\n\tboards.CreateThread(bid, \"First Post (title)\", \"Body of the first post. (body)\")\n\tpid = boards.CreateThread(bid, \"Second Post (title)\", \"Body of the second post. (body)\")\n\trid = boards.CreateReply(bid, pid, pid, \"Reply of the second post\")\n}\n\nfunc main() {\n\tboards.CreateReply(bid, pid, pid, \"Second reply of the second post\\n\")\n\tboards.CreateReply(bid, pid, rid, \"First reply of the first reply\\n\")\n\tprintln(boards.Render(\"test_board/\" + strconv.Itoa(int(pid))))\n}\n\n// Output:\n// # Second Post (title)\n//\n// Body of the second post. (body)\n// \\- [@gnouser](/r/users:gnouser), [2009-02-13 11:31pm (UTC)](/r/boards:test_board/2) \\[[reply](/r/boards?help\u0026__func=CreateReply\u0026bid=1\u0026threadid=2\u0026postid=2\u0026body.type=textarea)] \\[[x](/r/boards?help\u0026__func=DeletePost\u0026bid=1\u0026threadid=2\u0026postid=2)]\n//\n// \u003e Reply of the second post\n// \u003e \\- [@gnouser](/r/users:gnouser), [2009-02-13 11:31pm (UTC)](/r/boards:test_board/2/3) \\[[reply](/r/boards?help\u0026__func=CreateReply\u0026bid=1\u0026threadid=2\u0026postid=3\u0026body.type=textarea)] \\[[x](/r/boards?help\u0026__func=DeletePost\u0026bid=1\u0026threadid=2\u0026postid=3)]\n// \u003e\n// \u003e \u003e First reply of the first reply\n// \u003e \u003e\n// \u003e \u003e \\- [@gnouser](/r/users:gnouser), [2009-02-13 11:31pm (UTC)](/r/boards:test_board/2/5) \\[[reply](/r/boards?help\u0026__func=CreateReply\u0026bid=1\u0026threadid=2\u0026postid=5\u0026body.type=textarea)] \\[[x](/r/boards?help\u0026__func=DeletePost\u0026bid=1\u0026threadid=2\u0026postid=5)]\n//\n// \u003e Second reply of the second post\n// \u003e\n// \u003e \\- [@gnouser](/r/users:gnouser), [2009-02-13 11:31pm (UTC)](/r/boards:test_board/2/4) \\[[reply](/r/boards?help\u0026__func=CreateReply\u0026bid=1\u0026threadid=2\u0026postid=4\u0026body.type=textarea)] \\[[x](/r/boards?help\u0026__func=DeletePost\u0026bid=1\u0026threadid=2\u0026postid=4)]\n"
                },
                {
                  "Name": "z_7_filetest.gno",
                  "Body": "// PKGPATH: gno.land/r/boards_test\npackage boards_test\n\n// SEND: 2000000000ugnot\n\nimport (\n\t\"gno.land/r/boards\"\n\t\"gno.land/r/users\"\n)\n\nfunc init() {\n\t// register\n\tusers.Register(\"\", \"gnouser\", \"my profile\")\n\n\t// create board and post\n\tbid := boards.CreateBoard(\"test_board\")\n\tboards.CreateThread(bid, \"First Post (title)\", \"Body of the first post. (body)\")\n}\n\nfunc main() {\n\tprintln(boards.Render(\"test_board\"))\n}\n\n// Output:\n// \\[[post](/r/boards?help\u0026__func=CreateThread\u0026bid=1\u0026body.type=textarea)]\n//\n// ----------------------------------------\n// ## [First Post (title)](/r/boards:test_board/1)\n//\n// Body of the first post. (body)\n// \\- [@gnouser](/r/users:gnouser), [2009-02-13 11:31pm UTC](/r/boards:test_board/1) \\[[x](/r/boards?help\u0026__func=DeletePost\u0026bid=1\u0026threadid=1\u0026postid=1)] (0 replies)\n"
                },
                {
                  "Name": "z_8_filetest.gno",
                  "Body": "// PKGPATH: gno.land/r/boards_test\npackage boards_test\n\n// SEND: 2000000000ugnot\n\nimport (\n\t\"strconv\"\n\n\t\"gno.land/r/boards\"\n\t\"gno.land/r/users\"\n)\n\nvar (\n\tbid boards.BoardID\n\tpid boards.PostID\n\trid boards.PostID\n)\n\nfunc init() {\n\tusers.Register(\"\", \"gnouser\", \"my profile\")\n\n\tbid = boards.CreateBoard(\"test_board\")\n\tboards.CreateThread(bid, \"First Post (title)\", \"Body of the first post. (body)\")\n\tpid = boards.CreateThread(bid, \"Second Post (title)\", \"Body of the second post. (body)\")\n\trid = boards.CreateReply(bid, pid, pid, \"Reply of the second post\")\n}\n\nfunc main() {\n\tboards.CreateReply(bid, pid, pid, \"Second reply of the second post\\n\")\n\trid2 := boards.CreateReply(bid, pid, rid, \"First reply of the first reply\\n\")\n\tprintln(boards.Render(\"test_board/\" + strconv.Itoa(int(pid)) + \"/\" + strconv.Itoa(int(rid2))))\n}\n\n// Output:\n// _[see thread](/r/boards:test_board/2)_\n//\n// Reply of the second post\n// \\- [@gnouser](/r/users:gnouser), [2009-02-13 11:31pm (UTC)](/r/boards:test_board/2/3) \\[[reply](/r/boards?help\u0026__func=CreateReply\u0026bid=1\u0026threadid=2\u0026postid=3\u0026body.type=textarea)] \\[[x](/r/boards?help\u0026__func=DeletePost\u0026bid=1\u0026threadid=2\u0026postid=3)]\n//\n// _[see all 1 replies](/r/boards:test_board/2/3)_\n//\n// \u003e First reply of the first reply\n// \u003e\n// \u003e \\- [@gnouser](/r/users:gnouser), [2009-02-13 11:31pm (UTC)](/r/boards:test_board/2/5) \\[[reply](/r/boards?help\u0026__func=CreateReply\u0026bid=1\u0026threadid=2\u0026postid=5\u0026body.type=textarea)] \\[[x](/r/boards?help\u0026__func=DeletePost\u0026bid=1\u0026threadid=2\u0026postid=5)]\n"
                },
                {
                  "Name": "z_9_a_filetest.gno",
                  "Body": "// PKGPATH: gno.land/r/boards_test\npackage boards_test\n\n// SEND: 200000000ugnot\n\nimport (\n\t\"strconv\"\n\n\t\"gno.land/r/boards\"\n\t\"gno.land/r/users\"\n)\n\nvar dstBoard boards.BoardID\n\nfunc init() {\n\tusers.Register(\"\", \"gnouser\", \"my profile\")\n\n\tdstBoard = boards.CreateBoard(\"dst_board\")\n\n\tboards.CreateRepost(0, 0, \"First Post in (title)\", \"Body of the first post. (body)\", dstBoard)\n}\n\nfunc main() {\n}\n\n// Error:\n// src board not exist\n"
                },
                {
                  "Name": "z_9_b_filetest.gno",
                  "Body": "// PKGPATH: gno.land/r/boards_test\npackage boards_test\n\n// SEND: 200000000ugnot\n\nimport (\n\t\"strconv\"\n\n\t\"gno.land/r/boards\"\n\t\"gno.land/r/users\"\n)\n\nvar (\n\tsrcBoard boards.BoardID\n\tpid      boards.PostID\n)\n\nfunc init() {\n\tusers.Register(\"\", \"gnouser\", \"my profile\")\n\n\tsrcBoard = boards.CreateBoard(\"first_board\")\n\tpid = boards.CreateThread(srcBoard, \"First Post in (title)\", \"Body of the first post. (body)\")\n\n\tboards.CreateRepost(srcBoard, pid, \"First Post in (title)\", \"Body of the first post. (body)\", 0)\n}\n\nfunc main() {\n}\n\n// Error:\n// dst board not exist\n"
                },
                {
                  "Name": "z_9_filetest.gno",
                  "Body": "// PKGPATH: gno.land/r/boards_test\npackage boards_test\n\n// SEND: 200000000ugnot\n\nimport (\n\t\"strconv\"\n\n\t\"gno.land/r/boards\"\n\t\"gno.land/r/users\"\n)\n\nvar (\n\tfirstBoard  boards.BoardID\n\tsecondBoard boards.BoardID\n\tpid         boards.PostID\n)\n\nfunc init() {\n\tusers.Register(\"\", \"gnouser\", \"my profile\")\n\n\tfirstBoard = boards.CreateBoard(\"first_board\")\n\tsecondBoard = boards.CreateBoard(\"second_board\")\n\tpid = boards.CreateThread(firstBoard, \"First Post in (title)\", \"Body of the first post. (body)\")\n\n\tboards.CreateRepost(firstBoard, pid, \"First Post in (title)\", \"Body of the first post. (body)\", secondBoard)\n}\n\nfunc main() {\n\tprintln(boards.Render(\"second_board/\" + strconv.Itoa(int(pid))))\n}\n\n// Output:\n// # First Post in (title)\n//\n// Body of the first post. (body)\n// \\- [@gnouser](/r/users:gnouser), [2009-02-13 11:31pm (UTC)](/r/boards:second_board/1/1) \\[[reply](/r/boards?help\u0026__func=CreateReply\u0026bid=2\u0026threadid=1\u0026postid=1\u0026body.type=textarea)] \\[[x](/r/boards?help\u0026__func=DeletePost\u0026bid=2\u0026threadid=1\u0026postid=1)]\n"
                }
              ]
            },
            "deposit": ""
          }
        ],
        "fee": {
          "gas_wanted": "50000",
          "gas_fee": "1000000ugnot"
        },
        "signatures": [
          {
            "pub_key": null,
            "signature": null
          }
        ],
        "memo": ""
      },
      {
        "msg": [
          {
            "@type": "/vm.m_addpkg",
            "creator": "g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5",
            "package": {
              "Name": "banktest",
              "Path": "gno.land/r/banktest",
              "Files": [
                {
                  "Name": "README.md",
                  "Body": "This is a simple test realm contract that demonstrates how to use the banker.\n\nSee [gno.land/r/banktest/banktest.go](/r/banktest/banktest.go) to see the original contract code.\n\nThis article will go through each line to explain how it works.\n\n```go\npackage banktest\n```\n\nThis package is locally named \"banktest\" (could be anything).\n\n```go\nimport (\n    \"std\"\n)\n```\n\nThe \"std\" package is defined by the gno code in stdlibs/std/. \u003c/br\u003e\nSelf explanatory; and you'll see more usage from std later.\n\n```go\ntype activity struct {\n    caller   std.Address\n    sent     std.Coins\n    returned std.Coins\n    time     time.Time\n}\n\nfunc (act *activity) String() string {\n    return act.caller.String() + \" \" +\n        act.sent.String() + \" sent, \" +\n        act.returned.String() + \" returned, at \" +\n        act.time.Format(\"2006-01-02 3:04pm MST\")\n}\n\nvar latest [10]*activity\n```\n\nThis is just maintaining a list of recent activity to this contract.\nNotice that the \"latest\" variable is defined \"globally\" within\nthe context of the realm with path \"gno.land/r/banktest\".\n\nThis means that calls to functions defined within this package\nare encapsulated within this \"data realm\", where the data is\nmutated based on transactions that can potentially cross many\nrealm and non-realm packge boundaries (in the call stack).\n\n```go\n// Deposit will take the coins (to the realm's pkgaddr) or return them to user.\nfunc Deposit(returnDenom string, returnAmount int64) string {\n    std.AssertOriginCall()\n    caller := std.GetOrigCaller()\n    send := std.Coins{{returnDenom, returnAmount}}\n```\n\nThis is the beginning of the definition of the contract function named\n\"Deposit\".  `std.AssertOriginCall() asserts that this function was called by a\ngno transactional Message. The caller is the user who signed off on this\ntransactional message. Send is the amount of deposit sent along with this\nmessage.\n\n```go\n    // record activity\n    act := \u0026activity{\n        caller:   caller,\n        sent:     std.GetOrigSend(),\n        returned: send,\n        time:     time.Now(),\n    }\n    for i := len(latest) - 2; i \u003e= 0; i-- {\n        latest[i+1] = latest[i] // shift by +1.\n    }\n    latest[0] = act\n```\n\nUpdating the \"latest\" array for viewing at gno.land/r/banktest: (w/ trailing colon).\n\n```go\n    // return if any.\n    if returnAmount \u003e 0 {\n```\n\nIf the user requested the return of coins...\n\n```go\n        banker := std.GetBanker(std.BankerTypeOrigSend)\n```\n\nuse a std.Banker instance to return any deposited coins to the original sender.\n\n```go\n        pkgaddr := std.GetOrigPkgAddr()\n        // TODO: use std.Coins constructors, this isn't generally safe.\n        banker.SendCoins(pkgaddr, caller, send)\n        return \"returned!\"\n```\n\nNotice that each realm package has an associated Cosmos address.\n\n\nFinally, the results are rendered via an ABCI query call when you visit [/r/banktest:](/r/banktest:).\n\n```go\nfunc Render(path string) string {\n    // get realm coins.\n    banker := std.GetBanker(std.BankerTypeReadonly)\n    coins := banker.GetCoins(std.GetOrigPkgAddr())\n\n    // render\n    res := \"\"\n    res += \"## recent activity\\n\"\n    res += \"\\n\"\n    for _, act := range latest {\n        if act == nil {\n            break\n        }\n        res += \" * \" + act.String() + \"\\n\"\n    }\n    res += \"\\n\"\n    res += \"## total deposits\\n\"\n    res += coins.String()\n    return res\n}\n```\n\nYou can call this contract yourself, by vistiing [/r/banktest](/r/banktest) and the [quickstart guide](/r/boards:gnolang/4).\n"
                },
                {
                  "Name": "banktest.gno",
                  "Body": "package banktest\n\nimport (\n\t\"std\"\n\t\"time\"\n)\n\ntype activity struct {\n\tcaller   std.Address\n\tsent     std.Coins\n\treturned std.Coins\n\ttime     time.Time\n}\n\nfunc (act *activity) String() string {\n\treturn act.caller.String() + \" \" +\n\t\tact.sent.String() + \" sent, \" +\n\t\tact.returned.String() + \" returned, at \" +\n\t\tact.time.Format(\"2006-01-02 3:04pm MST\")\n}\n\nvar latest [10]*activity\n\n// Deposit will take the coins (to the realm's pkgaddr) or return them to user.\nfunc Deposit(returnDenom string, returnAmount int64) string {\n\tstd.AssertOriginCall()\n\tcaller := std.GetOrigCaller()\n\tsend := std.Coins{{returnDenom, returnAmount}}\n\t// record activity\n\tact := \u0026activity{\n\t\tcaller:   caller,\n\t\tsent:     std.GetOrigSend(),\n\t\treturned: send,\n\t\ttime:     time.Now(),\n\t}\n\tfor i := len(latest) - 2; i \u003e= 0; i-- {\n\t\tlatest[i+1] = latest[i] // shift by +1.\n\t}\n\tlatest[0] = act\n\t// return if any.\n\tif returnAmount \u003e 0 {\n\t\tbanker := std.GetBanker(std.BankerTypeOrigSend)\n\t\tpkgaddr := std.GetOrigPkgAddr()\n\t\t// TODO: use std.Coins constructors, this isn't generally safe.\n\t\tbanker.SendCoins(pkgaddr, caller, send)\n\t\treturn \"returned!\"\n\t} else {\n\t\treturn \"thank you!\"\n\t}\n}\n\nfunc Render(path string) string {\n\t// get realm coins.\n\tbanker := std.GetBanker(std.BankerTypeReadonly)\n\tcoins := banker.GetCoins(std.GetOrigPkgAddr())\n\n\t// render\n\tres := \"\"\n\tres += \"## recent activity\\n\"\n\tres += \"\\n\"\n\tfor _, act := range latest {\n\t\tif act == nil {\n\t\t\tbreak\n\t\t}\n\t\tres += \" * \" + act.String() + \"\\n\"\n\t}\n\tres += \"\\n\"\n\tres += \"## total deposits\\n\"\n\tres += coins.String()\n\treturn res\n}\n"
                },
                {
                  "Name": "z_0_filetest.gno",
                  "Body": "package main\n\n// NOTE: this doesn't do anything, as it sends to \"main\".\n// SEND: 100000000ugnot\n\nimport (\n\t\"std\"\n\n\t\"gno.land/r/banktest\"\n)\n\nfunc main() {\n\tbanktestAddr := std.TestDerivePkgAddr(\"gno.land/r/banktest\")\n\n\t// print main balance before.\n\tmainaddr := std.TestDerivePkgAddr(\"main\")\n\tbanker := std.GetBanker(std.BankerTypeReadonly)\n\tmainbal := banker.GetCoins(mainaddr)\n\tprintln(\"main before:\", mainbal) // plus OrigSend equals 300.\n\n\t// simulate a Deposit call.\n\tstd.TestSetOrigPkgAddr(banktestAddr)\n\tstd.TestIssueCoins(banktestAddr, std.Coins{{\"ugnot\", 100000000}})\n\tstd.TestSetOrigSend(std.Coins{{\"ugnot\", 100000000}}, nil)\n\tres := banktest.Deposit(\"ugnot\", 100000000)\n\tprintln(\"Deposit():\", res)\n\n\t// print main balance after.\n\tmainbal = banker.GetCoins(mainaddr)\n\tprintln(\"main after:\", mainbal) // still 300.\n\n\t// simulate a Render().\n\tres = banktest.Render(\"\")\n\tprintln(res)\n}\n\n// Output:\n// main before: 200000000ugnot\n// Deposit(): returned!\n// main after: 300000000ugnot\n// ## recent activity\n//\n//  * g17rgsdnfxzza0sdfsdma37sdwxagsz378833ca4 100000000ugnot sent, 100000000ugnot returned, at 2009-02-13 11:31pm UTC\n//\n// ## total deposits\n"
                },
                {
                  "Name": "z_1_filetest.gno",
                  "Body": "package main\n\nimport (\n\t\"std\"\n\n\t\"gno.land/r/banktest\"\n)\n\nfunc main() {\n\tbanktestAddr := std.TestDerivePkgAddr(\"gno.land/r/banktest\")\n\n\t// simulate a Deposit call.\n\tstd.TestSetOrigPkgAddr(banktestAddr)\n\tstd.TestIssueCoins(banktestAddr, std.Coins{{\"ugnot\", 100000000}})\n\tstd.TestSetOrigSend(std.Coins{{\"ugnot\", 100000000}}, nil)\n\tres := banktest.Deposit(\"ugnot\", 101000000)\n\tprintln(res)\n}\n\n// Error:\n// cannot send \"101000000ugnot\", limit \"100000000ugnot\" exceeded with \"\" already spent\n"
                },
                {
                  "Name": "z_2_filetest.gno",
                  "Body": "package main\n\nimport (\n\t\"std\"\n\n\t\"gno.land/r/banktest\"\n)\n\nfunc main() {\n\tbanktestAddr := std.TestDerivePkgAddr(\"gno.land/r/banktest\")\n\n\t// print main balance before.\n\tmainaddr := std.TestDerivePkgAddr(\"main\")\n\tbanker := std.GetBanker(std.BankerTypeReadonly)\n\tmainbal := banker.GetCoins(mainaddr)\n\tprintln(\"main before:\", mainbal) // plus OrigSend equals 300.\n\n\t// simulate a Deposit call.\n\tstd.TestSetOrigPkgAddr(banktestAddr)\n\tstd.TestIssueCoins(banktestAddr, std.Coins{{\"ugnot\", 100000000}})\n\tstd.TestSetOrigSend(std.Coins{{\"ugnot\", 100000000}}, nil)\n\tres := banktest.Deposit(\"ugnot\", 55000000)\n\tprintln(\"Deposit():\", res)\n\n\t// print main balance after.\n\tmainbal = banker.GetCoins(mainaddr)\n\tprintln(\"main after:\", mainbal) // now 255.\n\n\t// simulate a Render().\n\tres = banktest.Render(\"\")\n\tprintln(res)\n}\n\n// Output:\n// main before: 200000000ugnot\n// Deposit(): returned!\n// main after: 255000000ugnot\n// ## recent activity\n//\n//  * g17rgsdnfxzza0sdfsdma37sdwxagsz378833ca4 100000000ugnot sent, 55000000ugnot returned, at 2009-02-13 11:31pm UTC\n//\n// ## total deposits\n// 45000000ugnot\n"
                }
              ]
            },
            "deposit": ""
          }
        ],
        "fee": {
          "gas_wanted": "50000",
          "gas_fee": "1000000ugnot"
        },
        "signatures": [
          {
            "pub_key": null,
            "signature": null
          }
        ],
        "memo": ""
      },
      {
        "msg": [
          {
            "@type": "/vm.m_addpkg",
            "creator": "g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5",
            "package": {
              "Name": "validators",
              "Path": "gno.land/r/validators",
              "Files": [
                {
                  "Name": "contract.gno",
                  "Body": "package validators\n\nimport (\n\t\"std\"\n\n\t\"gno.land/p/avl\"\n\t\"gno.land/p/ufmt\"\n)\n\nfunc CreateValidator(name, pubkey string) int {\n\tstd.AssertOriginCall()\n\n\tif gValidators.Size()+1 \u003e maxValidators {\n\t\tpanic(\"validator set is full\")\n\t}\n\n\tcaller := std.GetOrigCaller()\n\tvalKey := validatorIDKey(caller)\n\texists := gValidators.Has(valKey)\n\tif exists {\n\t\tpanic(\"validator already exists\")\n\t}\n\n\tvp := std.GetOrigSend().AmountOf(nativeDenom)\n\tvalidator := newValidator(caller, name, pubkey, vp, std.GetHeight())\n\n\tgValidators.Set(valKey, validator)\n\treturn gValidators.Size()\n}\n\nfunc Stake(validator std.Address) {\n\tstd.AssertOriginCall()\n\n\tvaloper := getValidator(validator)\n\tif valoper == nil {\n\t\tpanic(\"validator does not exist\")\n\t}\n\n\tvp := std.GetOrigSend().AmountOf(nativeDenom)\n\tvaloper.AddVotingPower(vp)\n\n\t// TODO: add delegation\n}\n\nfunc ValidatorSet() string {\n\tcolon := \"\"\n\toutput := \"\"\n\tgValidators.Iterate(\"\", \"\", func(n *avl.Tree) bool {\n\t\tvalidator := n.Value().(*Validator)\n\t\toutput = output + colon + validator.Json()\n\t\tcolon = \",\"\n\t\treturn false\n\t})\n\n\treturn \"[\" + output + \"]\"\n}\n\nfunc UpdateMaxValidators(max int) {\n\tstd.AssertOriginCall()\n\tcaller := std.GetOrigCaller()\n\tif caller != admin {\n\t\tpanic(\"unauthorized\")\n\t}\n\n\tif max \u003c= maxValidators {\n\t\tpanic(\"new max must be greater than current value\")\n\t}\n\n\tmaxValidators = max\n}\n\nfunc Render(path string) string {\n\tstr := \"\"\n\tstr += ufmt.Sprintf(\"## Total Validators: %d | Max: %d\\n\\n\", gValidators.Size(), maxValidators)\n\tstr += \"|Name|Address|Voting Power|Joined|\\n\"\n\tstr += \"|---|---|---|---|\\n\"\n\ttotal := int64(0)\n\tgValidators.Iterate(\"\", \"\", func(n *avl.Tree) bool {\n\t\tval := n.Value().(*Validator)\n\t\tstr += val.Render() + \"\\n\"\n\t\ttotal += val.vp\n\t\treturn false\n\t})\n\tstr += ufmt.Sprintf(\"\\n\\nTotal Staked: %d\\n\", total)\n\n\treturn str\n}\n"
                },
                {
                  "Name": "contract_test.gno",
                  "Body": "package validators\n\nimport (\n\t\"std\"\n\n\t\"testing\"\n)\n\nfunc TestCreateValidator(t *testing.T) {\n\tpkgAddr := std.TestDerivePkgAddr(\"gno.land/r/validators\")\n\tcaller := std.Address(\"g1u7y667z64x2h7vc6fmpcprgey4ck233jaww9zq\")\n\tstd.TestSetOrigPkgAddr(pkgAddr)\n\tstd.TestSetOrigSend(std.Coins{{\"ugnot\", 10}}, nil)\n\tstd.TestSetOrigCaller(caller)\n\n\tpubkey := \"cTJh+fxKUSHGVLDKSSn5zShXGWle5QYyIkRpg7FAbI8=\"\n\tid := CreateValidator(\"test\", pubkey)\n\tif id != 1 {\n\t\tt.Fatalf(\"id expected %q, got %q.\", 1, id)\n\t}\n}\n\nfunc TestUpdateMaxValidators(t *testing.T) {\n\tpkgAddr := std.TestDerivePkgAddr(\"gno.land/r/validators\")\n\tanon := std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\")\n\tadmin := std.Address(\"g19yltltjed5688sullftzurhdshmjwtm8vlqdr2\")\n\tstd.TestSetOrigPkgAddr(pkgAddr)\n\n\tstd.TestSetOrigCaller(anon)\n\tassertPanic(t, func() {\n\t\tUpdateMaxValidators(25)\n\t})\n\n\tstd.TestSetOrigCaller(admin)\n\tassertPanic(t, func() {\n\t\tUpdateMaxValidators(5)\n\t})\n\n\tstd.TestSetOrigCaller(admin)\n\tUpdateMaxValidators(100)\n}\n\nfunc assertPanic(t *testing.T, f func()) {\n\tdefer func() { _ = recover() }()\n    f()\n\tt.Errorf(\"The code did not panic\")\n}\n"
                },
                {
                  "Name": "params.gno",
                  "Body": "package validators\n\nimport (\n\t\"std\"\n)\n\nvar (\n\tadmin         = std.Address(\"g19yltltjed5688sullftzurhdshmjwtm8vlqdr2\")\n\tnativeDenom   = \"ugnot\"\n\tmaxValidators = 20\n)\n"
                },
                {
                  "Name": "state.gno",
                  "Body": "package validators\n\nimport (\n\t\"gno.land/p/avl\"\n)\n\n//----------------------------------------\n// Realm (package) state\n\nvar (\n\t// address -\u003e *Validator\n\tgValidators = avl.NewMutTree()\n)\n"
                },
                {
                  "Name": "validator.gno",
                  "Body": "package validators\n\nimport (\n\t\"encoding/base64\"\n\t\"std\"\n\n\t\"gno.land/p/ufmt\"\n)\n\ntype Validator struct {\n\tname    string\n\taddress std.Address\n\tpubkey  string\n\tvp      int64\n\tjoined  int64\n}\n\nfunc newValidator(address std.Address, name, pubkey string, vp, joined int64) *Validator {\n\tif name == \"\" || len(name) \u003e 70 {\n\t\tpanic(\"invalid validator name\")\n\t}\n\n\tpubk, err := base64.StdEncoding.DecodeString(pubkey)\n\tif err != nil || len(pubk) != 32 {\n\t\tpanic(\"invalid pubkey\")\n\t}\n\n\tif vp \u003c 1 {\n\t\tpanic(\"amount must be positive\")\n\t}\n\n\treturn \u0026Validator{\n\t\tname:    name,\n\t\taddress: address,\n\t\tpubkey:  pubkey,\n\t\tvp:      vp,\n\t\tjoined:  std.GetHeight(),\n\t}\n}\n\nfunc (v *Validator) AddVotingPower(vp int64) {\n\tif vp \u003c 1 {\n\t\tpanic(\"stake must be positive\")\n\t}\n\n\tv.vp += vp\n}\n\nfunc (v *Validator) Json() string {\n\tformat := `{\"name\": \"%s\", \"address\": \"%s\", \"pubkey\": \"%s\", \"vp\": %d}`\n\n\treturn ufmt.Sprintf(format, v.name, v.address.String(), v.pubkey, v.vp)\n}\n\nfunc (v *Validator) Render() string {\n\tformat := `|%s|%s|%d|%d|`\n\n\treturn ufmt.Sprintf(format, v.name, v.address.String(), v.vp, v.joined)\n}\n\nfunc validatorIDKey(address std.Address) string {\n\treturn address.String()\n}\n\nfunc getValidator(val std.Address) *Validator {\n\tvalkey := validatorIDKey(val)\n\tvaloper, exists := gValidators.Get(valkey)\n\tif !exists {\n\t\treturn nil\n\t}\n\n\treturn valoper.(*Validator)\n}\n"
                }
              ]
            },
            "deposit": ""
          }
        ],
        "fee": {
          "gas_wanted": "50000",
          "gas_fee": "1000000ugnot"
        },
        "signatures": [
          {
            "pub_key": null,
            "signature": null
          }
        ],
        "memo": ""
      },
      {
        "msg": [
          {
            "@type": "/vm.m_call",
            "caller": "g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t",
            "send": "10000000ugnot",
            "pkg_path": "gno.land/r/validators",
            "func": "CreateValidator",
            "args": [
              "Disperze",
              "rdn6x313Qh1lD/FGr0lJmrJVA7WbccZjfUJZl3GdH+M="
            ]
          }
        ],
        "fee": {
          "gas_wanted": "200000",
          "gas_fee": "1ugnot"
        },
        "signatures": [
          {
            "pub_key": null,
            "signature": null
          }
        ],
        "memo": ""
      },
      {
        "msg": [
          {
            "@type": "/vm.m_call",
            "caller": "g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj",
            "send": "",
            "pkg_path": "gno.land/r/users",
            "func": "Invite",
            "args": [
              "g1589c8cekvmjfmy0qrd4f3z52r7fn7rgk02667s:1\ng13sm84nuqed3fuank8huh7x9mupgw22uft3lcl8:1\ng1m6732pkrngu9vrt0g7056lvr9kcqc4mv83xl5q:1\ng1wg88rhzlwxjd2z4j5de5v5xq30dcf6rjq3dhsj:1\ng18pmaskasz7mxj6rmgrl3al58xu45a7w0l5nmc0:1\ng19wwhkmqlns70604ksp6rkuuu42qhtvyh05lffz:1\ng187982000zsc493znqt828s90cmp6hcp2erhu6m:1\ng1ndpsnrspdnauckytvkfv8s823t3gmpqmtky8pl:1\ng16ja66d65emkr0zxd2tu7xjvm7utthyhpej0037:1\ng1ds24jj9kqjcskd0gzu24r9e4n62ggye230zuv5:1\ng1trkzq75ntamsnw9xnrav2v7gy2lt5g6p29yhdr:1\ng1rrf8s5mrmu00sx04fzfsvc399fklpeg2x0a7mz:1\ng19p5ntfvpt4lwq4jqsmnxsnelhf3tff9scy3w8w:1\ng1tue8l73d6rq4vhqdsp2sr3zhuzpure3k2rnwpz:1\ng14hhsss4ngx5kq77je5g0tl4vftg8qp45ceadk3:1\ng1768hvkh7anhd40ch4h7jdh6j3mpcs7hrat4gl0:1\ng15fa8kyjhu88t9dr8zzua8fwdvkngv5n8yqsm0n:1\ng1xhccdjcscuhgmt3quww6qdy3j3czqt3urc2eac:1\ng1z629z04f85k4t5gnkk5egpxw9tqxeec435esap:1\ng1pfldkplz9puq0v82lu9vqcve9nwrxuq9qe5ttv:1\ng152pn0g5qfgxr7yx8zlwjq48hytkafd8x7egsfv:1\ng1cf2ye686ke38vjyqakreprljum4xu6rwf5jskq:1\ng1c5shztyaj4gjrc5zlwmh9xhex5w7l4asffs2w6:1\ng1lhpx2ktk0ha3qw42raxq4m24a4c4xqxyrgv54q:1\ng1026p54q0j902059sm2zsv37krf0ghcl7gmhyv7:1\ng1n4yvwnv77frq2ccuw27dmtjkd7u4p4jg0pgm7k:1\ng13m7f2e6r3lh3ykxupacdt9sem2tlvmaamwjhll:1\ng19uxluuecjlsqvwmwu8sp6pxaaqfhk972q975xd:1\ng1j80fpcsumfkxypvydvtwtz3j4sdwr8c2u0lr64:1\ng1tjdpptuk9eysq6z38nscqyycr998xjyx3w8jvw:1\ng19t3n89slfemgd3mwuat4lajwcp0yxrkadgeg7a:1\ng1yqndt8xx92l9h494jfruz2w79swzjes3n4wqjc:1\ng13278z0a5ufeg80ffqxpda9dlp599t7ekregcy6:1\ng1ht236wjd83x96uqwh9rh3fq6pylyn78mtwq9v6:1\ng1fj9jccm3zjnqspq7lp2g7lj4czyfq0s35600g9:1\ng1wwppuzdns5u6c6jqpkzua24zh6ppsus6399cea:1\ng1k8pjnguyu36pkc8hy0ufzgpzfmj2jl78la7ek3:1\ng1e8umkzumtxgs8399lw0us4rclea3xl5gxy9spp:1\ng14qekdkj2nmmwea4ufg9n002a3pud23y8k7ugs5:1\ng19w2488ntfgpduzqq3sk4j5x387zynwknqdvjqf:1\ng1495y3z7zrej4rendysnw5kaeu4g3d7x7w0734g:1\ng1hygx8ga9qakhkczyrzs9drm8j8tu4qds9y5e3r:1\ng1f977l6wxdh3qu60kzl75vx2wmzswu68l03r8su:1\ng1644qje5rx6jsdqfkzmgnfcegx4dxkjh6rwqd69:1\ng1mzjajymvmtksdwh3wkrndwj6zls2awl9q83dh6:1\ng1u7y667z64x2h7vc6fmpcprgey4ck233jaww9zq:10\ng14da4n9hcynyzz83q607uu8keuh9hwlv42ra6fa:10\ng14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t:5\n"
            ]
          }
        ],
        "fee": {
          "gas_wanted": "2000000",
          "gas_fee": "1000000ugnot"
        },
        "signatures": [
          {
            "pub_key": {
              "@type": "/tm.PubKeySecp256k1",
              "value": "AmG6kzznyo1uNqWPAYU6wDpsmzQKDaEOrVRaZ08vOyX0"
            },
            "signature": "S8iMMzlOMK8dmox78R9Z8+pSsS8YaTCXrIcaHDpiOgkOy7gqoQJ0oftM0zf8zAz4xpezK8Lzg8Q0fCdXJxV76w=="
          }
        ],
        "memo": ""
      },
      {
        "msg": [
          {
            "@type": "/vm.m_call",
            "caller": "g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj",
            "send": "",
            "pkg_path": "gno.land/r/users",
            "func": "Invite",
            "args": [
              "g1thlf3yct7n7ex70k0p62user0kn6mj6d3s0cg3\ng1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\n"
            ]
          }
        ],
        "fee": {
          "gas_wanted": "2000000",
          "gas_fee": "1000000ugnot"
        },
        "signatures": [
          {
            "pub_key": {
              "@type": "/tm.PubKeySecp256k1",
              "value": "AmG6kzznyo1uNqWPAYU6wDpsmzQKDaEOrVRaZ08vOyX0"
            },
            "signature": "njczE6xYdp01+CaUU/8/v0YC/NuZD06+qLind+ZZEEMNaRe/4Ln+4z7dG6HYlaWUMsyI1KCoB6NIehoE0PZ44Q=="
          }
        ],
        "memo": ""
      },
      {
        "msg": [
          {
            "@type": "/vm.m_call",
            "caller": "g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj",
            "send": "",
            "pkg_path": "gno.land/r/users",
            "func": "Invite",
            "args": [
              "g1589c8cekvmjfmy0qrd4f3z52r7fn7rgk02667s\ng13sm84nuqed3fuank8huh7x9mupgw22uft3lcl8\ng1m6732pkrngu9vrt0g7056lvr9kcqc4mv83xl5q\ng1wg88rhzlwxjd2z4j5de5v5xq30dcf6rjq3dhsj\ng18pmaskasz7mxj6rmgrl3al58xu45a7w0l5nmc0\ng19wwhkmqlns70604ksp6rkuuu42qhtvyh05lffz\ng187982000zsc493znqt828s90cmp6hcp2erhu6m\ng1ndpsnrspdnauckytvkfv8s823t3gmpqmtky8pl\ng16ja66d65emkr0zxd2tu7xjvm7utthyhpej0037\ng1ds24jj9kqjcskd0gzu24r9e4n62ggye230zuv5\ng1trkzq75ntamsnw9xnrav2v7gy2lt5g6p29yhdr\ng1rrf8s5mrmu00sx04fzfsvc399fklpeg2x0a7mz\ng19p5ntfvpt4lwq4jqsmnxsnelhf3tff9scy3w8w\ng1tue8l73d6rq4vhqdsp2sr3zhuzpure3k2rnwpz\ng14hhsss4ngx5kq77je5g0tl4vftg8qp45ceadk3\ng1768hvkh7anhd40ch4h7jdh6j3mpcs7hrat4gl0\ng15fa8kyjhu88t9dr8zzua8fwdvkngv5n8yqsm0n\ng1xhccdjcscuhgmt3quww6qdy3j3czqt3urc2eac\ng1z629z04f85k4t5gnkk5egpxw9tqxeec435esap\ng1pfldkplz9puq0v82lu9vqcve9nwrxuq9qe5ttv\ng152pn0g5qfgxr7yx8zlwjq48hytkafd8x7egsfv\ng1cf2ye686ke38vjyqakreprljum4xu6rwf5jskq\ng1c5shztyaj4gjrc5zlwmh9xhex5w7l4asffs2w6\ng1lhpx2ktk0ha3qw42raxq4m24a4c4xqxyrgv54q\ng1026p54q0j902059sm2zsv37krf0ghcl7gmhyv7\ng1n4yvwnv77frq2ccuw27dmtjkd7u4p4jg0pgm7k\ng13m7f2e6r3lh3ykxupacdt9sem2tlvmaamwjhll\ng19uxluuecjlsqvwmwu8sp6pxaaqfhk972q975xd\ng1j80fpcsumfkxypvydvtwtz3j4sdwr8c2u0lr64\ng1tjdpptuk9eysq6z38nscqyycr998xjyx3w8jvw\ng19t3n89slfemgd3mwuat4lajwcp0yxrkadgeg7a\ng1yqndt8xx92l9h494jfruz2w79swzjes3n4wqjc\ng13278z0a5ufeg80ffqxpda9dlp599t7ekregcy6\ng1ht236wjd83x96uqwh9rh3fq6pylyn78mtwq9v6\ng1fj9jccm3zjnqspq7lp2g7lj4czyfq0s35600g9\ng1wwppuzdns5u6c6jqpkzua24zh6ppsus6399cea\ng1k8pjnguyu36pkc8hy0ufzgpzfmj2jl78la7ek3\ng1e8umkzumtxgs8399lw0us4rclea3xl5gxy9spp\ng14qekdkj2nmmwea4ufg9n002a3pud23y8k7ugs5\ng19w2488ntfgpduzqq3sk4j5x387zynwknqdvjqf\ng1495y3z7zrej4rendysnw5kaeu4g3d7x7w0734g\ng1hygx8ga9qakhkczyrzs9drm8j8tu4qds9y5e3r\ng1f977l6wxdh3qu60kzl75vx2wmzswu68l03r8su\ng1644qje5rx6jsdqfkzmgnfcegx4dxkjh6rwqd69\ng1mzjajymvmtksdwh3wkrndwj6zls2awl9q83dh6\ng1u7y667z64x2h7vc6fmpcprgey4ck233jaww9zq\ng14da4n9hcynyzz83q607uu8keuh9hwlv42ra6fa\ng14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t\n"
            ]
          }
        ],
        "fee": {
          "gas_wanted": "4000000",
          "gas_fee": "1000000ugnot"
        },
        "signatures": [
          {
            "pub_key": {
              "@type": "/tm.PubKeySecp256k1",
              "value": "AmG6kzznyo1uNqWPAYU6wDpsmzQKDaEOrVRaZ08vOyX0"
            },
            "signature": "7AmlhZhsVkxCUl0bbpvpPMnIKihwtG7A5IFR6Tg4xStWLgaUr05XmWRKlO2xjstTtwbVKQT5mFL4h5wyX4SQzw=="
          }
        ],
        "memo": ""
      },
      {
        "msg": [
          {
            "@type": "/vm.m_call",
            "caller": "g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj",
            "send": "2000000000ugnot",
            "pkg_path": "gno.land/r/users",
            "func": "Register",
            "args": [
              "",
              "administrator",
              "g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj"
            ]
          }
        ],
        "fee": {
          "gas_wanted": "2000000",
          "gas_fee": "1000000ugnot"
        },
        "signatures": [
          {
            "pub_key": {
              "@type": "/tm.PubKeySecp256k1",
              "value": "AmG6kzznyo1uNqWPAYU6wDpsmzQKDaEOrVRaZ08vOyX0"
            },
            "signature": "AqCqe0cS55Ym7/BvPDoCDyPP5q8284gecVQ2PMOlq/4lJpO9Q18SOWKI15dMEBY1pT0AYyhCeTirlsM1I3Y4Cg=="
          }
        ],
        "memo": ""
      },
      {
        "msg": [
          {
            "@type": "/vm.m_call",
            "caller": "g1qpymzwx4l4cy6cerdyajp9ksvjsf20rk5y9rtt",
            "send": "2000000000ugnot",
            "pkg_path": "gno.land/r/users",
            "func": "Register",
            "args": [
              "",
              "zo_oma",
              "Love is the encryption  key\u003c3"
            ]
          }
        ],
        "fee": {
          "gas_wanted": "2000000",
          "gas_fee": "1000000ugnot"
        },
        "signatures": [
          {
            "pub_key": {
              "@type": "/tm.PubKeySecp256k1",
              "value": "A6yg5/iiktruezVw5vZJwLlGwyrvw8RlqOToTRMWXkE2"
            },
            "signature": "GGp+bVL2eEvKecPqgcULSABYOSnSMnJzfIsR8ZIRER1GGX/fOiCReX4WKMrGLVROJVfbLQkDRwvhS4TLHlSoSQ=="
          }
        ],
        "memo": ""
      },
      {
        "msg": [
          {
            "@type": "/vm.m_call",
            "caller": "g1u7y667z64x2h7vc6fmpcprgey4ck233jaww9zq",
            "send": "2000000000ugnot",
            "pkg_path": "gno.land/r/users",
            "func": "Register",
            "args": [
              "",
              "manfred",
              "https://github.com/moul"
            ]
          }
        ],
        "fee": {
          "gas_wanted": "2000000",
          "gas_fee": "2000000000ugnot"
        },
        "signatures": [
          {
            "pub_key": {
              "@type": "/tm.PubKeySecp256k1",
              "value": "AnK+a6mcFDjY6b/v6p7r8QFW1M1PgIoQxBgrwOoyY7v3"
            },
            "signature": "9CWeNbKx+hEL+RdHplAVAFntcrAVx5mK9tMqoywuHVoreH844n3yOxddQrGfBk6T2tMBmNWakERRqWZfS+bYAQ=="
          }
        ],
        "memo": ""
      },
      {
        "msg": [
          {
            "@type": "/vm.m_call",
            "caller": "g1fj9jccm3zjnqspq7lp2g7lj4czyfq0s35600g9",
            "send": "2000000000ugnot",
            "pkg_path": "gno.land/r/users",
            "func": "Register",
            "args": [
              "",
              "piupiu",
              "@piux2"
            ]
          }
        ],
        "fee": {
          "gas_wanted": "2000000",
          "gas_fee": "1000000ugnot"
        },
        "signatures": [
          {
            "pub_key": {
              "@type": "/tm.PubKeySecp256k1",
              "value": "Ar68lqbU2YC63fbMcYUtJhYO3/66APM/EqF7m0nUjGyz"
            },
            "signature": "pTUpP0d/XlfVe3TH1hlaoLhKadzIKG1gtQ/Ueuat72p+659RWRea58Z0mk6GgPE/EeTbhMEY45zufevBdGJVoQ=="
          }
        ],
        "memo": ""
      },
      {
        "msg": [
          {
            "@type": "/vm.m_call",
            "caller": "g1ds24jj9kqjcskd0gzu24r9e4n62ggye230zuv5",
            "send": "",
            "pkg_path": "gno.land/r/users",
            "func": "Register",
            "args": [
              "g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj",
              "anarcher",
              "https://twitter.com/anarcher"
            ]
          }
        ],
        "fee": {
          "gas_wanted": "2000000",
          "gas_fee": "1000000ugnot"
        },
        "signatures": [
          {
            "pub_key": {
              "@type": "/tm.PubKeySecp256k1",
              "value": "AjpLbKdQeH+yB/1OCB148l5GlRRrXma71hdA8EES3H7f"
            },
            "signature": "pf5xm8oWIQIOEwSGw4icPmynLXb1P1HxKfjeh8UStU1mlIBPKa7yppeIMPpAflC0o2zjFR7Axe7CimAebm3BHg=="
          }
        ],
        "memo": ""
      },
      {
        "msg": [
          {
            "@type": "/vm.m_call",
            "caller": "g15gdm49ktawvkrl88jadqpucng37yxutucuwaef",
            "send": "2000000000ugnot",
            "pkg_path": "gno.land/r/users",
            "func": "Register",
            "args": [
              "",
              "ideamour",
              "\u003c3"
            ]
          }
        ],
        "fee": {
          "gas_wanted": "2000000",
          "gas_fee": "1000000ugnot"
        },
        "signatures": [
          {
            "pub_key": {
              "@type": "/tm.PubKeySecp256k1",
              "value": "AhClx4AsDuX3DNCPxhDwWnrfd4MIZmxJE4vt47ClVvT2"
            },
            "signature": "IQe64af878k6HjLDqIJeg27GXAVF6xS+96cDe2jMlxNV6+8sOcuUctp0GiWVnYfN4tpthC6d4WhBo+VlpHqkbg=="
          }
        ],
        "memo": ""
      },
      {
        "msg": [
          {
            "@type": "/vm.m_call",
            "caller": "g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj",
            "send": "",
            "pkg_path": "gno.land/r/boards",
            "func": "CreateBoard",
            "args": [
              "testboard"
            ]
          }
        ],
        "fee": {
          "gas_wanted": "2000000",
          "gas_fee": "1000000ugnot"
        },
        "signatures": [
          {
            "pub_key": {
              "@type": "/tm.PubKeySecp256k1",
              "value": "A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"
            },
            "signature": "vzlSxEFh5jOkaSdv3rsV91v/OJKEF2qSuoCpri1u5tRWq62T7xr3KHRCF5qFnn4aQX/yE8g8f/Y//WPOCUGhJw=="
          }
        ],
        "memo": ""
      },
      {
        "msg": [
          {
            "@type": "/vm.m_call",
            "caller": "g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj",
            "send": "",
            "pkg_path": "gno.land/r/boards",
            "func": "CreateThread",
            "args": [
              "1",
              "Hello World",
              "This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm \nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n## Starting the `gnoland` node node/validator.\n\nNOTE: Where you see `--remote localhost:26657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### build gnoland.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake \n```\n\n### add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mnemonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### start gnoland validator node.\n\n```bash\n./build/gnoland\n```\n\n(This can be reset with `make reset`).\n\n### start gnoland web server (optional).\n\n```bash\ngo run ./gnoland/website\n```\n\n## Signing and broadcasting transactions.\n\n### publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100ugnot --gas-fee 1ugnot --gas-wanted 2000000 \u003e addpkg.avl.unsigned.txt\n./build/gnokey query \"auth/accounts/g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\"\n./build/gnokey sign test1 --txpath addpkg.avl.unsigned.txt --chainid \"realm-1\" --number 0 --sequence 0 \u003e addpkg.avl.signed.txt\n./build/gnokey broadcast addpkg.avl.signed.txt --remote localhost:26657\n```\n\n### publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100ugnot --gas-fee 1ugnot --gas-wanted 300000000 \u003e addpkg.boards.unsigned.txt\n./build/gnokey sign test1 --txpath addpkg.boards.unsigned.txt --chainid \"realm-1\" --number 0 --sequence 1 \u003e addpkg.boards.signed.txt\n./build/gnokey broadcast addpkg.boards.signed.txt --remote localhost:26657\n```\n\n### create a board with a smart contract call.\n\n```bash\n./build/gnokey maketx call test1 --pkgpath \"gno.land/r/boards\" --func CreateBoard --args \"testboard\" --gas-fee 1ugnot --gas-wanted 2000000 \u003e createboard.unsigned.txt\n./build/gnokey sign test1 --txpath createboard.unsigned.txt --chainid \"realm-1\" --number 0 --sequence 2 \u003e createboard.signed.txt\n./build/gnokey broadcast createboard.signed.txt --remote localhost:26657\n```\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"testboard\\\")\"\n```\n\n### create a post of a board with a smart contract call.\n\n```bash\n./build/gnokey maketx call test1 --pkgpath \"gno.land/r/boards\" --func CreatePost --args 1 --args \"Hello World\" --args#file \"./examples/gno.land/r/boards/README.md\" --gas-fee 1ugnot --gas-wanted 2000000 \u003e createpost.unsigned.txt\n./build/gnokey sign test1 --txpath createpost.unsigned.txt --chainid \"realm-1\" --number 0 --sequence 3 \u003e createpost.signed.txt\n./build/gnokey broadcast createpost.signed.txt --remote localhost:26657\n```\n\n### create a comment to a post.\n\n```bash\n./build/gnokey maketx call test1 --pkgpath \"gno.land/r/boards\" --func CreateReply --args 1 --args 1 --args \"A comment\" --gas-fee 1ugnot --gas-wanted 2000000 \u003e createcomment.unsigned.txt\n./build/gnokey sign test1 --txpath createcomment.unsigned.txt --chainid \"realm-1\" --number 0 --sequence 4 \u003e createcomment.signed.txt\n./build/gnokey broadcast createcomment.signed.txt --remote localhost:26657\n```\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ntestboard/1\"\n```\n\n### render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:testboard` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ntestboard\"\n```\n"
            ]
          }
        ],
        "fee": {
          "gas_wanted": "2000000",
          "gas_fee": "1000000ugnot"
        },
        "signatures": [
          {
            "pub_key": {
              "@type": "/tm.PubKeySecp256k1",
              "value": "A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"
            },
            "signature": "V43B1waFxhzheW9TfmCpjLdrC4dC1yjUGES5y3J6QsNar6hRpNz4G1thzWmWK7xXhg8u1PCIpxLxGczKQYhuPw=="
          }
        ],
        "memo": ""
      },
      {
        "msg": [
          {
            "@type": "/vm.m_call",
            "caller": "g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj",
            "send": "",
            "pkg_path": "gno.land/r/boards",
            "func": "CreateThread",
            "args": [
              "1",
              "NFT example",
              "NFT's are all the rage these days, for various reasons.\n\nI read over EIP-721 which appears to be the de-facto NFT standard on Ethereum. Then, made a sample implementation of EIP-721 (let's here called GRC-721). The implementation isn't complete, but it demonstrates the main functionality.\n\n - [EIP-721](https://eips.ethereum.org/EIPS/eip-721)\n - [gno.land/r/nft/nft.gno](https://gno.land/r/nft/nft.gno)\n - [zrealm_nft3.gno test](https://github.com/gnolang/gno/blob/master/examples/gno.land/r/nft/z_3_filetest.gno)\n\nIn short, this demonstrates how to implement Ethereum contract interfaces in Gno.land; by using only standard Go language features.\n\nPlease leave a comment ([guide](https://gno.land/r/boards:testboard/1)).\n"
            ]
          }
        ],
        "fee": {
          "gas_wanted": "2000000",
          "gas_fee": "1000000ugnot"
        },
        "signatures": [
          {
            "pub_key": {
              "@type": "/tm.PubKeySecp256k1",
              "value": "A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"
            },
            "signature": "ZXfrTiHxPFQL8uSm+Tv7WXIHPMca9okhm94RAlC6YgNbB1VHQYYpoP4w+cnL3YskVzGrOZxensXa9CAZ+cNNeg=="
          }
        ],
        "memo": ""
      },
      {
        "msg": [
          {
            "@type": "/vm.m_call",
            "caller": "g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj",
            "send": "",
            "pkg_path": "gno.land/r/boards",
            "func": "CreateThread",
            "args": [
              "1",
              "Simple echo example with coins",
              "This is a simple test realm contract that demonstrates how to use the banker.\n\nSee [gno.land/r/banktest/banktest.gno](/r/banktest/banktest.gno) to see the original contract code.\n\nThis article will go through each line to explain how it works.\n\n```go\npackage banktest\n```\n\nThis package is locally named \"banktest\" (could be anything).\n\n```go\nimport (\n\t\"std\"\n)\n```\n\nThe \"std\" package is defined by the gno code in stdlibs/std/. \u003c/br\u003e\nSelf explanatory; and you'll see more usage from std later.\n\n```go\ntype activity struct {\n\tcaller   std.Address\n\tsent     std.Coins\n\treturned std.Coins\n\ttime     std.Time\n}\n\nfunc (act *activity) String() string {\n\treturn act.caller.String() + \" \" +\n\t\tact.sent.String() + \" sent, \" +\n\t\tact.returned.String() + \" returned, at \" +\n\t\tstd.FormatTimestamp(act.time, \"2006-01-02 3:04pm MST\")\n}\n\nvar latest [10]*activity\n```\n\nThis is just maintaining a list of recent activity to this contract.\nNotice that the \"latest\" variable is defined \"globally\" within\nthe context of the realm with path \"gno.land/r/banktest\".\n\nThis means that calls to functions defined within this package\nare encapsulated within this \"data realm\", where the data is \nmutated based on transactions that can potentially cross many\nrealm and non-realm packge boundaries (in the call stack).\n\n```go\n// Deposit will take the coins (to the realm's pkgaddr) or return them to user.\nfunc Deposit(returnDenom string, returnAmount int64) string {\n\tstd.AssertOriginCall()\n\tcaller := std.GetOrigCaller()\n\tsend := std.Coins{{returnDenom, returnAmount}}\n```\n\nThis is the beginning of the definition of the contract function named\n\"Deposit\".  `std.AssertOriginCall() asserts that this function was called by a\ngno transactional Message. The caller is the user who signed off on this\ntransactional message. Send is the amount of deposit sent along with this\nmessage.\n\n```go\n\t// record activity\n\tact := \u0026activity{\n\t\tcaller:   caller,\n\t\tsent:     std.GetOrigSend(),\n\t\treturned: send,\n\t\ttime:     std.GetTimestamp(),\n\t}\n\tfor i := len(latest) - 2; i \u003e= 0; i-- {\n\t\tlatest[i+1] = latest[i] // shift by +1.\n\t}\n\tlatest[0] = act\n```\n\nUpdating the \"latest\" array for viewing at gno.land/r/banktest: (w/ trailing colon).\n\n```go\n\t// return if any.\n\tif returnAmount \u003e 0 {\n```\n\nIf the user requested the return of coins...\n\n```go\n\t\tbanker := std.GetBanker(std.BankerTypeOrigSend)\n```\n\nuse a std.Banker instance to return any deposited coins to the original sender.\n\n```go\n\t\tpkgaddr := std.GetOrigPkgAddr()\n\t\t// TODO: use std.Coins constructors, this isn't generally safe.\n\t\tbanker.SendCoins(pkgaddr, caller, send)\n\t\treturn \"returned!\"\n```\n\nNotice that each realm package has an associated Cosmos address.\n\n\nFinally, the results are rendered via an ABCI query call when you visit [/r/banktest:](/r/banktest:).\n\n```go\nfunc Render(path string) string {\n\t// get realm coins.\n\tbanker := std.GetBanker(std.BankerTypeReadonly)\n\tcoins := banker.GetCoins(std.GetOrigPkgAddr())\n\n\t// render\n\tres := \"\"\n\tres += \"## recent activity\\n\"\n\tres += \"\\n\"\n\tfor _, act := range latest {\n\t\tif act == nil {\n\t\t\tbreak\n\t\t}\n\t\tres += \" * \" + act.String() + \"\\n\"\n\t}\n\tres += \"\\n\"\n\tres += \"## total deposits\\n\"\n\tres += coins.String()\n\treturn res\n}\n```\n\nYou can call this contract yourself, by vistiing [/r/banktest](/r/banktest) and the [quickstart guide](/r/boards:testboard/4).\n"
            ]
          }
        ],
        "fee": {
          "gas_wanted": "2000000",
          "gas_fee": "1000000ugnot"
        },
        "signatures": [
          {
            "pub_key": {
              "@type": "/tm.PubKeySecp256k1",
              "value": "A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"
            },
            "signature": "iZX/llZlNTdZMLv1goCTgK2bWqzT8enlTq56wMTCpVxJGA0BTvuEM5Nnt9vrnlG6Taqj2GuTrmEnJBkDFTmt9g=="
          }
        ],
        "memo": ""
      },
      {
        "msg": [
          {
            "@type": "/vm.m_call",
            "caller": "g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj",
            "send": "",
            "pkg_path": "gno.land/r/boards",
            "func": "CreateThread",
            "args": [
              "1",
              "TASK: Describe in your words",
              "Describe in an essay (250+ words), on your favorite medium, why you are interested in gno.land and gnolang.\n\nReply here with a URL link to your written piece as a comment, for rewards.\n"
            ]
          }
        ],
        "fee": {
          "gas_wanted": "2000000",
          "gas_fee": "1000000ugnot"
        },
        "signatures": [
          {
            "pub_key": {
              "@type": "/tm.PubKeySecp256k1",
              "value": "AmG6kzznyo1uNqWPAYU6wDpsmzQKDaEOrVRaZ08vOyX0"
            },
            "signature": "4HBNtrta8HdeHj4JTN56PBTRK8GOe31NMRRXDiyYtjozuyRdWfOGEsGjGgHWcoBUJq6DepBgD4FetdqfhZ6TNQ=="
          }
        ],
        "memo": ""
      },
      {
        "msg": [
          {
            "@type": "/vm.m_call",
            "caller": "g1u7y667z64x2h7vc6fmpcprgey4ck233jaww9zq",
            "send": "",
            "pkg_path": "gno.land/r/boards",
            "func": "CreateThread",
            "args": [
              "1",
              "Getting Started",
              "This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote localhost:26657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote localhost:26657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid realm-1 --remote localhost:26657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote localhost:26657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid realm-1 --remote localhost:26657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid realm-1 --remote localhost:26657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote localhost:26657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid realm-1 --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid realm-1 --remote localhost:26657\n```\n"
            ]
          }
        ],
        "fee": {
          "gas_wanted": "2000000",
          "gas_fee": "1000000ugnot"
        },
        "signatures": [
          {
            "pub_key": {
              "@type": "/tm.PubKeySecp256k1",
              "value": "AnK+a6mcFDjY6b/v6p7r8QFW1M1PgIoQxBgrwOoyY7v3"
            },
            "signature": "sHjOGXZEi9wt2FSXFHmkDDoVQyepvFHKRDDU0zgedHYnCYPx5/YndyihsDD5Y2Z7/RgNYBh4JlJwDMGFNStzBQ=="
          }
        ],
        "memo": ""
      },
      {
        "msg": [
          {
            "@type": "/vm.m_call",
            "caller": "g1j5czzm2mugysnm772y8qxkas9ydqhz0uulm9ax",
            "send": "10000000ugnot",
            "pkg_path": "gno.land/r/validators",
            "func": "CreateValidator",
            "args": [
              "Space1",
              "dGanfChhf2FIj2oFwG2zG6iYApIB5hXd183vP8/b0WI="
            ]
          }
        ],
        "fee": {
          "gas_wanted": "2000000",
          "gas_fee": "1ugnot"
        },
        "signatures": [
          {
            "pub_key": {
              "@type": "/tm.PubKeySecp256k1",
              "value": "A2IL3KBi/QbIPXCRaIx9UhVfDmCqNU0ZjC4yy6StNEXv"
            },
            "signature": "47Gm0hEM67PmBRAb6hxpxM1X+XNtLLbJIiw7vRkffmEFC82mrNlesweeypN0I1Z0ihYX3aIbp4wong87UxMaTw=="
          }
        ],
        "memo": ""
      },
      {
        "msg": [
          {
            "@type": "/vm.m_call",
            "caller": "g1r3ut929yd837ln5lwujxrqt2j5ug7e98q0fkvm",
            "send": "10000000ugnot",
            "pkg_path": "gno.land/r/validators",
            "func": "CreateValidator",
            "args": [
              "Omega",
              "aMYVAYviLqFP8TN2hJb+GgqthTPWsatolRzkzOC9Afo="
            ]
          }
        ],
        "fee": {
          "gas_wanted": "2000000",
          "gas_fee": "1ugnot"
        },
        "signatures": [
          {
            "pub_key": {
              "@type": "/tm.PubKeySecp256k1",
              "value": "A9/SvIiIBGe9RDAZ+/epfxiQCfDvJusyr9Pe2NpTTQKV"
            },
            "signature": "nEIKFsrFgpEnOR0Qo8dAN55WS05PCtJhwKPa6BEDlxRoPWRy4SNSIyOWp598UzgdLVmlgpCHIapZVoC0pYFlsw=="
          }
        ],
        "memo": ""
      },
      {
        "msg": [
          {
            "@type": "/vm.m_call",
            "caller": "g1kjw7c4aeuv3sj27q025fsakpypcup0cq9urw8d",
            "send": "10000000ugnot",
            "pkg_path": "gno.land/r/validators",
            "func": "CreateValidator",
            "args": [
              "“Eden3”",
              "vVA2anbzX6EU3ywXrCBV4NMG+Pj+VvKHxlB4QRZwjLw="
            ]
          }
        ],
        "fee": {
          "gas_wanted": "2000000",
          "gas_fee": "1ugnot"
        },
        "signatures": [
          {
            "pub_key": {
              "@type": "/tm.PubKeySecp256k1",
              "value": "AijSaFCyuvUIEQWfaJosgDLTCN7oP3+PZ+6eThAme2tC"
            },
            "signature": "EKzJlwrjtyAKoEyJm2luTol77PlpX7Jv3Z8068Y6r7Uk9P6TM3I20Na3Uyv6mZ2K5BfS4wC7F8JKJE09lNufQA=="
          }
        ],
        "memo": ""
      }
    ]
  }
}
